
New_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000206  00800060  00005246  000052da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800266  00800266  000054e0  2**0
                  ALLOC
  3 .stab         000043c8  00000000  00000000  000054e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014d4  00000000  00000000  000098a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ad7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000af1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000d518  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000e88f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fa68  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000fc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000ff1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000108e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e7 24 	jmp	0x49ce	; 0x49ce <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 b4 24 	jmp	0x4968	; 0x4968 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 ca 14 	jmp	0x2994	; 0x2994 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f2 e5       	ldi	r31, 0x52	; 82
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 13 	call	0x27bc	; 0x27bc <main>
      8a:	0c 94 21 29 	jmp	0x5242	; 0x5242 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ef       	ldi	r26, 0xFD	; 253
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 20 26 	jmp	0x4c40	; 0x4c40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 10 26 	jmp	0x4c20	; 0x4c20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2c 26 	jmp	0x4c58	; 0x4c58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 10 26 	jmp	0x4c20	; 0x4c20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2c 26 	jmp	0x4c58	; 0x4c58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 20 26 	jmp	0x4c40	; 0x4c40 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0c 26 	jmp	0x4c18	; 0x4c18 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d ef       	ldi	r22, 0xFD	; 253
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 28 26 	jmp	0x4c50	; 0x4c50 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 10 26 	jmp	0x4c20	; 0x4c20 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2c 26 	jmp	0x4c58	; 0x4c58 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 10 26 	jmp	0x4c20	; 0x4c20 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2c 26 	jmp	0x4c58	; 0x4c58 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 10 26 	jmp	0x4c20	; 0x4c20 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2c 26 	jmp	0x4c58	; 0x4c58 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0d 26 	jmp	0x4c1a	; 0x4c1a <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 29 26 	jmp	0x4c52	; 0x4c52 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 30 26 	jmp	0x4c60	; 0x4c60 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	eb 5f       	subi	r30, 0xFB	; 251
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <system_Default>:

/*********************************************************************************************************
 *                      				Functions Definitions                                            *
 *********************************************************************************************************/
void system_Default(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	LEDS_all_off();
     e00:	0e 94 5e 24 	call	0x48bc	; 0x48bc <LEDS_all_off>
	Buzzer_off();
     e04:	0e 94 34 16 	call	0x2c68	; 0x2c68 <Buzzer_off>
	Pump_deActivate();
     e08:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <Pump_deActivate>
	Timer1_deInit();
     e0c:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <Timer1_deInit>
	g_Seconds = 0;
     e10:	10 92 69 02 	sts	0x0269, r1
	g_Minutes = 5;
     e14:	85 e0       	ldi	r24, 0x05	; 5
     e16:	80 93 05 02 	sts	0x0205, r24
}
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <safe_state>:
//======================================================================================================//
void safe_state(void)
{
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	g_Warningflag = 0;
     e28:	10 92 67 02 	sts	0x0267, r1
	g_Dangerflag = 0;
     e2c:	10 92 68 02 	sts	0x0268, r1

	if(g_Safeflag == 0)
     e30:	80 91 66 02 	lds	r24, 0x0266
     e34:	88 23       	and	r24, r24
     e36:	81 f4       	brne	.+32     	; 0xe58 <safe_state+0x38>
	{
		Send_State_to_GUI();
     e38:	0e 94 97 08 	call	0x112e	; 0x112e <Send_State_to_GUI>
		system_Default();
     e3c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <system_Default>
		/* green led on */
		LED_ON(LED_1);
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <LED_ON>
		LCD_clearScreen();
     e46:	0e 94 aa 23 	call	0x4754	; 0x4754 <LCD_clearScreen>
		LCD_displayString("State: Safe");
     e4a:	80 e6       	ldi	r24, 0x60	; 96
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_displayString>
		g_Safeflag = 1;
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	80 93 66 02 	sts	0x0266, r24
	}
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <warning_state>:
//======================================================================================================//
void warning_state(void)
{
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
	g_Safeflag = 0;
     e66:	10 92 66 02 	sts	0x0266, r1
	g_Dangerflag = 0;
     e6a:	10 92 68 02 	sts	0x0268, r1
	if(g_Warningflag == 0)
     e6e:	80 91 67 02 	lds	r24, 0x0267
     e72:	88 23       	and	r24, r24
     e74:	81 f4       	brne	.+32     	; 0xe96 <warning_state+0x38>
	{
		Send_State_to_GUI();
     e76:	0e 94 97 08 	call	0x112e	; 0x112e <Send_State_to_GUI>
		system_Default();
     e7a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <system_Default>
		/* yellow led on */
		LED_ON(LED_2);
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <LED_ON>
		LCD_clearScreen();
     e84:	0e 94 aa 23 	call	0x4754	; 0x4754 <LCD_clearScreen>
		LCD_displayString("State: Warning");
     e88:	8c e6       	ldi	r24, 0x6C	; 108
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_displayString>
		g_Warningflag = 1;
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	80 93 67 02 	sts	0x0267, r24
	}
}
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <danger_state>:
//======================================================================================================//
void danger_state(void)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	2d 97       	sbiw	r28, 0x0d	; 13
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
	g_Safeflag = 0;
     eb0:	10 92 66 02 	sts	0x0266, r1
	g_Warningflag = 0;
     eb4:	10 92 67 02 	sts	0x0267, r1
	if(g_Dangerflag == 0)
     eb8:	80 91 68 02 	lds	r24, 0x0268
     ebc:	88 23       	and	r24, r24
     ebe:	e1 f5       	brne	.+120    	; 0xf38 <danger_state+0x9c>
	{
		Send_State_to_GUI();
     ec0:	0e 94 97 08 	call	0x112e	; 0x112e <Send_State_to_GUI>
		system_Default();
     ec4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <system_Default>
		/* red led on */
		LED_ON(LED_3);
     ec8:	82 e0       	ldi	r24, 0x02	; 2
     eca:	0e 94 fc 23 	call	0x47f8	; 0x47f8 <LED_ON>
		Buzzer_on();
     ece:	0e 94 28 16 	call	0x2c50	; 0x2c50 <Buzzer_on>
		Pump_Activate();
     ed2:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <Pump_Activate>
		LCD_clearScreen();
     ed6:	0e 94 aa 23 	call	0x4754	; 0x4754 <LCD_clearScreen>
		LCD_displayString("State: Danger");
     eda:	8b e7       	ldi	r24, 0x7B	; 123
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_displayString>
		Timer1_ConfigType Timer1_config ={0, COMPARE_MODE_VALUE , 0 , F_CPU_1024, COMPARE_MODE};
     ee2:	ce 01       	movw	r24, r28
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	9a 87       	std	Y+10, r25	; 0x0a
     ee8:	89 87       	std	Y+9, r24	; 0x09
     eea:	e6 e0       	ldi	r30, 0x06	; 6
     eec:	f2 e0       	ldi	r31, 0x02	; 2
     eee:	fc 87       	std	Y+12, r31	; 0x0c
     ef0:	eb 87       	std	Y+11, r30	; 0x0b
     ef2:	f8 e0       	ldi	r31, 0x08	; 8
     ef4:	fd 87       	std	Y+13, r31	; 0x0d
     ef6:	eb 85       	ldd	r30, Y+11	; 0x0b
     ef8:	fc 85       	ldd	r31, Y+12	; 0x0c
     efa:	00 80       	ld	r0, Z
     efc:	8b 85       	ldd	r24, Y+11	; 0x0b
     efe:	9c 85       	ldd	r25, Y+12	; 0x0c
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	9c 87       	std	Y+12, r25	; 0x0c
     f04:	8b 87       	std	Y+11, r24	; 0x0b
     f06:	e9 85       	ldd	r30, Y+9	; 0x09
     f08:	fa 85       	ldd	r31, Y+10	; 0x0a
     f0a:	00 82       	st	Z, r0
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	9a 87       	std	Y+10, r25	; 0x0a
     f14:	89 87       	std	Y+9, r24	; 0x09
     f16:	9d 85       	ldd	r25, Y+13	; 0x0d
     f18:	91 50       	subi	r25, 0x01	; 1
     f1a:	9d 87       	std	Y+13, r25	; 0x0d
     f1c:	ed 85       	ldd	r30, Y+13	; 0x0d
     f1e:	ee 23       	and	r30, r30
     f20:	51 f7       	brne	.-44     	; 0xef6 <danger_state+0x5a>
		Timer1_init(&Timer1_config);
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <Timer1_init>
		Timer1_setCallBack(Timer_CallBack);
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	97 e0       	ldi	r25, 0x07	; 7
     f2e:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <Timer1_setCallBack>
		g_Dangerflag = 1;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	80 93 68 02 	sts	0x0268, r24
	}
}
     f38:	2d 96       	adiw	r28, 0x0d	; 13
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	de bf       	out	0x3e, r29	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	cd bf       	out	0x3d, r28	; 61
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <get_state>:
//======================================================================================================//
void get_state(void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	if(g_GassPer < 25)
     f52:	80 91 6a 02 	lds	r24, 0x026A
     f56:	89 31       	cpi	r24, 0x19	; 25
     f58:	28 f4       	brcc	.+10     	; 0xf64 <get_state+0x1a>
	{
		g_CurrentState = SAFE;
     f5a:	10 92 6d 02 	sts	0x026D, r1
		update_state();
     f5e:	0e 94 c8 07 	call	0xf90	; 0xf90 <update_state>
     f62:	13 c0       	rjmp	.+38     	; 0xf8a <get_state+0x40>
	}
	else if(g_GassPer < 50)
     f64:	80 91 6a 02 	lds	r24, 0x026A
     f68:	82 33       	cpi	r24, 0x32	; 50
     f6a:	30 f4       	brcc	.+12     	; 0xf78 <get_state+0x2e>
	{
		g_CurrentState = WARNING;
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	80 93 6d 02 	sts	0x026D, r24
		update_state();
     f72:	0e 94 c8 07 	call	0xf90	; 0xf90 <update_state>
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <get_state+0x40>
	}
	else if(g_GassPer <= 100)
     f78:	80 91 6a 02 	lds	r24, 0x026A
     f7c:	85 36       	cpi	r24, 0x65	; 101
     f7e:	28 f4       	brcc	.+10     	; 0xf8a <get_state+0x40>
	{
		g_CurrentState = DANGER;
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	80 93 6d 02 	sts	0x026D, r24
		update_state();
     f86:	0e 94 c8 07 	call	0xf90	; 0xf90 <update_state>
	}
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <update_state>:
//======================================================================================================//
void update_state(void)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <update_state+0x6>
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
	switch(g_CurrentState)
     f9a:	80 91 6d 02 	lds	r24, 0x026D
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3a 83       	std	Y+2, r19	; 0x02
     fa4:	29 83       	std	Y+1, r18	; 0x01
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	91 05       	cpc	r25, r1
     fae:	81 f0       	breq	.+32     	; 0xfd0 <update_state+0x40>
     fb0:	29 81       	ldd	r18, Y+1	; 0x01
     fb2:	3a 81       	ldd	r19, Y+2	; 0x02
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	31 05       	cpc	r19, r1
     fb8:	91 f0       	breq	.+36     	; 0xfde <update_state+0x4e>
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	a1 f4       	brne	.+40     	; 0xfea <update_state+0x5a>
	{
	case SAFE:
		Ptr_current_state =  safe_state;
     fc2:	80 e1       	ldi	r24, 0x10	; 16
     fc4:	97 e0       	ldi	r25, 0x07	; 7
     fc6:	90 93 6c 02 	sts	0x026C, r25
     fca:	80 93 6b 02 	sts	0x026B, r24
     fce:	0d c0       	rjmp	.+26     	; 0xfea <update_state+0x5a>
		break;
	case WARNING:
		Ptr_current_state =  warning_state;
     fd0:	8f e2       	ldi	r24, 0x2F	; 47
     fd2:	97 e0       	ldi	r25, 0x07	; 7
     fd4:	90 93 6c 02 	sts	0x026C, r25
     fd8:	80 93 6b 02 	sts	0x026B, r24
     fdc:	06 c0       	rjmp	.+12     	; 0xfea <update_state+0x5a>
		break;
	case DANGER:
		Ptr_current_state =  danger_state;
     fde:	8e e4       	ldi	r24, 0x4E	; 78
     fe0:	97 e0       	ldi	r25, 0x07	; 7
     fe2:	90 93 6c 02 	sts	0x026C, r25
     fe6:	80 93 6b 02 	sts	0x026B, r24
		break;
	}
	Ptr_current_state();
     fea:	e0 91 6b 02 	lds	r30, 0x026B
     fee:	f0 91 6c 02 	lds	r31, 0x026C
     ff2:	09 95       	icall
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <Timer_CallBack>:
//======================================================================================================//
/* This function is called back(by interrupt) each 1sec. */
void Timer_CallBack(void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
	if(g_Seconds==0)
    1006:	80 91 69 02 	lds	r24, 0x0269
    100a:	88 23       	and	r24, r24
    100c:	61 f4       	brne	.+24     	; 0x1026 <Timer_CallBack+0x28>
	{
		g_Seconds = 60;
    100e:	8c e3       	ldi	r24, 0x3C	; 60
    1010:	80 93 69 02 	sts	0x0269, r24
		if(g_Minutes > 0)
    1014:	80 91 05 02 	lds	r24, 0x0205
    1018:	88 23       	and	r24, r24
    101a:	29 f0       	breq	.+10     	; 0x1026 <Timer_CallBack+0x28>
		{
			g_Minutes --;
    101c:	80 91 05 02 	lds	r24, 0x0205
    1020:	81 50       	subi	r24, 0x01	; 1
    1022:	80 93 05 02 	sts	0x0205, r24
		}
	}
	g_Seconds --;
    1026:	80 91 69 02 	lds	r24, 0x0269
    102a:	81 50       	subi	r24, 0x01	; 1
    102c:	80 93 69 02 	sts	0x0269, r24

    Send_Time_to_GUI();
    1030:	0e 94 b6 09 	call	0x136c	; 0x136c <Send_Time_to_GUI>

	/* After 5min stop the timer and close the Door */
	if(g_Minutes == 0 && g_Seconds == 0)
    1034:	80 91 05 02 	lds	r24, 0x0205
    1038:	88 23       	and	r24, r24
    103a:	41 f4       	brne	.+16     	; 0x104c <Timer_CallBack+0x4e>
    103c:	80 91 69 02 	lds	r24, 0x0269
    1040:	88 23       	and	r24, r24
    1042:	21 f4       	brne	.+8      	; 0x104c <Timer_CallBack+0x4e>
	{
		Timer1_deInit();
    1044:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <Timer1_deInit>
		close_door();
    1048:	0e 94 60 08 	call	0x10c0	; 0x10c0 <close_door>
	}
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <open_door>:
//======================================================================================================//
void open_door(void)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	2d 97       	sbiw	r28, 0x0d	; 13
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType Timer1_config ={0, SERVO_180_DEGREE , TOP_VALUE , F_CPU_64, PWM_MODE};
    1066:	ce 01       	movw	r24, r28
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	9a 87       	std	Y+10, r25	; 0x0a
    106c:	89 87       	std	Y+9, r24	; 0x09
    106e:	ee e0       	ldi	r30, 0x0E	; 14
    1070:	f2 e0       	ldi	r31, 0x02	; 2
    1072:	fc 87       	std	Y+12, r31	; 0x0c
    1074:	eb 87       	std	Y+11, r30	; 0x0b
    1076:	f8 e0       	ldi	r31, 0x08	; 8
    1078:	fd 87       	std	Y+13, r31	; 0x0d
    107a:	eb 85       	ldd	r30, Y+11	; 0x0b
    107c:	fc 85       	ldd	r31, Y+12	; 0x0c
    107e:	00 80       	ld	r0, Z
    1080:	8b 85       	ldd	r24, Y+11	; 0x0b
    1082:	9c 85       	ldd	r25, Y+12	; 0x0c
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	9c 87       	std	Y+12, r25	; 0x0c
    1088:	8b 87       	std	Y+11, r24	; 0x0b
    108a:	e9 85       	ldd	r30, Y+9	; 0x09
    108c:	fa 85       	ldd	r31, Y+10	; 0x0a
    108e:	00 82       	st	Z, r0
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	01 96       	adiw	r24, 0x01	; 1
    1096:	9a 87       	std	Y+10, r25	; 0x0a
    1098:	89 87       	std	Y+9, r24	; 0x09
    109a:	9d 85       	ldd	r25, Y+13	; 0x0d
    109c:	91 50       	subi	r25, 0x01	; 1
    109e:	9d 87       	std	Y+13, r25	; 0x0d
    10a0:	ed 85       	ldd	r30, Y+13	; 0x0d
    10a2:	ee 23       	and	r30, r30
    10a4:	51 f7       	brne	.-44     	; 0x107a <open_door+0x28>
	Timer1_init(&Timer1_config);
    10a6:	ce 01       	movw	r24, r28
    10a8:	01 96       	adiw	r24, 0x01	; 1
    10aa:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <Timer1_init>
}
    10ae:	2d 96       	adiw	r28, 0x0d	; 13
    10b0:	0f b6       	in	r0, 0x3f	; 63
    10b2:	f8 94       	cli
    10b4:	de bf       	out	0x3e, r29	; 62
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	cd bf       	out	0x3d, r28	; 61
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <close_door>:
//======================================================================================================//
void close_door(void)
{
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	cd b7       	in	r28, 0x3d	; 61
    10c6:	de b7       	in	r29, 0x3e	; 62
    10c8:	2d 97       	sbiw	r28, 0x0d	; 13
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType Timer1_config ={0, SERVO_0_DEGREE , TOP_VALUE , F_CPU_64, PWM_MODE};
    10d4:	ce 01       	movw	r24, r28
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	9a 87       	std	Y+10, r25	; 0x0a
    10da:	89 87       	std	Y+9, r24	; 0x09
    10dc:	e6 e1       	ldi	r30, 0x16	; 22
    10de:	f2 e0       	ldi	r31, 0x02	; 2
    10e0:	fc 87       	std	Y+12, r31	; 0x0c
    10e2:	eb 87       	std	Y+11, r30	; 0x0b
    10e4:	f8 e0       	ldi	r31, 0x08	; 8
    10e6:	fd 87       	std	Y+13, r31	; 0x0d
    10e8:	eb 85       	ldd	r30, Y+11	; 0x0b
    10ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    10ec:	00 80       	ld	r0, Z
    10ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    10f0:	9c 85       	ldd	r25, Y+12	; 0x0c
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	9c 87       	std	Y+12, r25	; 0x0c
    10f6:	8b 87       	std	Y+11, r24	; 0x0b
    10f8:	e9 85       	ldd	r30, Y+9	; 0x09
    10fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    10fc:	00 82       	st	Z, r0
    10fe:	89 85       	ldd	r24, Y+9	; 0x09
    1100:	9a 85       	ldd	r25, Y+10	; 0x0a
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	9a 87       	std	Y+10, r25	; 0x0a
    1106:	89 87       	std	Y+9, r24	; 0x09
    1108:	9d 85       	ldd	r25, Y+13	; 0x0d
    110a:	91 50       	subi	r25, 0x01	; 1
    110c:	9d 87       	std	Y+13, r25	; 0x0d
    110e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1110:	ee 23       	and	r30, r30
    1112:	51 f7       	brne	.-44     	; 0x10e8 <close_door+0x28>
	Timer1_init(&Timer1_config);
    1114:	ce 01       	movw	r24, r28
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	0e 94 1a 25 	call	0x4a34	; 0x4a34 <Timer1_init>
}
    111c:	2d 96       	adiw	r28, 0x0d	; 13
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	de bf       	out	0x3e, r29	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	cd bf       	out	0x3d, r28	; 61
    1128:	cf 91       	pop	r28
    112a:	df 91       	pop	r29
    112c:	08 95       	ret

0000112e <Send_State_to_GUI>:
//======================================================================================================//
void Send_State_to_GUI(void)
{
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	6e 97       	sbiw	r28, 0x1e	; 30
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
	UART_SendByte('*');
    1142:	8a e2       	ldi	r24, 0x2A	; 42
    1144:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a8 e4       	ldi	r26, 0x48	; 72
    114e:	b2 e4       	ldi	r27, 0x42	; 66
    1150:	89 8f       	std	Y+25, r24	; 0x19
    1152:	9a 8f       	std	Y+26, r25	; 0x1a
    1154:	ab 8f       	std	Y+27, r26	; 0x1b
    1156:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1158:	69 8d       	ldd	r22, Y+25	; 0x19
    115a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    115c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    115e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	4a ef       	ldi	r20, 0xFA	; 250
    1166:	54 e4       	ldi	r21, 0x44	; 68
    1168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	8d 8b       	std	Y+21, r24	; 0x15
    1172:	9e 8b       	std	Y+22, r25	; 0x16
    1174:	af 8b       	std	Y+23, r26	; 0x17
    1176:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1178:	6d 89       	ldd	r22, Y+21	; 0x15
    117a:	7e 89       	ldd	r23, Y+22	; 0x16
    117c:	8f 89       	ldd	r24, Y+23	; 0x17
    117e:	98 8d       	ldd	r25, Y+24	; 0x18
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    118c:	88 23       	and	r24, r24
    118e:	2c f4       	brge	.+10     	; 0x119a <Send_State_to_GUI+0x6c>
		__ticks = 1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9c 8b       	std	Y+20, r25	; 0x14
    1196:	8b 8b       	std	Y+19, r24	; 0x13
    1198:	3f c0       	rjmp	.+126    	; 0x1218 <Send_State_to_GUI+0xea>
	else if (__tmp > 65535)
    119a:	6d 89       	ldd	r22, Y+21	; 0x15
    119c:	7e 89       	ldd	r23, Y+22	; 0x16
    119e:	8f 89       	ldd	r24, Y+23	; 0x17
    11a0:	98 8d       	ldd	r25, Y+24	; 0x18
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	3f ef       	ldi	r19, 0xFF	; 255
    11a6:	4f e7       	ldi	r20, 0x7F	; 127
    11a8:	57 e4       	ldi	r21, 0x47	; 71
    11aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ae:	18 16       	cp	r1, r24
    11b0:	4c f5       	brge	.+82     	; 0x1204 <Send_State_to_GUI+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b2:	69 8d       	ldd	r22, Y+25	; 0x19
    11b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e2       	ldi	r20, 0x20	; 32
    11c0:	51 e4       	ldi	r21, 0x41	; 65
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	9c 8b       	std	Y+20, r25	; 0x14
    11d8:	8b 8b       	std	Y+19, r24	; 0x13
    11da:	0f c0       	rjmp	.+30     	; 0x11fa <Send_State_to_GUI+0xcc>
    11dc:	88 ec       	ldi	r24, 0xC8	; 200
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9a 8b       	std	Y+18, r25	; 0x12
    11e2:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11e4:	89 89       	ldd	r24, Y+17	; 0x11
    11e6:	9a 89       	ldd	r25, Y+18	; 0x12
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <Send_State_to_GUI+0xba>
    11ec:	9a 8b       	std	Y+18, r25	; 0x12
    11ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f0:	8b 89       	ldd	r24, Y+19	; 0x13
    11f2:	9c 89       	ldd	r25, Y+20	; 0x14
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	9c 8b       	std	Y+20, r25	; 0x14
    11f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fa:	8b 89       	ldd	r24, Y+19	; 0x13
    11fc:	9c 89       	ldd	r25, Y+20	; 0x14
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	69 f7       	brne	.-38     	; 0x11dc <Send_State_to_GUI+0xae>
    1202:	14 c0       	rjmp	.+40     	; 0x122c <Send_State_to_GUI+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1204:	6d 89       	ldd	r22, Y+21	; 0x15
    1206:	7e 89       	ldd	r23, Y+22	; 0x16
    1208:	8f 89       	ldd	r24, Y+23	; 0x17
    120a:	98 8d       	ldd	r25, Y+24	; 0x18
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9c 8b       	std	Y+20, r25	; 0x14
    1216:	8b 8b       	std	Y+19, r24	; 0x13
    1218:	8b 89       	ldd	r24, Y+19	; 0x13
    121a:	9c 89       	ldd	r25, Y+20	; 0x14
    121c:	98 8b       	std	Y+16, r25	; 0x10
    121e:	8f 87       	std	Y+15, r24	; 0x0f
    1220:	8f 85       	ldd	r24, Y+15	; 0x0f
    1222:	98 89       	ldd	r25, Y+16	; 0x10
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <Send_State_to_GUI+0xf6>
    1228:	98 8b       	std	Y+16, r25	; 0x10
    122a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	switch(g_CurrentState)
    122c:	80 91 6d 02 	lds	r24, 0x026D
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	3e 8f       	std	Y+30, r19	; 0x1e
    1236:	2d 8f       	std	Y+29, r18	; 0x1d
    1238:	8d 8d       	ldd	r24, Y+29	; 0x1d
    123a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	91 05       	cpc	r25, r1
    1240:	71 f0       	breq	.+28     	; 0x125e <Send_State_to_GUI+0x130>
    1242:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1244:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1246:	22 30       	cpi	r18, 0x02	; 2
    1248:	31 05       	cpc	r19, r1
    124a:	71 f0       	breq	.+28     	; 0x1268 <Send_State_to_GUI+0x13a>
    124c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    124e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	71 f4       	brne	.+28     	; 0x1270 <Send_State_to_GUI+0x142>
	{
	case SAFE:
		UART_SendString("0Safe");
    1254:	89 e8       	ldi	r24, 0x89	; 137
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    125c:	09 c0       	rjmp	.+18     	; 0x1270 <Send_State_to_GUI+0x142>
		break;
	case WARNING:
		UART_SendString("0Warning");
    125e:	8f e8       	ldi	r24, 0x8F	; 143
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <Send_State_to_GUI+0x142>
		break;
	case DANGER:
		UART_SendString("0Danger");
    1268:	88 e9       	ldi	r24, 0x98	; 152
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a8 e4       	ldi	r26, 0x48	; 72
    1276:	b2 e4       	ldi	r27, 0x42	; 66
    1278:	8b 87       	std	Y+11, r24	; 0x0b
    127a:	9c 87       	std	Y+12, r25	; 0x0c
    127c:	ad 87       	std	Y+13, r26	; 0x0d
    127e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1280:	6b 85       	ldd	r22, Y+11	; 0x0b
    1282:	7c 85       	ldd	r23, Y+12	; 0x0c
    1284:	8d 85       	ldd	r24, Y+13	; 0x0d
    1286:	9e 85       	ldd	r25, Y+14	; 0x0e
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	4a ef       	ldi	r20, 0xFA	; 250
    128e:	54 e4       	ldi	r21, 0x44	; 68
    1290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	8f 83       	std	Y+7, r24	; 0x07
    129a:	98 87       	std	Y+8, r25	; 0x08
    129c:	a9 87       	std	Y+9, r26	; 0x09
    129e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12a0:	6f 81       	ldd	r22, Y+7	; 0x07
    12a2:	78 85       	ldd	r23, Y+8	; 0x08
    12a4:	89 85       	ldd	r24, Y+9	; 0x09
    12a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e8       	ldi	r20, 0x80	; 128
    12ae:	5f e3       	ldi	r21, 0x3F	; 63
    12b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    12b4:	88 23       	and	r24, r24
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <Send_State_to_GUI+0x194>
		__ticks = 1;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9e 83       	std	Y+6, r25	; 0x06
    12be:	8d 83       	std	Y+5, r24	; 0x05
    12c0:	3f c0       	rjmp	.+126    	; 0x1340 <Send_State_to_GUI+0x212>
	else if (__tmp > 65535)
    12c2:	6f 81       	ldd	r22, Y+7	; 0x07
    12c4:	78 85       	ldd	r23, Y+8	; 0x08
    12c6:	89 85       	ldd	r24, Y+9	; 0x09
    12c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	3f ef       	ldi	r19, 0xFF	; 255
    12ce:	4f e7       	ldi	r20, 0x7F	; 127
    12d0:	57 e4       	ldi	r21, 0x47	; 71
    12d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12d6:	18 16       	cp	r1, r24
    12d8:	4c f5       	brge	.+82     	; 0x132c <Send_State_to_GUI+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12da:	6b 85       	ldd	r22, Y+11	; 0x0b
    12dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12de:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e2       	ldi	r20, 0x20	; 32
    12e8:	51 e4       	ldi	r21, 0x41	; 65
    12ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
    1302:	0f c0       	rjmp	.+30     	; 0x1322 <Send_State_to_GUI+0x1f4>
    1304:	88 ec       	ldi	r24, 0xC8	; 200
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	9c 83       	std	Y+4, r25	; 0x04
    130a:	8b 83       	std	Y+3, r24	; 0x03
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	01 97       	sbiw	r24, 0x01	; 1
    1312:	f1 f7       	brne	.-4      	; 0x1310 <Send_State_to_GUI+0x1e2>
    1314:	9c 83       	std	Y+4, r25	; 0x04
    1316:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	69 f7       	brne	.-38     	; 0x1304 <Send_State_to_GUI+0x1d6>
    132a:	14 c0       	rjmp	.+40     	; 0x1354 <Send_State_to_GUI+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    132c:	6f 81       	ldd	r22, Y+7	; 0x07
    132e:	78 85       	ldd	r23, Y+8	; 0x08
    1330:	89 85       	ldd	r24, Y+9	; 0x09
    1332:	9a 85       	ldd	r25, Y+10	; 0x0a
    1334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	9e 83       	std	Y+6, r25	; 0x06
    133e:	8d 83       	std	Y+5, r24	; 0x05
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	9a 83       	std	Y+2, r25	; 0x02
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	9a 81       	ldd	r25, Y+2	; 0x02
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <Send_State_to_GUI+0x21e>
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	_delay_ms(50);
	UART_SendByte(';');
    1354:	8b e3       	ldi	r24, 0x3B	; 59
    1356:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
}
    135a:	6e 96       	adiw	r28, 0x1e	; 30
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <Send_Time_to_GUI>:
//======================================================================================================//
void Send_Time_to_GUI(void)
{
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	c6 54       	subi	r28, 0x46	; 70
    137a:	d0 40       	sbci	r29, 0x00	; 0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
	sprintf(Seconds_Buffer,"%d", g_Seconds);
    1386:	80 91 69 02 	lds	r24, 0x0269
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	00 d0       	rcall	.+0      	; 0x1390 <Send_Time_to_GUI+0x24>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <Send_Time_to_GUI+0x26>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <Send_Time_to_GUI+0x28>
    1394:	ed b7       	in	r30, 0x3d	; 61
    1396:	fe b7       	in	r31, 0x3e	; 62
    1398:	31 96       	adiw	r30, 0x01	; 1
    139a:	84 e7       	ldi	r24, 0x74	; 116
    139c:	92 e0       	ldi	r25, 0x02	; 2
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
    13a2:	80 ea       	ldi	r24, 0xA0	; 160
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	93 83       	std	Z+3, r25	; 0x03
    13a8:	82 83       	std	Z+2, r24	; 0x02
    13aa:	35 83       	std	Z+5, r19	; 0x05
    13ac:	24 83       	std	Z+4, r18	; 0x04
    13ae:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <sprintf>
    13b2:	8d b7       	in	r24, 0x3d	; 61
    13b4:	9e b7       	in	r25, 0x3e	; 62
    13b6:	06 96       	adiw	r24, 0x06	; 6
    13b8:	0f b6       	in	r0, 0x3f	; 63
    13ba:	f8 94       	cli
    13bc:	9e bf       	out	0x3e, r25	; 62
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	8d bf       	out	0x3d, r24	; 61
	sprintf(Miniutes_Buffer,"%d", g_Minutes);
    13c2:	80 91 05 02 	lds	r24, 0x0205
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <Send_Time_to_GUI+0x60>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <Send_Time_to_GUI+0x62>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <Send_Time_to_GUI+0x64>
    13d0:	ed b7       	in	r30, 0x3d	; 61
    13d2:	fe b7       	in	r31, 0x3e	; 62
    13d4:	31 96       	adiw	r30, 0x01	; 1
    13d6:	86 e7       	ldi	r24, 0x76	; 118
    13d8:	92 e0       	ldi	r25, 0x02	; 2
    13da:	91 83       	std	Z+1, r25	; 0x01
    13dc:	80 83       	st	Z, r24
    13de:	80 ea       	ldi	r24, 0xA0	; 160
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	93 83       	std	Z+3, r25	; 0x03
    13e4:	82 83       	std	Z+2, r24	; 0x02
    13e6:	35 83       	std	Z+5, r19	; 0x05
    13e8:	24 83       	std	Z+4, r18	; 0x04
    13ea:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <sprintf>
    13ee:	ed b7       	in	r30, 0x3d	; 61
    13f0:	fe b7       	in	r31, 0x3e	; 62
    13f2:	36 96       	adiw	r30, 0x06	; 6
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	fe bf       	out	0x3e, r31	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	ed bf       	out	0x3d, r30	; 61

	UART_SendString("*1");
    13fe:	83 ea       	ldi	r24, 0xA3	; 163
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    1406:	fe 01       	movw	r30, r28
    1408:	ed 5b       	subi	r30, 0xBD	; 189
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a0 e2       	ldi	r26, 0x20	; 32
    1412:	b1 e4       	ldi	r27, 0x41	; 65
    1414:	80 83       	st	Z, r24
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	a2 83       	std	Z+2, r26	; 0x02
    141a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141c:	8e 01       	movw	r16, r28
    141e:	01 5c       	subi	r16, 0xC1	; 193
    1420:	1f 4f       	sbci	r17, 0xFF	; 255
    1422:	fe 01       	movw	r30, r28
    1424:	ed 5b       	subi	r30, 0xBD	; 189
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	60 81       	ld	r22, Z
    142a:	71 81       	ldd	r23, Z+1	; 0x01
    142c:	82 81       	ldd	r24, Z+2	; 0x02
    142e:	93 81       	ldd	r25, Z+3	; 0x03
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	4a ef       	ldi	r20, 0xFA	; 250
    1436:	54 e4       	ldi	r21, 0x44	; 68
    1438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	f8 01       	movw	r30, r16
    1442:	80 83       	st	Z, r24
    1444:	91 83       	std	Z+1, r25	; 0x01
    1446:	a2 83       	std	Z+2, r26	; 0x02
    1448:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    144a:	fe 01       	movw	r30, r28
    144c:	ff 96       	adiw	r30, 0x3f	; 63
    144e:	60 81       	ld	r22, Z
    1450:	71 81       	ldd	r23, Z+1	; 0x01
    1452:	82 81       	ldd	r24, Z+2	; 0x02
    1454:	93 81       	ldd	r25, Z+3	; 0x03
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e8       	ldi	r20, 0x80	; 128
    145c:	5f e3       	ldi	r21, 0x3F	; 63
    145e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1462:	88 23       	and	r24, r24
    1464:	2c f4       	brge	.+10     	; 0x1470 <Send_Time_to_GUI+0x104>
		__ticks = 1;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9e af       	std	Y+62, r25	; 0x3e
    146c:	8d af       	std	Y+61, r24	; 0x3d
    146e:	46 c0       	rjmp	.+140    	; 0x14fc <Send_Time_to_GUI+0x190>
	else if (__tmp > 65535)
    1470:	fe 01       	movw	r30, r28
    1472:	ff 96       	adiw	r30, 0x3f	; 63
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	4f e7       	ldi	r20, 0x7F	; 127
    1482:	57 e4       	ldi	r21, 0x47	; 71
    1484:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1488:	18 16       	cp	r1, r24
    148a:	64 f5       	brge	.+88     	; 0x14e4 <Send_Time_to_GUI+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148c:	fe 01       	movw	r30, r28
    148e:	ed 5b       	subi	r30, 0xBD	; 189
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	60 81       	ld	r22, Z
    1494:	71 81       	ldd	r23, Z+1	; 0x01
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	93 81       	ldd	r25, Z+3	; 0x03
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e2       	ldi	r20, 0x20	; 32
    14a0:	51 e4       	ldi	r21, 0x41	; 65
    14a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	9e af       	std	Y+62, r25	; 0x3e
    14b8:	8d af       	std	Y+61, r24	; 0x3d
    14ba:	0f c0       	rjmp	.+30     	; 0x14da <Send_Time_to_GUI+0x16e>
    14bc:	88 ec       	ldi	r24, 0xC8	; 200
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	9c af       	std	Y+60, r25	; 0x3c
    14c2:	8b af       	std	Y+59, r24	; 0x3b
    14c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    14c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <Send_Time_to_GUI+0x15c>
    14cc:	9c af       	std	Y+60, r25	; 0x3c
    14ce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    14d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	9e af       	std	Y+62, r25	; 0x3e
    14d8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14da:	8d ad       	ldd	r24, Y+61	; 0x3d
    14dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	69 f7       	brne	.-38     	; 0x14bc <Send_Time_to_GUI+0x150>
    14e2:	16 c0       	rjmp	.+44     	; 0x1510 <Send_Time_to_GUI+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e4:	fe 01       	movw	r30, r28
    14e6:	ff 96       	adiw	r30, 0x3f	; 63
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	9e af       	std	Y+62, r25	; 0x3e
    14fa:	8d af       	std	Y+61, r24	; 0x3d
    14fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    14fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1500:	9a af       	std	Y+58, r25	; 0x3a
    1502:	89 af       	std	Y+57, r24	; 0x39
    1504:	89 ad       	ldd	r24, Y+57	; 0x39
    1506:	9a ad       	ldd	r25, Y+58	; 0x3a
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	f1 f7       	brne	.-4      	; 0x1508 <Send_Time_to_GUI+0x19c>
    150c:	9a af       	std	Y+58, r25	; 0x3a
    150e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	UART_SendString(Miniutes_Buffer);
    1510:	86 e7       	ldi	r24, 0x76	; 118
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a0 e2       	ldi	r26, 0x20	; 32
    151e:	b1 e4       	ldi	r27, 0x41	; 65
    1520:	8d ab       	std	Y+53, r24	; 0x35
    1522:	9e ab       	std	Y+54, r25	; 0x36
    1524:	af ab       	std	Y+55, r26	; 0x37
    1526:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1528:	6d a9       	ldd	r22, Y+53	; 0x35
    152a:	7e a9       	ldd	r23, Y+54	; 0x36
    152c:	8f a9       	ldd	r24, Y+55	; 0x37
    152e:	98 ad       	ldd	r25, Y+56	; 0x38
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	4a ef       	ldi	r20, 0xFA	; 250
    1536:	54 e4       	ldi	r21, 0x44	; 68
    1538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	89 ab       	std	Y+49, r24	; 0x31
    1542:	9a ab       	std	Y+50, r25	; 0x32
    1544:	ab ab       	std	Y+51, r26	; 0x33
    1546:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1548:	69 a9       	ldd	r22, Y+49	; 0x31
    154a:	7a a9       	ldd	r23, Y+50	; 0x32
    154c:	8b a9       	ldd	r24, Y+51	; 0x33
    154e:	9c a9       	ldd	r25, Y+52	; 0x34
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e8       	ldi	r20, 0x80	; 128
    1556:	5f e3       	ldi	r21, 0x3F	; 63
    1558:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    155c:	88 23       	and	r24, r24
    155e:	2c f4       	brge	.+10     	; 0x156a <Send_Time_to_GUI+0x1fe>
		__ticks = 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	98 ab       	std	Y+48, r25	; 0x30
    1566:	8f a7       	std	Y+47, r24	; 0x2f
    1568:	3f c0       	rjmp	.+126    	; 0x15e8 <Send_Time_to_GUI+0x27c>
	else if (__tmp > 65535)
    156a:	69 a9       	ldd	r22, Y+49	; 0x31
    156c:	7a a9       	ldd	r23, Y+50	; 0x32
    156e:	8b a9       	ldd	r24, Y+51	; 0x33
    1570:	9c a9       	ldd	r25, Y+52	; 0x34
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	3f ef       	ldi	r19, 0xFF	; 255
    1576:	4f e7       	ldi	r20, 0x7F	; 127
    1578:	57 e4       	ldi	r21, 0x47	; 71
    157a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    157e:	18 16       	cp	r1, r24
    1580:	4c f5       	brge	.+82     	; 0x15d4 <Send_Time_to_GUI+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1582:	6d a9       	ldd	r22, Y+53	; 0x35
    1584:	7e a9       	ldd	r23, Y+54	; 0x36
    1586:	8f a9       	ldd	r24, Y+55	; 0x37
    1588:	98 ad       	ldd	r25, Y+56	; 0x38
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e2       	ldi	r20, 0x20	; 32
    1590:	51 e4       	ldi	r21, 0x41	; 65
    1592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	bc 01       	movw	r22, r24
    159c:	cd 01       	movw	r24, r26
    159e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	98 ab       	std	Y+48, r25	; 0x30
    15a8:	8f a7       	std	Y+47, r24	; 0x2f
    15aa:	0f c0       	rjmp	.+30     	; 0x15ca <Send_Time_to_GUI+0x25e>
    15ac:	88 ec       	ldi	r24, 0xC8	; 200
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9e a7       	std	Y+46, r25	; 0x2e
    15b2:	8d a7       	std	Y+45, r24	; 0x2d
    15b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    15b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <Send_Time_to_GUI+0x24c>
    15bc:	9e a7       	std	Y+46, r25	; 0x2e
    15be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15c2:	98 a9       	ldd	r25, Y+48	; 0x30
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	98 ab       	std	Y+48, r25	; 0x30
    15c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    15cc:	98 a9       	ldd	r25, Y+48	; 0x30
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	69 f7       	brne	.-38     	; 0x15ac <Send_Time_to_GUI+0x240>
    15d2:	14 c0       	rjmp	.+40     	; 0x15fc <Send_Time_to_GUI+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d4:	69 a9       	ldd	r22, Y+49	; 0x31
    15d6:	7a a9       	ldd	r23, Y+50	; 0x32
    15d8:	8b a9       	ldd	r24, Y+51	; 0x33
    15da:	9c a9       	ldd	r25, Y+52	; 0x34
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	98 ab       	std	Y+48, r25	; 0x30
    15e6:	8f a7       	std	Y+47, r24	; 0x2f
    15e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ea:	98 a9       	ldd	r25, Y+48	; 0x30
    15ec:	9c a7       	std	Y+44, r25	; 0x2c
    15ee:	8b a7       	std	Y+43, r24	; 0x2b
    15f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    15f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <Send_Time_to_GUI+0x288>
    15f8:	9c a7       	std	Y+44, r25	; 0x2c
    15fa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	UART_SendString(":");
    15fc:	86 ea       	ldi	r24, 0xA6	; 166
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a0 e2       	ldi	r26, 0x20	; 32
    160a:	b1 e4       	ldi	r27, 0x41	; 65
    160c:	8f a3       	std	Y+39, r24	; 0x27
    160e:	98 a7       	std	Y+40, r25	; 0x28
    1610:	a9 a7       	std	Y+41, r26	; 0x29
    1612:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1614:	6f a1       	ldd	r22, Y+39	; 0x27
    1616:	78 a5       	ldd	r23, Y+40	; 0x28
    1618:	89 a5       	ldd	r24, Y+41	; 0x29
    161a:	9a a5       	ldd	r25, Y+42	; 0x2a
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	4a ef       	ldi	r20, 0xFA	; 250
    1622:	54 e4       	ldi	r21, 0x44	; 68
    1624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	8b a3       	std	Y+35, r24	; 0x23
    162e:	9c a3       	std	Y+36, r25	; 0x24
    1630:	ad a3       	std	Y+37, r26	; 0x25
    1632:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1634:	6b a1       	ldd	r22, Y+35	; 0x23
    1636:	7c a1       	ldd	r23, Y+36	; 0x24
    1638:	8d a1       	ldd	r24, Y+37	; 0x25
    163a:	9e a1       	ldd	r25, Y+38	; 0x26
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e8       	ldi	r20, 0x80	; 128
    1642:	5f e3       	ldi	r21, 0x3F	; 63
    1644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1648:	88 23       	and	r24, r24
    164a:	2c f4       	brge	.+10     	; 0x1656 <Send_Time_to_GUI+0x2ea>
		__ticks = 1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	9a a3       	std	Y+34, r25	; 0x22
    1652:	89 a3       	std	Y+33, r24	; 0x21
    1654:	3f c0       	rjmp	.+126    	; 0x16d4 <Send_Time_to_GUI+0x368>
	else if (__tmp > 65535)
    1656:	6b a1       	ldd	r22, Y+35	; 0x23
    1658:	7c a1       	ldd	r23, Y+36	; 0x24
    165a:	8d a1       	ldd	r24, Y+37	; 0x25
    165c:	9e a1       	ldd	r25, Y+38	; 0x26
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	4f e7       	ldi	r20, 0x7F	; 127
    1664:	57 e4       	ldi	r21, 0x47	; 71
    1666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    166a:	18 16       	cp	r1, r24
    166c:	4c f5       	brge	.+82     	; 0x16c0 <Send_Time_to_GUI+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166e:	6f a1       	ldd	r22, Y+39	; 0x27
    1670:	78 a5       	ldd	r23, Y+40	; 0x28
    1672:	89 a5       	ldd	r24, Y+41	; 0x29
    1674:	9a a5       	ldd	r25, Y+42	; 0x2a
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e2       	ldi	r20, 0x20	; 32
    167c:	51 e4       	ldi	r21, 0x41	; 65
    167e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	9a a3       	std	Y+34, r25	; 0x22
    1694:	89 a3       	std	Y+33, r24	; 0x21
    1696:	0f c0       	rjmp	.+30     	; 0x16b6 <Send_Time_to_GUI+0x34a>
    1698:	88 ec       	ldi	r24, 0xC8	; 200
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	98 a3       	std	Y+32, r25	; 0x20
    169e:	8f 8f       	std	Y+31, r24	; 0x1f
    16a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16a2:	98 a1       	ldd	r25, Y+32	; 0x20
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <Send_Time_to_GUI+0x338>
    16a8:	98 a3       	std	Y+32, r25	; 0x20
    16aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ac:	89 a1       	ldd	r24, Y+33	; 0x21
    16ae:	9a a1       	ldd	r25, Y+34	; 0x22
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	9a a3       	std	Y+34, r25	; 0x22
    16b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b6:	89 a1       	ldd	r24, Y+33	; 0x21
    16b8:	9a a1       	ldd	r25, Y+34	; 0x22
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	69 f7       	brne	.-38     	; 0x1698 <Send_Time_to_GUI+0x32c>
    16be:	14 c0       	rjmp	.+40     	; 0x16e8 <Send_Time_to_GUI+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c0:	6b a1       	ldd	r22, Y+35	; 0x23
    16c2:	7c a1       	ldd	r23, Y+36	; 0x24
    16c4:	8d a1       	ldd	r24, Y+37	; 0x25
    16c6:	9e a1       	ldd	r25, Y+38	; 0x26
    16c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	9a a3       	std	Y+34, r25	; 0x22
    16d2:	89 a3       	std	Y+33, r24	; 0x21
    16d4:	89 a1       	ldd	r24, Y+33	; 0x21
    16d6:	9a a1       	ldd	r25, Y+34	; 0x22
    16d8:	9e 8f       	std	Y+30, r25	; 0x1e
    16da:	8d 8f       	std	Y+29, r24	; 0x1d
    16dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <Send_Time_to_GUI+0x374>
    16e4:	9e 8f       	std	Y+30, r25	; 0x1e
    16e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	UART_SendString(Seconds_Buffer);
    16e8:	84 e7       	ldi	r24, 0x74	; 116
    16ea:	92 e0       	ldi	r25, 0x02	; 2
    16ec:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	a0 e2       	ldi	r26, 0x20	; 32
    16f6:	b1 e4       	ldi	r27, 0x41	; 65
    16f8:	89 8f       	std	Y+25, r24	; 0x19
    16fa:	9a 8f       	std	Y+26, r25	; 0x1a
    16fc:	ab 8f       	std	Y+27, r26	; 0x1b
    16fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1700:	69 8d       	ldd	r22, Y+25	; 0x19
    1702:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1704:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1706:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	4a ef       	ldi	r20, 0xFA	; 250
    170e:	54 e4       	ldi	r21, 0x44	; 68
    1710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	8d 8b       	std	Y+21, r24	; 0x15
    171a:	9e 8b       	std	Y+22, r25	; 0x16
    171c:	af 8b       	std	Y+23, r26	; 0x17
    171e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1720:	6d 89       	ldd	r22, Y+21	; 0x15
    1722:	7e 89       	ldd	r23, Y+22	; 0x16
    1724:	8f 89       	ldd	r24, Y+23	; 0x17
    1726:	98 8d       	ldd	r25, Y+24	; 0x18
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e8       	ldi	r20, 0x80	; 128
    172e:	5f e3       	ldi	r21, 0x3F	; 63
    1730:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1734:	88 23       	and	r24, r24
    1736:	2c f4       	brge	.+10     	; 0x1742 <Send_Time_to_GUI+0x3d6>
		__ticks = 1;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9c 8b       	std	Y+20, r25	; 0x14
    173e:	8b 8b       	std	Y+19, r24	; 0x13
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <Send_Time_to_GUI+0x454>
	else if (__tmp > 65535)
    1742:	6d 89       	ldd	r22, Y+21	; 0x15
    1744:	7e 89       	ldd	r23, Y+22	; 0x16
    1746:	8f 89       	ldd	r24, Y+23	; 0x17
    1748:	98 8d       	ldd	r25, Y+24	; 0x18
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	3f ef       	ldi	r19, 0xFF	; 255
    174e:	4f e7       	ldi	r20, 0x7F	; 127
    1750:	57 e4       	ldi	r21, 0x47	; 71
    1752:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1756:	18 16       	cp	r1, r24
    1758:	4c f5       	brge	.+82     	; 0x17ac <Send_Time_to_GUI+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    175a:	69 8d       	ldd	r22, Y+25	; 0x19
    175c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1760:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e2       	ldi	r20, 0x20	; 32
    1768:	51 e4       	ldi	r21, 0x41	; 65
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	bc 01       	movw	r22, r24
    1774:	cd 01       	movw	r24, r26
    1776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	9c 8b       	std	Y+20, r25	; 0x14
    1780:	8b 8b       	std	Y+19, r24	; 0x13
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <Send_Time_to_GUI+0x436>
    1784:	88 ec       	ldi	r24, 0xC8	; 200
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9a 8b       	std	Y+18, r25	; 0x12
    178a:	89 8b       	std	Y+17, r24	; 0x11
    178c:	89 89       	ldd	r24, Y+17	; 0x11
    178e:	9a 89       	ldd	r25, Y+18	; 0x12
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <Send_Time_to_GUI+0x424>
    1794:	9a 8b       	std	Y+18, r25	; 0x12
    1796:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1798:	8b 89       	ldd	r24, Y+19	; 0x13
    179a:	9c 89       	ldd	r25, Y+20	; 0x14
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	9c 8b       	std	Y+20, r25	; 0x14
    17a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a2:	8b 89       	ldd	r24, Y+19	; 0x13
    17a4:	9c 89       	ldd	r25, Y+20	; 0x14
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	69 f7       	brne	.-38     	; 0x1784 <Send_Time_to_GUI+0x418>
    17aa:	14 c0       	rjmp	.+40     	; 0x17d4 <Send_Time_to_GUI+0x468>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ac:	6d 89       	ldd	r22, Y+21	; 0x15
    17ae:	7e 89       	ldd	r23, Y+22	; 0x16
    17b0:	8f 89       	ldd	r24, Y+23	; 0x17
    17b2:	98 8d       	ldd	r25, Y+24	; 0x18
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9c 8b       	std	Y+20, r25	; 0x14
    17be:	8b 8b       	std	Y+19, r24	; 0x13
    17c0:	8b 89       	ldd	r24, Y+19	; 0x13
    17c2:	9c 89       	ldd	r25, Y+20	; 0x14
    17c4:	98 8b       	std	Y+16, r25	; 0x10
    17c6:	8f 87       	std	Y+15, r24	; 0x0f
    17c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ca:	98 89       	ldd	r25, Y+16	; 0x10
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	f1 f7       	brne	.-4      	; 0x17cc <Send_Time_to_GUI+0x460>
    17d0:	98 8b       	std	Y+16, r25	; 0x10
    17d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	UART_SendByte(';');
    17d4:	8b e3       	ldi	r24, 0x3B	; 59
    17d6:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a0 e2       	ldi	r26, 0x20	; 32
    17e0:	b1 e4       	ldi	r27, 0x41	; 65
    17e2:	8b 87       	std	Y+11, r24	; 0x0b
    17e4:	9c 87       	std	Y+12, r25	; 0x0c
    17e6:	ad 87       	std	Y+13, r26	; 0x0d
    17e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a ef       	ldi	r20, 0xFA	; 250
    17f8:	54 e4       	ldi	r21, 0x44	; 68
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8f 83       	std	Y+7, r24	; 0x07
    1804:	98 87       	std	Y+8, r25	; 0x08
    1806:	a9 87       	std	Y+9, r26	; 0x09
    1808:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    181e:	88 23       	and	r24, r24
    1820:	2c f4       	brge	.+10     	; 0x182c <Send_Time_to_GUI+0x4c0>
		__ticks = 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
    182a:	3f c0       	rjmp	.+126    	; 0x18aa <Send_Time_to_GUI+0x53e>
	else if (__tmp > 65535)
    182c:	6f 81       	ldd	r22, Y+7	; 0x07
    182e:	78 85       	ldd	r23, Y+8	; 0x08
    1830:	89 85       	ldd	r24, Y+9	; 0x09
    1832:	9a 85       	ldd	r25, Y+10	; 0x0a
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	3f ef       	ldi	r19, 0xFF	; 255
    1838:	4f e7       	ldi	r20, 0x7F	; 127
    183a:	57 e4       	ldi	r21, 0x47	; 71
    183c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1840:	18 16       	cp	r1, r24
    1842:	4c f5       	brge	.+82     	; 0x1896 <Send_Time_to_GUI+0x52a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1844:	6b 85       	ldd	r22, Y+11	; 0x0b
    1846:	7c 85       	ldd	r23, Y+12	; 0x0c
    1848:	8d 85       	ldd	r24, Y+13	; 0x0d
    184a:	9e 85       	ldd	r25, Y+14	; 0x0e
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e2       	ldi	r20, 0x20	; 32
    1852:	51 e4       	ldi	r21, 0x41	; 65
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9e 83       	std	Y+6, r25	; 0x06
    186a:	8d 83       	std	Y+5, r24	; 0x05
    186c:	0f c0       	rjmp	.+30     	; 0x188c <Send_Time_to_GUI+0x520>
    186e:	88 ec       	ldi	r24, 0xC8	; 200
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9c 83       	std	Y+4, r25	; 0x04
    1874:	8b 83       	std	Y+3, r24	; 0x03
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <Send_Time_to_GUI+0x50e>
    187e:	9c 83       	std	Y+4, r25	; 0x04
    1880:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	9e 81       	ldd	r25, Y+6	; 0x06
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188c:	8d 81       	ldd	r24, Y+5	; 0x05
    188e:	9e 81       	ldd	r25, Y+6	; 0x06
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	69 f7       	brne	.-38     	; 0x186e <Send_Time_to_GUI+0x502>
    1894:	14 c0       	rjmp	.+40     	; 0x18be <Send_Time_to_GUI+0x552>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1896:	6f 81       	ldd	r22, Y+7	; 0x07
    1898:	78 85       	ldd	r23, Y+8	; 0x08
    189a:	89 85       	ldd	r24, Y+9	; 0x09
    189c:	9a 85       	ldd	r25, Y+10	; 0x0a
    189e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	8d 81       	ldd	r24, Y+5	; 0x05
    18ac:	9e 81       	ldd	r25, Y+6	; 0x06
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	9a 81       	ldd	r25, Y+2	; 0x02
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <Send_Time_to_GUI+0x54a>
    18ba:	9a 83       	std	Y+2, r25	; 0x02
    18bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    18be:	ca 5b       	subi	r28, 0xBA	; 186
    18c0:	df 4f       	sbci	r29, 0xFF	; 255
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	08 95       	ret

000018d6 <Send_Gas_to_GUI>:
//======================================================================================================//
void Send_Gas_to_GUI(void)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	e8 97       	sbiw	r28, 0x38	; 56
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
	sprintf(Gas_Buffer,"%d", g_GassPer);
    18ea:	80 91 6a 02 	lds	r24, 0x026A
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <Send_Gas_to_GUI+0x1e>
    18f4:	00 d0       	rcall	.+0      	; 0x18f6 <Send_Gas_to_GUI+0x20>
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <Send_Gas_to_GUI+0x22>
    18f8:	ed b7       	in	r30, 0x3d	; 61
    18fa:	fe b7       	in	r31, 0x3e	; 62
    18fc:	31 96       	adiw	r30, 0x01	; 1
    18fe:	87 e7       	ldi	r24, 0x77	; 119
    1900:	92 e0       	ldi	r25, 0x02	; 2
    1902:	91 83       	std	Z+1, r25	; 0x01
    1904:	80 83       	st	Z, r24
    1906:	80 ea       	ldi	r24, 0xA0	; 160
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	93 83       	std	Z+3, r25	; 0x03
    190c:	82 83       	std	Z+2, r24	; 0x02
    190e:	35 83       	std	Z+5, r19	; 0x05
    1910:	24 83       	std	Z+4, r18	; 0x04
    1912:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <sprintf>
    1916:	8d b7       	in	r24, 0x3d	; 61
    1918:	9e b7       	in	r25, 0x3e	; 62
    191a:	06 96       	adiw	r24, 0x06	; 6
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	9e bf       	out	0x3e, r25	; 62
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	8d bf       	out	0x3d, r24	; 61

	UART_SendString("*2");
    1926:	88 ea       	ldi	r24, 0xA8	; 168
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a8 e4       	ldi	r26, 0x48	; 72
    1934:	b2 e4       	ldi	r27, 0x42	; 66
    1936:	8d ab       	std	Y+53, r24	; 0x35
    1938:	9e ab       	std	Y+54, r25	; 0x36
    193a:	af ab       	std	Y+55, r26	; 0x37
    193c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193e:	6d a9       	ldd	r22, Y+53	; 0x35
    1940:	7e a9       	ldd	r23, Y+54	; 0x36
    1942:	8f a9       	ldd	r24, Y+55	; 0x37
    1944:	98 ad       	ldd	r25, Y+56	; 0x38
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	4a ef       	ldi	r20, 0xFA	; 250
    194c:	54 e4       	ldi	r21, 0x44	; 68
    194e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	89 ab       	std	Y+49, r24	; 0x31
    1958:	9a ab       	std	Y+50, r25	; 0x32
    195a:	ab ab       	std	Y+51, r26	; 0x33
    195c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    195e:	69 a9       	ldd	r22, Y+49	; 0x31
    1960:	7a a9       	ldd	r23, Y+50	; 0x32
    1962:	8b a9       	ldd	r24, Y+51	; 0x33
    1964:	9c a9       	ldd	r25, Y+52	; 0x34
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1972:	88 23       	and	r24, r24
    1974:	2c f4       	brge	.+10     	; 0x1980 <Send_Gas_to_GUI+0xaa>
		__ticks = 1;
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	98 ab       	std	Y+48, r25	; 0x30
    197c:	8f a7       	std	Y+47, r24	; 0x2f
    197e:	3f c0       	rjmp	.+126    	; 0x19fe <Send_Gas_to_GUI+0x128>
	else if (__tmp > 65535)
    1980:	69 a9       	ldd	r22, Y+49	; 0x31
    1982:	7a a9       	ldd	r23, Y+50	; 0x32
    1984:	8b a9       	ldd	r24, Y+51	; 0x33
    1986:	9c a9       	ldd	r25, Y+52	; 0x34
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	3f ef       	ldi	r19, 0xFF	; 255
    198c:	4f e7       	ldi	r20, 0x7F	; 127
    198e:	57 e4       	ldi	r21, 0x47	; 71
    1990:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1994:	18 16       	cp	r1, r24
    1996:	4c f5       	brge	.+82     	; 0x19ea <Send_Gas_to_GUI+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1998:	6d a9       	ldd	r22, Y+53	; 0x35
    199a:	7e a9       	ldd	r23, Y+54	; 0x36
    199c:	8f a9       	ldd	r24, Y+55	; 0x37
    199e:	98 ad       	ldd	r25, Y+56	; 0x38
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e2       	ldi	r20, 0x20	; 32
    19a6:	51 e4       	ldi	r21, 0x41	; 65
    19a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	bc 01       	movw	r22, r24
    19b2:	cd 01       	movw	r24, r26
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	98 ab       	std	Y+48, r25	; 0x30
    19be:	8f a7       	std	Y+47, r24	; 0x2f
    19c0:	0f c0       	rjmp	.+30     	; 0x19e0 <Send_Gas_to_GUI+0x10a>
    19c2:	88 ec       	ldi	r24, 0xC8	; 200
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	9e a7       	std	Y+46, r25	; 0x2e
    19c8:	8d a7       	std	Y+45, r24	; 0x2d
    19ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    19cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <Send_Gas_to_GUI+0xf8>
    19d2:	9e a7       	std	Y+46, r25	; 0x2e
    19d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d8:	98 a9       	ldd	r25, Y+48	; 0x30
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	98 ab       	std	Y+48, r25	; 0x30
    19de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e2:	98 a9       	ldd	r25, Y+48	; 0x30
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	69 f7       	brne	.-38     	; 0x19c2 <Send_Gas_to_GUI+0xec>
    19e8:	14 c0       	rjmp	.+40     	; 0x1a12 <Send_Gas_to_GUI+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ea:	69 a9       	ldd	r22, Y+49	; 0x31
    19ec:	7a a9       	ldd	r23, Y+50	; 0x32
    19ee:	8b a9       	ldd	r24, Y+51	; 0x33
    19f0:	9c a9       	ldd	r25, Y+52	; 0x34
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	98 ab       	std	Y+48, r25	; 0x30
    19fc:	8f a7       	std	Y+47, r24	; 0x2f
    19fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a00:	98 a9       	ldd	r25, Y+48	; 0x30
    1a02:	9c a7       	std	Y+44, r25	; 0x2c
    1a04:	8b a7       	std	Y+43, r24	; 0x2b
    1a06:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a08:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <Send_Gas_to_GUI+0x134>
    1a0e:	9c a7       	std	Y+44, r25	; 0x2c
    1a10:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	UART_SendString(Gas_Buffer);
    1a12:	87 e7       	ldi	r24, 0x77	; 119
    1a14:	92 e0       	ldi	r25, 0x02	; 2
    1a16:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	a0 e2       	ldi	r26, 0x20	; 32
    1a20:	b1 e4       	ldi	r27, 0x41	; 65
    1a22:	8f a3       	std	Y+39, r24	; 0x27
    1a24:	98 a7       	std	Y+40, r25	; 0x28
    1a26:	a9 a7       	std	Y+41, r26	; 0x29
    1a28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2a:	6f a1       	ldd	r22, Y+39	; 0x27
    1a2c:	78 a5       	ldd	r23, Y+40	; 0x28
    1a2e:	89 a5       	ldd	r24, Y+41	; 0x29
    1a30:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	4a ef       	ldi	r20, 0xFA	; 250
    1a38:	54 e4       	ldi	r21, 0x44	; 68
    1a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	8b a3       	std	Y+35, r24	; 0x23
    1a44:	9c a3       	std	Y+36, r25	; 0x24
    1a46:	ad a3       	std	Y+37, r26	; 0x25
    1a48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a50:	9e a1       	ldd	r25, Y+38	; 0x26
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	2c f4       	brge	.+10     	; 0x1a6c <Send_Gas_to_GUI+0x196>
		__ticks = 1;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	9a a3       	std	Y+34, r25	; 0x22
    1a68:	89 a3       	std	Y+33, r24	; 0x21
    1a6a:	3f c0       	rjmp	.+126    	; 0x1aea <Send_Gas_to_GUI+0x214>
	else if (__tmp > 65535)
    1a6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a70:	8d a1       	ldd	r24, Y+37	; 0x25
    1a72:	9e a1       	ldd	r25, Y+38	; 0x26
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	3f ef       	ldi	r19, 0xFF	; 255
    1a78:	4f e7       	ldi	r20, 0x7F	; 127
    1a7a:	57 e4       	ldi	r21, 0x47	; 71
    1a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a80:	18 16       	cp	r1, r24
    1a82:	4c f5       	brge	.+82     	; 0x1ad6 <Send_Gas_to_GUI+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a84:	6f a1       	ldd	r22, Y+39	; 0x27
    1a86:	78 a5       	ldd	r23, Y+40	; 0x28
    1a88:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e2       	ldi	r20, 0x20	; 32
    1a92:	51 e4       	ldi	r21, 0x41	; 65
    1a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	bc 01       	movw	r22, r24
    1a9e:	cd 01       	movw	r24, r26
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9a a3       	std	Y+34, r25	; 0x22
    1aaa:	89 a3       	std	Y+33, r24	; 0x21
    1aac:	0f c0       	rjmp	.+30     	; 0x1acc <Send_Gas_to_GUI+0x1f6>
    1aae:	88 ec       	ldi	r24, 0xC8	; 200
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	98 a3       	std	Y+32, r25	; 0x20
    1ab4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ab6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ab8:	98 a1       	ldd	r25, Y+32	; 0x20
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <Send_Gas_to_GUI+0x1e4>
    1abe:	98 a3       	std	Y+32, r25	; 0x20
    1ac0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac6:	01 97       	sbiw	r24, 0x01	; 1
    1ac8:	9a a3       	std	Y+34, r25	; 0x22
    1aca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1acc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ace:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	69 f7       	brne	.-38     	; 0x1aae <Send_Gas_to_GUI+0x1d8>
    1ad4:	14 c0       	rjmp	.+40     	; 0x1afe <Send_Gas_to_GUI+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad8:	7c a1       	ldd	r23, Y+36	; 0x24
    1ada:	8d a1       	ldd	r24, Y+37	; 0x25
    1adc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	9a a3       	std	Y+34, r25	; 0x22
    1ae8:	89 a3       	std	Y+33, r24	; 0x21
    1aea:	89 a1       	ldd	r24, Y+33	; 0x21
    1aec:	9a a1       	ldd	r25, Y+34	; 0x22
    1aee:	9e 8f       	std	Y+30, r25	; 0x1e
    1af0:	8d 8f       	std	Y+29, r24	; 0x1d
    1af2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1af6:	01 97       	sbiw	r24, 0x01	; 1
    1af8:	f1 f7       	brne	.-4      	; 0x1af6 <Send_Gas_to_GUI+0x220>
    1afa:	9e 8f       	std	Y+30, r25	; 0x1e
    1afc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	UART_SendByte('%');
    1afe:	85 e2       	ldi	r24, 0x25	; 37
    1b00:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	a8 e4       	ldi	r26, 0x48	; 72
    1b0a:	b2 e4       	ldi	r27, 0x42	; 66
    1b0c:	89 8f       	std	Y+25, r24	; 0x19
    1b0e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b10:	ab 8f       	std	Y+27, r26	; 0x1b
    1b12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b14:	69 8d       	ldd	r22, Y+25	; 0x19
    1b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	4a ef       	ldi	r20, 0xFA	; 250
    1b22:	54 e4       	ldi	r21, 0x44	; 68
    1b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	8d 8b       	std	Y+21, r24	; 0x15
    1b2e:	9e 8b       	std	Y+22, r25	; 0x16
    1b30:	af 8b       	std	Y+23, r26	; 0x17
    1b32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b34:	6d 89       	ldd	r22, Y+21	; 0x15
    1b36:	7e 89       	ldd	r23, Y+22	; 0x16
    1b38:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <Send_Gas_to_GUI+0x280>
		__ticks = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9c 8b       	std	Y+20, r25	; 0x14
    1b52:	8b 8b       	std	Y+19, r24	; 0x13
    1b54:	3f c0       	rjmp	.+126    	; 0x1bd4 <Send_Gas_to_GUI+0x2fe>
	else if (__tmp > 65535)
    1b56:	6d 89       	ldd	r22, Y+21	; 0x15
    1b58:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	3f ef       	ldi	r19, 0xFF	; 255
    1b62:	4f e7       	ldi	r20, 0x7F	; 127
    1b64:	57 e4       	ldi	r21, 0x47	; 71
    1b66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6a:	18 16       	cp	r1, r24
    1b6c:	4c f5       	brge	.+82     	; 0x1bc0 <Send_Gas_to_GUI+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e2       	ldi	r20, 0x20	; 32
    1b7c:	51 e4       	ldi	r21, 0x41	; 65
    1b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	9c 8b       	std	Y+20, r25	; 0x14
    1b94:	8b 8b       	std	Y+19, r24	; 0x13
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <Send_Gas_to_GUI+0x2e0>
    1b98:	88 ec       	ldi	r24, 0xC8	; 200
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9a 8b       	std	Y+18, r25	; 0x12
    1b9e:	89 8b       	std	Y+17, r24	; 0x11
    1ba0:	89 89       	ldd	r24, Y+17	; 0x11
    1ba2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <Send_Gas_to_GUI+0x2ce>
    1ba8:	9a 8b       	std	Y+18, r25	; 0x12
    1baa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bac:	8b 89       	ldd	r24, Y+19	; 0x13
    1bae:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	9c 8b       	std	Y+20, r25	; 0x14
    1bb4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	69 f7       	brne	.-38     	; 0x1b98 <Send_Gas_to_GUI+0x2c2>
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <Send_Gas_to_GUI+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9c 8b       	std	Y+20, r25	; 0x14
    1bd2:	8b 8b       	std	Y+19, r24	; 0x13
    1bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd8:	98 8b       	std	Y+16, r25	; 0x10
    1bda:	8f 87       	std	Y+15, r24	; 0x0f
    1bdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bde:	98 89       	ldd	r25, Y+16	; 0x10
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <Send_Gas_to_GUI+0x30a>
    1be4:	98 8b       	std	Y+16, r25	; 0x10
    1be6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	UART_SendByte(';');
    1be8:	8b e3       	ldi	r24, 0x3B	; 59
    1bea:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a8 e4       	ldi	r26, 0x48	; 72
    1bf4:	b2 e4       	ldi	r27, 0x42	; 66
    1bf6:	8b 87       	std	Y+11, r24	; 0x0b
    1bf8:	9c 87       	std	Y+12, r25	; 0x0c
    1bfa:	ad 87       	std	Y+13, r26	; 0x0d
    1bfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a ef       	ldi	r20, 0xFA	; 250
    1c0c:	54 e4       	ldi	r21, 0x44	; 68
    1c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	8f 83       	std	Y+7, r24	; 0x07
    1c18:	98 87       	std	Y+8, r25	; 0x08
    1c1a:	a9 87       	std	Y+9, r26	; 0x09
    1c1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c20:	78 85       	ldd	r23, Y+8	; 0x08
    1c22:	89 85       	ldd	r24, Y+9	; 0x09
    1c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <Send_Gas_to_GUI+0x36a>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9e 83       	std	Y+6, r25	; 0x06
    1c3c:	8d 83       	std	Y+5, r24	; 0x05
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <Send_Gas_to_GUI+0x3e8>
	else if (__tmp > 65535)
    1c40:	6f 81       	ldd	r22, Y+7	; 0x07
    1c42:	78 85       	ldd	r23, Y+8	; 0x08
    1c44:	89 85       	ldd	r24, Y+9	; 0x09
    1c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <Send_Gas_to_GUI+0x3d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <Send_Gas_to_GUI+0x3ca>
    1c82:	88 ec       	ldi	r24, 0xC8	; 200
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c 83       	std	Y+4, r25	; 0x04
    1c88:	8b 83       	std	Y+3, r24	; 0x03
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <Send_Gas_to_GUI+0x3b8>
    1c92:	9c 83       	std	Y+4, r25	; 0x04
    1c94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	8d 81       	ldd	r24, Y+5	; 0x05
    1c98:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <Send_Gas_to_GUI+0x3ac>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <Send_Gas_to_GUI+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	6f 81       	ldd	r22, Y+7	; 0x07
    1cac:	78 85       	ldd	r23, Y+8	; 0x08
    1cae:	89 85       	ldd	r24, Y+9	; 0x09
    1cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <Send_Gas_to_GUI+0x3f4>
    1cce:	9a 83       	std	Y+2, r25	; 0x02
    1cd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    1cd2:	e8 96       	adiw	r28, 0x38	; 56
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	cf 91       	pop	r28
    1ce0:	df 91       	pop	r29
    1ce2:	08 95       	ret

00001ce4 <Received_From_GUI>:
//======================================================================================================//
void Received_From_GUI(void)
{
    1ce4:	0f 93       	push	r16
    1ce6:	1f 93       	push	r17
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	c3 57       	subi	r28, 0x73	; 115
    1cf2:	d0 40       	sbci	r29, 0x00	; 0
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
	uint8 received_byte = 0;
    1cfe:	fe 01       	movw	r30, r28
    1d00:	ef 58       	subi	r30, 0x8F	; 143
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	10 82       	st	Z, r1
	UART_Receive_NoBlock(&received_byte);
    1d06:	ce 01       	movw	r24, r28
    1d08:	8f 58       	subi	r24, 0x8F	; 143
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <UART_Receive_NoBlock>

	switch(received_byte)
    1d10:	fe 01       	movw	r30, r28
    1d12:	ef 58       	subi	r30, 0x8F	; 143
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	e4 96       	adiw	r28, 0x34	; 52
    1d1e:	3f af       	std	Y+63, r19	; 0x3f
    1d20:	2e af       	std	Y+62, r18	; 0x3e
    1d22:	e4 97       	sbiw	r28, 0x34	; 52
    1d24:	e4 96       	adiw	r28, 0x34	; 52
    1d26:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d28:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d2a:	e4 97       	sbiw	r28, 0x34	; 52
    1d2c:	81 33       	cpi	r24, 0x31	; 49
    1d2e:	91 05       	cpc	r25, r1
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <Received_From_GUI+0x50>
    1d32:	93 c1       	rjmp	.+806    	; 0x205a <Received_From_GUI+0x376>
    1d34:	e4 96       	adiw	r28, 0x34	; 52
    1d36:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d38:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d3a:	e4 97       	sbiw	r28, 0x34	; 52
    1d3c:	e2 33       	cpi	r30, 0x32	; 50
    1d3e:	f1 05       	cpc	r31, r1
    1d40:	44 f4       	brge	.+16     	; 0x1d52 <Received_From_GUI+0x6e>
    1d42:	e4 96       	adiw	r28, 0x34	; 52
    1d44:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d46:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d48:	e4 97       	sbiw	r28, 0x34	; 52
    1d4a:	20 33       	cpi	r18, 0x30	; 48
    1d4c:	31 05       	cpc	r19, r1
    1d4e:	91 f0       	breq	.+36     	; 0x1d74 <Received_From_GUI+0x90>
    1d50:	aa c4       	rjmp	.+2388   	; 0x26a6 <Received_From_GUI+0x9c2>
    1d52:	e4 96       	adiw	r28, 0x34	; 52
    1d54:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d56:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d58:	e4 97       	sbiw	r28, 0x34	; 52
    1d5a:	82 33       	cpi	r24, 0x32	; 50
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <Received_From_GUI+0x7e>
    1d60:	c1 c2       	rjmp	.+1410   	; 0x22e4 <Received_From_GUI+0x600>
    1d62:	e4 96       	adiw	r28, 0x34	; 52
    1d64:	ee ad       	ldd	r30, Y+62	; 0x3e
    1d66:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d68:	e4 97       	sbiw	r28, 0x34	; 52
    1d6a:	e3 33       	cpi	r30, 0x33	; 51
    1d6c:	f1 05       	cpc	r31, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <Received_From_GUI+0x8e>
    1d70:	aa c3       	rjmp	.+1876   	; 0x24c6 <Received_From_GUI+0x7e2>
    1d72:	99 c4       	rjmp	.+2354   	; 0x26a6 <Received_From_GUI+0x9c2>
	{
		case '0': //Open door
			    open_door();
    1d74:	0e 94 29 08 	call	0x1052	; 0x1052 <open_door>
				UART_SendByte('*');
    1d78:	8a e2       	ldi	r24, 0x2A	; 42
    1d7a:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e3 59       	subi	r30, 0x93	; 147
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a8 e4       	ldi	r26, 0x48	; 72
    1d8a:	b2 e4       	ldi	r27, 0x42	; 66
    1d8c:	80 83       	st	Z, r24
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	a2 83       	std	Z+2, r26	; 0x02
    1d92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d94:	8e 01       	movw	r16, r28
    1d96:	07 59       	subi	r16, 0x97	; 151
    1d98:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	e3 59       	subi	r30, 0x93	; 147
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	60 81       	ld	r22, Z
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	4a ef       	ldi	r20, 0xFA	; 250
    1dae:	54 e4       	ldi	r21, 0x44	; 68
    1db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	f8 01       	movw	r30, r16
    1dba:	80 83       	st	Z, r24
    1dbc:	91 83       	std	Z+1, r25	; 0x01
    1dbe:	a2 83       	std	Z+2, r26	; 0x02
    1dc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e7 59       	subi	r30, 0x97	; 151
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	60 81       	ld	r22, Z
    1dca:	71 81       	ldd	r23, Z+1	; 0x01
    1dcc:	82 81       	ldd	r24, Z+2	; 0x02
    1dce:	93 81       	ldd	r25, Z+3	; 0x03
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e8       	ldi	r20, 0x80	; 128
    1dd6:	5f e3       	ldi	r21, 0x3F	; 63
    1dd8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	44 f4       	brge	.+16     	; 0x1df0 <Received_From_GUI+0x10c>
		__ticks = 1;
    1de0:	fe 01       	movw	r30, r28
    1de2:	e9 59       	subi	r30, 0x99	; 153
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	80 83       	st	Z, r24
    1dee:	64 c0       	rjmp	.+200    	; 0x1eb8 <Received_From_GUI+0x1d4>
	else if (__tmp > 65535)
    1df0:	fe 01       	movw	r30, r28
    1df2:	e7 59       	subi	r30, 0x97	; 151
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	0c f0       	brlt	.+2      	; 0x1e10 <Received_From_GUI+0x12c>
    1e0e:	43 c0       	rjmp	.+134    	; 0x1e96 <Received_From_GUI+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e10:	fe 01       	movw	r30, r28
    1e12:	e3 59       	subi	r30, 0x93	; 147
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	60 81       	ld	r22, Z
    1e18:	71 81       	ldd	r23, Z+1	; 0x01
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	93 81       	ldd	r25, Z+3	; 0x03
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	8e 01       	movw	r16, r28
    1e30:	09 59       	subi	r16, 0x99	; 153
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	f8 01       	movw	r30, r16
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	80 83       	st	Z, r24
    1e46:	1f c0       	rjmp	.+62     	; 0x1e86 <Received_From_GUI+0x1a2>
    1e48:	fe 01       	movw	r30, r28
    1e4a:	eb 59       	subi	r30, 0x9B	; 155
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	88 ec       	ldi	r24, 0xC8	; 200
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	91 83       	std	Z+1, r25	; 0x01
    1e54:	80 83       	st	Z, r24
    1e56:	fe 01       	movw	r30, r28
    1e58:	eb 59       	subi	r30, 0x9B	; 155
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	80 81       	ld	r24, Z
    1e5e:	91 81       	ldd	r25, Z+1	; 0x01
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <Received_From_GUI+0x17c>
    1e64:	fe 01       	movw	r30, r28
    1e66:	eb 59       	subi	r30, 0x9B	; 155
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6e:	de 01       	movw	r26, r28
    1e70:	a9 59       	subi	r26, 0x99	; 153
    1e72:	bf 4f       	sbci	r27, 0xFF	; 255
    1e74:	fe 01       	movw	r30, r28
    1e76:	e9 59       	subi	r30, 0x99	; 153
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	11 96       	adiw	r26, 0x01	; 1
    1e82:	9c 93       	st	X, r25
    1e84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e86:	fe 01       	movw	r30, r28
    1e88:	e9 59       	subi	r30, 0x99	; 153
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	80 81       	ld	r24, Z
    1e8e:	91 81       	ldd	r25, Z+1	; 0x01
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	d1 f6       	brne	.-76     	; 0x1e48 <Received_From_GUI+0x164>
    1e94:	27 c0       	rjmp	.+78     	; 0x1ee4 <Received_From_GUI+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e96:	8e 01       	movw	r16, r28
    1e98:	09 59       	subi	r16, 0x99	; 153
    1e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	e7 59       	subi	r30, 0x97	; 151
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	60 81       	ld	r22, Z
    1ea4:	71 81       	ldd	r23, Z+1	; 0x01
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	91 83       	std	Z+1, r25	; 0x01
    1eb6:	80 83       	st	Z, r24
    1eb8:	de 01       	movw	r26, r28
    1eba:	ad 59       	subi	r26, 0x9D	; 157
    1ebc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e9 59       	subi	r30, 0x99	; 153
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	91 81       	ldd	r25, Z+1	; 0x01
    1ec8:	8d 93       	st	X+, r24
    1eca:	9c 93       	st	X, r25
    1ecc:	fe 01       	movw	r30, r28
    1ece:	ed 59       	subi	r30, 0x9D	; 157
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	80 81       	ld	r24, Z
    1ed4:	91 81       	ldd	r25, Z+1	; 0x01
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <Received_From_GUI+0x1f2>
    1eda:	fe 01       	movw	r30, r28
    1edc:	ed 59       	subi	r30, 0x9D	; 157
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	80 83       	st	Z, r24
				_delay_ms(50);
				UART_SendString("Door Opened");
    1ee4:	8b ea       	ldi	r24, 0xAB	; 171
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    1eec:	fe 01       	movw	r30, r28
    1eee:	e1 5a       	subi	r30, 0xA1	; 161
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	a8 e4       	ldi	r26, 0x48	; 72
    1ef8:	b2 e4       	ldi	r27, 0x42	; 66
    1efa:	80 83       	st	Z, r24
    1efc:	91 83       	std	Z+1, r25	; 0x01
    1efe:	a2 83       	std	Z+2, r26	; 0x02
    1f00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f02:	8e 01       	movw	r16, r28
    1f04:	05 5a       	subi	r16, 0xA5	; 165
    1f06:	1f 4f       	sbci	r17, 0xFF	; 255
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e1 5a       	subi	r30, 0xA1	; 161
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	60 81       	ld	r22, Z
    1f10:	71 81       	ldd	r23, Z+1	; 0x01
    1f12:	82 81       	ldd	r24, Z+2	; 0x02
    1f14:	93 81       	ldd	r25, Z+3	; 0x03
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	4a ef       	ldi	r20, 0xFA	; 250
    1f1c:	54 e4       	ldi	r21, 0x44	; 68
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	f8 01       	movw	r30, r16
    1f28:	80 83       	st	Z, r24
    1f2a:	91 83       	std	Z+1, r25	; 0x01
    1f2c:	a2 83       	std	Z+2, r26	; 0x02
    1f2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f30:	fe 01       	movw	r30, r28
    1f32:	e5 5a       	subi	r30, 0xA5	; 165
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e8       	ldi	r20, 0x80	; 128
    1f44:	5f e3       	ldi	r21, 0x3F	; 63
    1f46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f4a:	88 23       	and	r24, r24
    1f4c:	44 f4       	brge	.+16     	; 0x1f5e <Received_From_GUI+0x27a>
		__ticks = 1;
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e7 5a       	subi	r30, 0xA7	; 167
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	80 83       	st	Z, r24
    1f5c:	64 c0       	rjmp	.+200    	; 0x2026 <Received_From_GUI+0x342>
	else if (__tmp > 65535)
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e5 5a       	subi	r30, 0xA5	; 165
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	60 81       	ld	r22, Z
    1f66:	71 81       	ldd	r23, Z+1	; 0x01
    1f68:	82 81       	ldd	r24, Z+2	; 0x02
    1f6a:	93 81       	ldd	r25, Z+3	; 0x03
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	3f ef       	ldi	r19, 0xFF	; 255
    1f70:	4f e7       	ldi	r20, 0x7F	; 127
    1f72:	57 e4       	ldi	r21, 0x47	; 71
    1f74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f78:	18 16       	cp	r1, r24
    1f7a:	0c f0       	brlt	.+2      	; 0x1f7e <Received_From_GUI+0x29a>
    1f7c:	43 c0       	rjmp	.+134    	; 0x2004 <Received_From_GUI+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e1 5a       	subi	r30, 0xA1	; 161
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	60 81       	ld	r22, Z
    1f86:	71 81       	ldd	r23, Z+1	; 0x01
    1f88:	82 81       	ldd	r24, Z+2	; 0x02
    1f8a:	93 81       	ldd	r25, Z+3	; 0x03
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	8e 01       	movw	r16, r28
    1f9e:	07 5a       	subi	r16, 0xA7	; 167
    1fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	f8 01       	movw	r30, r16
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
    1fb4:	1f c0       	rjmp	.+62     	; 0x1ff4 <Received_From_GUI+0x310>
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e9 5a       	subi	r30, 0xA9	; 169
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	88 ec       	ldi	r24, 0xC8	; 200
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	80 83       	st	Z, r24
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e9 5a       	subi	r30, 0xA9	; 169
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <Received_From_GUI+0x2ea>
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e9 5a       	subi	r30, 0xA9	; 169
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fdc:	de 01       	movw	r26, r28
    1fde:	a7 5a       	subi	r26, 0xA7	; 167
    1fe0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e7 5a       	subi	r30, 0xA7	; 167
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	91 81       	ldd	r25, Z+1	; 0x01
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	11 96       	adiw	r26, 0x01	; 1
    1ff0:	9c 93       	st	X, r25
    1ff2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e7 5a       	subi	r30, 0xA7	; 167
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	d1 f6       	brne	.-76     	; 0x1fb6 <Received_From_GUI+0x2d2>
    2002:	27 c0       	rjmp	.+78     	; 0x2052 <Received_From_GUI+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2004:	8e 01       	movw	r16, r28
    2006:	07 5a       	subi	r16, 0xA7	; 167
    2008:	1f 4f       	sbci	r17, 0xFF	; 255
    200a:	fe 01       	movw	r30, r28
    200c:	e5 5a       	subi	r30, 0xA5	; 165
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	f8 01       	movw	r30, r16
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	80 83       	st	Z, r24
    2026:	de 01       	movw	r26, r28
    2028:	ab 5a       	subi	r26, 0xAB	; 171
    202a:	bf 4f       	sbci	r27, 0xFF	; 255
    202c:	fe 01       	movw	r30, r28
    202e:	e7 5a       	subi	r30, 0xA7	; 167
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	80 81       	ld	r24, Z
    2034:	91 81       	ldd	r25, Z+1	; 0x01
    2036:	8d 93       	st	X+, r24
    2038:	9c 93       	st	X, r25
    203a:	fe 01       	movw	r30, r28
    203c:	eb 5a       	subi	r30, 0xAB	; 171
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <Received_From_GUI+0x360>
    2048:	fe 01       	movw	r30, r28
    204a:	eb 5a       	subi	r30, 0xAB	; 171
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	91 83       	std	Z+1, r25	; 0x01
    2050:	80 83       	st	Z, r24
				_delay_ms(50);
				UART_SendByte(';');
    2052:	8b e3       	ldi	r24, 0x3B	; 59
    2054:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
    2058:	26 c3       	rjmp	.+1612   	; 0x26a6 <Received_From_GUI+0x9c2>
		break;

		case '1': /* close door */
				close_door();
    205a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <close_door>
				UART_SendByte('*');
    205e:	8a e2       	ldi	r24, 0x2A	; 42
    2060:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
    2064:	fe 01       	movw	r30, r28
    2066:	ef 5a       	subi	r30, 0xAF	; 175
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a8 e4       	ldi	r26, 0x48	; 72
    2070:	b2 e4       	ldi	r27, 0x42	; 66
    2072:	80 83       	st	Z, r24
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	a2 83       	std	Z+2, r26	; 0x02
    2078:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	8e 01       	movw	r16, r28
    207c:	03 5b       	subi	r16, 0xB3	; 179
    207e:	1f 4f       	sbci	r17, 0xFF	; 255
    2080:	fe 01       	movw	r30, r28
    2082:	ef 5a       	subi	r30, 0xAF	; 175
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	60 81       	ld	r22, Z
    2088:	71 81       	ldd	r23, Z+1	; 0x01
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	4a ef       	ldi	r20, 0xFA	; 250
    2094:	54 e4       	ldi	r21, 0x44	; 68
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	f8 01       	movw	r30, r16
    20a0:	80 83       	st	Z, r24
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	a2 83       	std	Z+2, r26	; 0x02
    20a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a8:	fe 01       	movw	r30, r28
    20aa:	e3 5b       	subi	r30, 0xB3	; 179
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e8       	ldi	r20, 0x80	; 128
    20bc:	5f e3       	ldi	r21, 0x3F	; 63
    20be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	44 f4       	brge	.+16     	; 0x20d6 <Received_From_GUI+0x3f2>
		__ticks = 1;
    20c6:	fe 01       	movw	r30, r28
    20c8:	e5 5b       	subi	r30, 0xB5	; 181
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	80 83       	st	Z, r24
    20d4:	64 c0       	rjmp	.+200    	; 0x219e <Received_From_GUI+0x4ba>
	else if (__tmp > 65535)
    20d6:	fe 01       	movw	r30, r28
    20d8:	e3 5b       	subi	r30, 0xB3	; 179
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	60 81       	ld	r22, Z
    20de:	71 81       	ldd	r23, Z+1	; 0x01
    20e0:	82 81       	ldd	r24, Z+2	; 0x02
    20e2:	93 81       	ldd	r25, Z+3	; 0x03
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	3f ef       	ldi	r19, 0xFF	; 255
    20e8:	4f e7       	ldi	r20, 0x7F	; 127
    20ea:	57 e4       	ldi	r21, 0x47	; 71
    20ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20f0:	18 16       	cp	r1, r24
    20f2:	0c f0       	brlt	.+2      	; 0x20f6 <Received_From_GUI+0x412>
    20f4:	43 c0       	rjmp	.+134    	; 0x217c <Received_From_GUI+0x498>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f6:	fe 01       	movw	r30, r28
    20f8:	ef 5a       	subi	r30, 0xAF	; 175
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	20 e0       	ldi	r18, 0x00	; 0
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	40 e2       	ldi	r20, 0x20	; 32
    210a:	51 e4       	ldi	r21, 0x41	; 65
    210c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	8e 01       	movw	r16, r28
    2116:	05 5b       	subi	r16, 0xB5	; 181
    2118:	1f 4f       	sbci	r17, 0xFF	; 255
    211a:	bc 01       	movw	r22, r24
    211c:	cd 01       	movw	r24, r26
    211e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	f8 01       	movw	r30, r16
    2128:	91 83       	std	Z+1, r25	; 0x01
    212a:	80 83       	st	Z, r24
    212c:	1f c0       	rjmp	.+62     	; 0x216c <Received_From_GUI+0x488>
    212e:	fe 01       	movw	r30, r28
    2130:	e7 5b       	subi	r30, 0xB7	; 183
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	88 ec       	ldi	r24, 0xC8	; 200
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	91 83       	std	Z+1, r25	; 0x01
    213a:	80 83       	st	Z, r24
    213c:	fe 01       	movw	r30, r28
    213e:	e7 5b       	subi	r30, 0xB7	; 183
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 81       	ld	r24, Z
    2144:	91 81       	ldd	r25, Z+1	; 0x01
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <Received_From_GUI+0x462>
    214a:	fe 01       	movw	r30, r28
    214c:	e7 5b       	subi	r30, 0xB7	; 183
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	de 01       	movw	r26, r28
    2156:	a5 5b       	subi	r26, 0xB5	; 181
    2158:	bf 4f       	sbci	r27, 0xFF	; 255
    215a:	fe 01       	movw	r30, r28
    215c:	e5 5b       	subi	r30, 0xB5	; 181
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 81       	ld	r24, Z
    2162:	91 81       	ldd	r25, Z+1	; 0x01
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	11 96       	adiw	r26, 0x01	; 1
    2168:	9c 93       	st	X, r25
    216a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216c:	fe 01       	movw	r30, r28
    216e:	e5 5b       	subi	r30, 0xB5	; 181
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	91 81       	ldd	r25, Z+1	; 0x01
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	d1 f6       	brne	.-76     	; 0x212e <Received_From_GUI+0x44a>
    217a:	27 c0       	rjmp	.+78     	; 0x21ca <Received_From_GUI+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217c:	8e 01       	movw	r16, r28
    217e:	05 5b       	subi	r16, 0xB5	; 181
    2180:	1f 4f       	sbci	r17, 0xFF	; 255
    2182:	fe 01       	movw	r30, r28
    2184:	e3 5b       	subi	r30, 0xB3	; 179
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	f8 01       	movw	r30, r16
    219a:	91 83       	std	Z+1, r25	; 0x01
    219c:	80 83       	st	Z, r24
    219e:	de 01       	movw	r26, r28
    21a0:	a9 5b       	subi	r26, 0xB9	; 185
    21a2:	bf 4f       	sbci	r27, 0xFF	; 255
    21a4:	fe 01       	movw	r30, r28
    21a6:	e5 5b       	subi	r30, 0xB5	; 181
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	80 81       	ld	r24, Z
    21ac:	91 81       	ldd	r25, Z+1	; 0x01
    21ae:	8d 93       	st	X+, r24
    21b0:	9c 93       	st	X, r25
    21b2:	fe 01       	movw	r30, r28
    21b4:	e9 5b       	subi	r30, 0xB9	; 185
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	80 81       	ld	r24, Z
    21ba:	91 81       	ldd	r25, Z+1	; 0x01
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <Received_From_GUI+0x4d8>
    21c0:	fe 01       	movw	r30, r28
    21c2:	e9 5b       	subi	r30, 0xB9	; 185
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	80 83       	st	Z, r24
				_delay_ms(50);
				UART_SendString("Door Closed");
    21ca:	87 eb       	ldi	r24, 0xB7	; 183
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    21d2:	fe 01       	movw	r30, r28
    21d4:	ed 5b       	subi	r30, 0xBD	; 189
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	a8 e4       	ldi	r26, 0x48	; 72
    21de:	b2 e4       	ldi	r27, 0x42	; 66
    21e0:	80 83       	st	Z, r24
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	a2 83       	std	Z+2, r26	; 0x02
    21e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e8:	8e 01       	movw	r16, r28
    21ea:	01 5c       	subi	r16, 0xC1	; 193
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	fe 01       	movw	r30, r28
    21f0:	ed 5b       	subi	r30, 0xBD	; 189
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	4a ef       	ldi	r20, 0xFA	; 250
    2202:	54 e4       	ldi	r21, 0x44	; 68
    2204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	f8 01       	movw	r30, r16
    220e:	80 83       	st	Z, r24
    2210:	91 83       	std	Z+1, r25	; 0x01
    2212:	a2 83       	std	Z+2, r26	; 0x02
    2214:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2216:	fe 01       	movw	r30, r28
    2218:	ff 96       	adiw	r30, 0x3f	; 63
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e8       	ldi	r20, 0x80	; 128
    2228:	5f e3       	ldi	r21, 0x3F	; 63
    222a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    222e:	88 23       	and	r24, r24
    2230:	2c f4       	brge	.+10     	; 0x223c <Received_From_GUI+0x558>
		__ticks = 1;
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	9e af       	std	Y+62, r25	; 0x3e
    2238:	8d af       	std	Y+61, r24	; 0x3d
    223a:	46 c0       	rjmp	.+140    	; 0x22c8 <Received_From_GUI+0x5e4>
	else if (__tmp > 65535)
    223c:	fe 01       	movw	r30, r28
    223e:	ff 96       	adiw	r30, 0x3f	; 63
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	3f ef       	ldi	r19, 0xFF	; 255
    224c:	4f e7       	ldi	r20, 0x7F	; 127
    224e:	57 e4       	ldi	r21, 0x47	; 71
    2250:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2254:	18 16       	cp	r1, r24
    2256:	64 f5       	brge	.+88     	; 0x22b0 <Received_From_GUI+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2258:	fe 01       	movw	r30, r28
    225a:	ed 5b       	subi	r30, 0xBD	; 189
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	60 81       	ld	r22, Z
    2260:	71 81       	ldd	r23, Z+1	; 0x01
    2262:	82 81       	ldd	r24, Z+2	; 0x02
    2264:	93 81       	ldd	r25, Z+3	; 0x03
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9e af       	std	Y+62, r25	; 0x3e
    2284:	8d af       	std	Y+61, r24	; 0x3d
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <Received_From_GUI+0x5c2>
    2288:	88 ec       	ldi	r24, 0xC8	; 200
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	9c af       	std	Y+60, r25	; 0x3c
    228e:	8b af       	std	Y+59, r24	; 0x3b
    2290:	8b ad       	ldd	r24, Y+59	; 0x3b
    2292:	9c ad       	ldd	r25, Y+60	; 0x3c
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <Received_From_GUI+0x5b0>
    2298:	9c af       	std	Y+60, r25	; 0x3c
    229a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	8d ad       	ldd	r24, Y+61	; 0x3d
    229e:	9e ad       	ldd	r25, Y+62	; 0x3e
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9e af       	std	Y+62, r25	; 0x3e
    22a4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    22a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <Received_From_GUI+0x5a4>
    22ae:	16 c0       	rjmp	.+44     	; 0x22dc <Received_From_GUI+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	fe 01       	movw	r30, r28
    22b2:	ff 96       	adiw	r30, 0x3f	; 63
    22b4:	60 81       	ld	r22, Z
    22b6:	71 81       	ldd	r23, Z+1	; 0x01
    22b8:	82 81       	ldd	r24, Z+2	; 0x02
    22ba:	93 81       	ldd	r25, Z+3	; 0x03
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9e af       	std	Y+62, r25	; 0x3e
    22c6:	8d af       	std	Y+61, r24	; 0x3d
    22c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    22ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    22cc:	9a af       	std	Y+58, r25	; 0x3a
    22ce:	89 af       	std	Y+57, r24	; 0x39
    22d0:	89 ad       	ldd	r24, Y+57	; 0x39
    22d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <Received_From_GUI+0x5f0>
    22d8:	9a af       	std	Y+58, r25	; 0x3a
    22da:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(50);
				UART_SendByte(';');
    22dc:	8b e3       	ldi	r24, 0x3B	; 59
    22de:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
    22e2:	e1 c1       	rjmp	.+962    	; 0x26a6 <Received_From_GUI+0x9c2>
		break;

		case '2': /* Activate Water pump */
				Pump_Activate();
    22e4:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <Pump_Activate>
				UART_SendByte('*');
    22e8:	8a e2       	ldi	r24, 0x2A	; 42
    22ea:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	a8 e4       	ldi	r26, 0x48	; 72
    22f4:	b2 e4       	ldi	r27, 0x42	; 66
    22f6:	8d ab       	std	Y+53, r24	; 0x35
    22f8:	9e ab       	std	Y+54, r25	; 0x36
    22fa:	af ab       	std	Y+55, r26	; 0x37
    22fc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fe:	6d a9       	ldd	r22, Y+53	; 0x35
    2300:	7e a9       	ldd	r23, Y+54	; 0x36
    2302:	8f a9       	ldd	r24, Y+55	; 0x37
    2304:	98 ad       	ldd	r25, Y+56	; 0x38
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	4a ef       	ldi	r20, 0xFA	; 250
    230c:	54 e4       	ldi	r21, 0x44	; 68
    230e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	89 ab       	std	Y+49, r24	; 0x31
    2318:	9a ab       	std	Y+50, r25	; 0x32
    231a:	ab ab       	std	Y+51, r26	; 0x33
    231c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    231e:	69 a9       	ldd	r22, Y+49	; 0x31
    2320:	7a a9       	ldd	r23, Y+50	; 0x32
    2322:	8b a9       	ldd	r24, Y+51	; 0x33
    2324:	9c a9       	ldd	r25, Y+52	; 0x34
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e8       	ldi	r20, 0x80	; 128
    232c:	5f e3       	ldi	r21, 0x3F	; 63
    232e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2332:	88 23       	and	r24, r24
    2334:	2c f4       	brge	.+10     	; 0x2340 <Received_From_GUI+0x65c>
		__ticks = 1;
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	98 ab       	std	Y+48, r25	; 0x30
    233c:	8f a7       	std	Y+47, r24	; 0x2f
    233e:	3f c0       	rjmp	.+126    	; 0x23be <Received_From_GUI+0x6da>
	else if (__tmp > 65535)
    2340:	69 a9       	ldd	r22, Y+49	; 0x31
    2342:	7a a9       	ldd	r23, Y+50	; 0x32
    2344:	8b a9       	ldd	r24, Y+51	; 0x33
    2346:	9c a9       	ldd	r25, Y+52	; 0x34
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	3f ef       	ldi	r19, 0xFF	; 255
    234c:	4f e7       	ldi	r20, 0x7F	; 127
    234e:	57 e4       	ldi	r21, 0x47	; 71
    2350:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2354:	18 16       	cp	r1, r24
    2356:	4c f5       	brge	.+82     	; 0x23aa <Received_From_GUI+0x6c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2358:	6d a9       	ldd	r22, Y+53	; 0x35
    235a:	7e a9       	ldd	r23, Y+54	; 0x36
    235c:	8f a9       	ldd	r24, Y+55	; 0x37
    235e:	98 ad       	ldd	r25, Y+56	; 0x38
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e2       	ldi	r20, 0x20	; 32
    2366:	51 e4       	ldi	r21, 0x41	; 65
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	bc 01       	movw	r22, r24
    2372:	cd 01       	movw	r24, r26
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	98 ab       	std	Y+48, r25	; 0x30
    237e:	8f a7       	std	Y+47, r24	; 0x2f
    2380:	0f c0       	rjmp	.+30     	; 0x23a0 <Received_From_GUI+0x6bc>
    2382:	88 ec       	ldi	r24, 0xC8	; 200
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9e a7       	std	Y+46, r25	; 0x2e
    2388:	8d a7       	std	Y+45, r24	; 0x2d
    238a:	8d a5       	ldd	r24, Y+45	; 0x2d
    238c:	9e a5       	ldd	r25, Y+46	; 0x2e
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	f1 f7       	brne	.-4      	; 0x238e <Received_From_GUI+0x6aa>
    2392:	9e a7       	std	Y+46, r25	; 0x2e
    2394:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2396:	8f a5       	ldd	r24, Y+47	; 0x2f
    2398:	98 a9       	ldd	r25, Y+48	; 0x30
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	98 ab       	std	Y+48, r25	; 0x30
    239e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a2:	98 a9       	ldd	r25, Y+48	; 0x30
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	69 f7       	brne	.-38     	; 0x2382 <Received_From_GUI+0x69e>
    23a8:	14 c0       	rjmp	.+40     	; 0x23d2 <Received_From_GUI+0x6ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23aa:	69 a9       	ldd	r22, Y+49	; 0x31
    23ac:	7a a9       	ldd	r23, Y+50	; 0x32
    23ae:	8b a9       	ldd	r24, Y+51	; 0x33
    23b0:	9c a9       	ldd	r25, Y+52	; 0x34
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	98 ab       	std	Y+48, r25	; 0x30
    23bc:	8f a7       	std	Y+47, r24	; 0x2f
    23be:	8f a5       	ldd	r24, Y+47	; 0x2f
    23c0:	98 a9       	ldd	r25, Y+48	; 0x30
    23c2:	9c a7       	std	Y+44, r25	; 0x2c
    23c4:	8b a7       	std	Y+43, r24	; 0x2b
    23c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    23c8:	9c a5       	ldd	r25, Y+44	; 0x2c
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <Received_From_GUI+0x6e6>
    23ce:	9c a7       	std	Y+44, r25	; 0x2c
    23d0:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(50);
				UART_SendString("Water Pump Activated");
    23d2:	83 ec       	ldi	r24, 0xC3	; 195
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	a8 e4       	ldi	r26, 0x48	; 72
    23e0:	b2 e4       	ldi	r27, 0x42	; 66
    23e2:	8f a3       	std	Y+39, r24	; 0x27
    23e4:	98 a7       	std	Y+40, r25	; 0x28
    23e6:	a9 a7       	std	Y+41, r26	; 0x29
    23e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ea:	6f a1       	ldd	r22, Y+39	; 0x27
    23ec:	78 a5       	ldd	r23, Y+40	; 0x28
    23ee:	89 a5       	ldd	r24, Y+41	; 0x29
    23f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	4a ef       	ldi	r20, 0xFA	; 250
    23f8:	54 e4       	ldi	r21, 0x44	; 68
    23fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	8b a3       	std	Y+35, r24	; 0x23
    2404:	9c a3       	std	Y+36, r25	; 0x24
    2406:	ad a3       	std	Y+37, r26	; 0x25
    2408:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    240a:	6b a1       	ldd	r22, Y+35	; 0x23
    240c:	7c a1       	ldd	r23, Y+36	; 0x24
    240e:	8d a1       	ldd	r24, Y+37	; 0x25
    2410:	9e a1       	ldd	r25, Y+38	; 0x26
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e8       	ldi	r20, 0x80	; 128
    2418:	5f e3       	ldi	r21, 0x3F	; 63
    241a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    241e:	88 23       	and	r24, r24
    2420:	2c f4       	brge	.+10     	; 0x242c <Received_From_GUI+0x748>
		__ticks = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9a a3       	std	Y+34, r25	; 0x22
    2428:	89 a3       	std	Y+33, r24	; 0x21
    242a:	3f c0       	rjmp	.+126    	; 0x24aa <Received_From_GUI+0x7c6>
	else if (__tmp > 65535)
    242c:	6b a1       	ldd	r22, Y+35	; 0x23
    242e:	7c a1       	ldd	r23, Y+36	; 0x24
    2430:	8d a1       	ldd	r24, Y+37	; 0x25
    2432:	9e a1       	ldd	r25, Y+38	; 0x26
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	3f ef       	ldi	r19, 0xFF	; 255
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	57 e4       	ldi	r21, 0x47	; 71
    243c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2440:	18 16       	cp	r1, r24
    2442:	4c f5       	brge	.+82     	; 0x2496 <Received_From_GUI+0x7b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2444:	6f a1       	ldd	r22, Y+39	; 0x27
    2446:	78 a5       	ldd	r23, Y+40	; 0x28
    2448:	89 a5       	ldd	r24, Y+41	; 0x29
    244a:	9a a5       	ldd	r25, Y+42	; 0x2a
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e2       	ldi	r20, 0x20	; 32
    2452:	51 e4       	ldi	r21, 0x41	; 65
    2454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9a a3       	std	Y+34, r25	; 0x22
    246a:	89 a3       	std	Y+33, r24	; 0x21
    246c:	0f c0       	rjmp	.+30     	; 0x248c <Received_From_GUI+0x7a8>
    246e:	88 ec       	ldi	r24, 0xC8	; 200
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	98 a3       	std	Y+32, r25	; 0x20
    2474:	8f 8f       	std	Y+31, r24	; 0x1f
    2476:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2478:	98 a1       	ldd	r25, Y+32	; 0x20
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <Received_From_GUI+0x796>
    247e:	98 a3       	std	Y+32, r25	; 0x20
    2480:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2482:	89 a1       	ldd	r24, Y+33	; 0x21
    2484:	9a a1       	ldd	r25, Y+34	; 0x22
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	9a a3       	std	Y+34, r25	; 0x22
    248a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248c:	89 a1       	ldd	r24, Y+33	; 0x21
    248e:	9a a1       	ldd	r25, Y+34	; 0x22
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	69 f7       	brne	.-38     	; 0x246e <Received_From_GUI+0x78a>
    2494:	14 c0       	rjmp	.+40     	; 0x24be <Received_From_GUI+0x7da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2496:	6b a1       	ldd	r22, Y+35	; 0x23
    2498:	7c a1       	ldd	r23, Y+36	; 0x24
    249a:	8d a1       	ldd	r24, Y+37	; 0x25
    249c:	9e a1       	ldd	r25, Y+38	; 0x26
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9a a3       	std	Y+34, r25	; 0x22
    24a8:	89 a3       	std	Y+33, r24	; 0x21
    24aa:	89 a1       	ldd	r24, Y+33	; 0x21
    24ac:	9a a1       	ldd	r25, Y+34	; 0x22
    24ae:	9e 8f       	std	Y+30, r25	; 0x1e
    24b0:	8d 8f       	std	Y+29, r24	; 0x1d
    24b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <Received_From_GUI+0x7d2>
    24ba:	9e 8f       	std	Y+30, r25	; 0x1e
    24bc:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(50);
				UART_SendByte(';');
    24be:	8b e3       	ldi	r24, 0x3B	; 59
    24c0:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
    24c4:	f0 c0       	rjmp	.+480    	; 0x26a6 <Received_From_GUI+0x9c2>
		break;

		case '3': /* Deactivate Water pump */
				Pump_deActivate();
    24c6:	0e 94 f8 25 	call	0x4bf0	; 0x4bf0 <Pump_deActivate>
				UART_SendByte('*');
    24ca:	8a e2       	ldi	r24, 0x2A	; 42
    24cc:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	a8 e4       	ldi	r26, 0x48	; 72
    24d6:	b2 e4       	ldi	r27, 0x42	; 66
    24d8:	89 8f       	std	Y+25, r24	; 0x19
    24da:	9a 8f       	std	Y+26, r25	; 0x1a
    24dc:	ab 8f       	std	Y+27, r26	; 0x1b
    24de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	69 8d       	ldd	r22, Y+25	; 0x19
    24e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	4a ef       	ldi	r20, 0xFA	; 250
    24ee:	54 e4       	ldi	r21, 0x44	; 68
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	8d 8b       	std	Y+21, r24	; 0x15
    24fa:	9e 8b       	std	Y+22, r25	; 0x16
    24fc:	af 8b       	std	Y+23, r26	; 0x17
    24fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2500:	6d 89       	ldd	r22, Y+21	; 0x15
    2502:	7e 89       	ldd	r23, Y+22	; 0x16
    2504:	8f 89       	ldd	r24, Y+23	; 0x17
    2506:	98 8d       	ldd	r25, Y+24	; 0x18
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e8       	ldi	r20, 0x80	; 128
    250e:	5f e3       	ldi	r21, 0x3F	; 63
    2510:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2514:	88 23       	and	r24, r24
    2516:	2c f4       	brge	.+10     	; 0x2522 <Received_From_GUI+0x83e>
		__ticks = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9c 8b       	std	Y+20, r25	; 0x14
    251e:	8b 8b       	std	Y+19, r24	; 0x13
    2520:	3f c0       	rjmp	.+126    	; 0x25a0 <Received_From_GUI+0x8bc>
	else if (__tmp > 65535)
    2522:	6d 89       	ldd	r22, Y+21	; 0x15
    2524:	7e 89       	ldd	r23, Y+22	; 0x16
    2526:	8f 89       	ldd	r24, Y+23	; 0x17
    2528:	98 8d       	ldd	r25, Y+24	; 0x18
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	3f ef       	ldi	r19, 0xFF	; 255
    252e:	4f e7       	ldi	r20, 0x7F	; 127
    2530:	57 e4       	ldi	r21, 0x47	; 71
    2532:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2536:	18 16       	cp	r1, r24
    2538:	4c f5       	brge	.+82     	; 0x258c <Received_From_GUI+0x8a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253a:	69 8d       	ldd	r22, Y+25	; 0x19
    253c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    253e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2540:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9c 8b       	std	Y+20, r25	; 0x14
    2560:	8b 8b       	std	Y+19, r24	; 0x13
    2562:	0f c0       	rjmp	.+30     	; 0x2582 <Received_From_GUI+0x89e>
    2564:	88 ec       	ldi	r24, 0xC8	; 200
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9a 8b       	std	Y+18, r25	; 0x12
    256a:	89 8b       	std	Y+17, r24	; 0x11
    256c:	89 89       	ldd	r24, Y+17	; 0x11
    256e:	9a 89       	ldd	r25, Y+18	; 0x12
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <Received_From_GUI+0x88c>
    2574:	9a 8b       	std	Y+18, r25	; 0x12
    2576:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2578:	8b 89       	ldd	r24, Y+19	; 0x13
    257a:	9c 89       	ldd	r25, Y+20	; 0x14
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	9c 8b       	std	Y+20, r25	; 0x14
    2580:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	8b 89       	ldd	r24, Y+19	; 0x13
    2584:	9c 89       	ldd	r25, Y+20	; 0x14
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	69 f7       	brne	.-38     	; 0x2564 <Received_From_GUI+0x880>
    258a:	14 c0       	rjmp	.+40     	; 0x25b4 <Received_From_GUI+0x8d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258c:	6d 89       	ldd	r22, Y+21	; 0x15
    258e:	7e 89       	ldd	r23, Y+22	; 0x16
    2590:	8f 89       	ldd	r24, Y+23	; 0x17
    2592:	98 8d       	ldd	r25, Y+24	; 0x18
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9c 8b       	std	Y+20, r25	; 0x14
    259e:	8b 8b       	std	Y+19, r24	; 0x13
    25a0:	8b 89       	ldd	r24, Y+19	; 0x13
    25a2:	9c 89       	ldd	r25, Y+20	; 0x14
    25a4:	98 8b       	std	Y+16, r25	; 0x10
    25a6:	8f 87       	std	Y+15, r24	; 0x0f
    25a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25aa:	98 89       	ldd	r25, Y+16	; 0x10
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <Received_From_GUI+0x8c8>
    25b0:	98 8b       	std	Y+16, r25	; 0x10
    25b2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				UART_SendString("Water Pump DeActivated");
    25b4:	88 ed       	ldi	r24, 0xD8	; 216
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_SendString>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	a8 e4       	ldi	r26, 0x48	; 72
    25c2:	b2 e4       	ldi	r27, 0x42	; 66
    25c4:	8b 87       	std	Y+11, r24	; 0x0b
    25c6:	9c 87       	std	Y+12, r25	; 0x0c
    25c8:	ad 87       	std	Y+13, r26	; 0x0d
    25ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	4a ef       	ldi	r20, 0xFA	; 250
    25da:	54 e4       	ldi	r21, 0x44	; 68
    25dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	8f 83       	std	Y+7, r24	; 0x07
    25e6:	98 87       	std	Y+8, r25	; 0x08
    25e8:	a9 87       	std	Y+9, r26	; 0x09
    25ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ec:	6f 81       	ldd	r22, Y+7	; 0x07
    25ee:	78 85       	ldd	r23, Y+8	; 0x08
    25f0:	89 85       	ldd	r24, Y+9	; 0x09
    25f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e8       	ldi	r20, 0x80	; 128
    25fa:	5f e3       	ldi	r21, 0x3F	; 63
    25fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2600:	88 23       	and	r24, r24
    2602:	2c f4       	brge	.+10     	; 0x260e <Received_From_GUI+0x92a>
		__ticks = 1;
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	9e 83       	std	Y+6, r25	; 0x06
    260a:	8d 83       	std	Y+5, r24	; 0x05
    260c:	3f c0       	rjmp	.+126    	; 0x268c <Received_From_GUI+0x9a8>
	else if (__tmp > 65535)
    260e:	6f 81       	ldd	r22, Y+7	; 0x07
    2610:	78 85       	ldd	r23, Y+8	; 0x08
    2612:	89 85       	ldd	r24, Y+9	; 0x09
    2614:	9a 85       	ldd	r25, Y+10	; 0x0a
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	3f ef       	ldi	r19, 0xFF	; 255
    261a:	4f e7       	ldi	r20, 0x7F	; 127
    261c:	57 e4       	ldi	r21, 0x47	; 71
    261e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2622:	18 16       	cp	r1, r24
    2624:	4c f5       	brge	.+82     	; 0x2678 <Received_From_GUI+0x994>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2626:	6b 85       	ldd	r22, Y+11	; 0x0b
    2628:	7c 85       	ldd	r23, Y+12	; 0x0c
    262a:	8d 85       	ldd	r24, Y+13	; 0x0d
    262c:	9e 85       	ldd	r25, Y+14	; 0x0e
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e2       	ldi	r20, 0x20	; 32
    2634:	51 e4       	ldi	r21, 0x41	; 65
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	bc 01       	movw	r22, r24
    2640:	cd 01       	movw	r24, r26
    2642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	9e 83       	std	Y+6, r25	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	0f c0       	rjmp	.+30     	; 0x266e <Received_From_GUI+0x98a>
    2650:	88 ec       	ldi	r24, 0xC8	; 200
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	9c 83       	std	Y+4, r25	; 0x04
    2656:	8b 83       	std	Y+3, r24	; 0x03
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	9c 81       	ldd	r25, Y+4	; 0x04
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <Received_From_GUI+0x978>
    2660:	9c 83       	std	Y+4, r25	; 0x04
    2662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2664:	8d 81       	ldd	r24, Y+5	; 0x05
    2666:	9e 81       	ldd	r25, Y+6	; 0x06
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	9e 83       	std	Y+6, r25	; 0x06
    266c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266e:	8d 81       	ldd	r24, Y+5	; 0x05
    2670:	9e 81       	ldd	r25, Y+6	; 0x06
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	69 f7       	brne	.-38     	; 0x2650 <Received_From_GUI+0x96c>
    2676:	14 c0       	rjmp	.+40     	; 0x26a0 <Received_From_GUI+0x9bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2678:	6f 81       	ldd	r22, Y+7	; 0x07
    267a:	78 85       	ldd	r23, Y+8	; 0x08
    267c:	89 85       	ldd	r24, Y+9	; 0x09
    267e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	9e 83       	std	Y+6, r25	; 0x06
    268a:	8d 83       	std	Y+5, r24	; 0x05
    268c:	8d 81       	ldd	r24, Y+5	; 0x05
    268e:	9e 81       	ldd	r25, Y+6	; 0x06
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <Received_From_GUI+0x9b4>
    269c:	9a 83       	std	Y+2, r25	; 0x02
    269e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				UART_SendByte(';');
    26a0:	8b e3       	ldi	r24, 0x3B	; 59
    26a2:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
		break;
	}
}
    26a6:	cd 58       	subi	r28, 0x8D	; 141
    26a8:	df 4f       	sbci	r29, 0xFF	; 255
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	1f 91       	pop	r17
    26ba:	0f 91       	pop	r16
    26bc:	08 95       	ret

000026be <Time_Display_LCD>:
//======================================================================================================//
void Time_Display_LCD(void)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
	LCD_moveCursor(1,9);
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	69 e0       	ldi	r22, 0x09	; 9
    26ca:	0e 94 4f 23 	call	0x469e	; 0x469e <LCD_moveCursor>
	LCD_integerToString(g_Minutes);
    26ce:	80 91 05 02 	lds	r24, 0x0205
    26d2:	88 2f       	mov	r24, r24
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	0e 94 b4 23 	call	0x4768	; 0x4768 <LCD_integerToString>
	LCD_displayStringRowColumn(1,10,":");
    26da:	26 ea       	ldi	r18, 0xA6	; 166
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	6a e0       	ldi	r22, 0x0A	; 10
    26e2:	a9 01       	movw	r20, r18
    26e4:	0e 94 91 23 	call	0x4722	; 0x4722 <LCD_displayStringRowColumn>

	if(g_Seconds < 10)
    26e8:	80 91 69 02 	lds	r24, 0x0269
    26ec:	8a 30       	cpi	r24, 0x0A	; 10
    26ee:	78 f4       	brcc	.+30     	; 0x270e <Time_Display_LCD+0x50>
	{
		LCD_moveCursor(1,11);
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	6b e0       	ldi	r22, 0x0B	; 11
    26f4:	0e 94 4f 23 	call	0x469e	; 0x469e <LCD_moveCursor>
		LCD_integerToString(0);
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 b4 23 	call	0x4768	; 0x4768 <LCD_integerToString>
		LCD_integerToString(g_Seconds);
    2700:	80 91 69 02 	lds	r24, 0x0269
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	0e 94 b4 23 	call	0x4768	; 0x4768 <LCD_integerToString>
    270c:	0a c0       	rjmp	.+20     	; 0x2722 <Time_Display_LCD+0x64>
	}
	else
	{
		LCD_moveCursor(1,11);
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	6b e0       	ldi	r22, 0x0B	; 11
    2712:	0e 94 4f 23 	call	0x469e	; 0x469e <LCD_moveCursor>
		LCD_integerToString(g_Seconds);
    2716:	80 91 69 02 	lds	r24, 0x0269
    271a:	88 2f       	mov	r24, r24
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	0e 94 b4 23 	call	0x4768	; 0x4768 <LCD_integerToString>
	}
	LCD_displayStringRowColumn(1,13," ");
    2722:	2f ee       	ldi	r18, 0xEF	; 239
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	6d e0       	ldi	r22, 0x0D	; 13
    272a:	a9 01       	movw	r20, r18
    272c:	0e 94 91 23 	call	0x4722	; 0x4722 <LCD_displayStringRowColumn>
}
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <GAS_Display_LCD>:
//======================================================================================================//
void GAS_Display_LCD(void)
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
	LCD_displayStringRowColumn(1,0,"Gas:");
    273e:	21 ef       	ldi	r18, 0xF1	; 241
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	a9 01       	movw	r20, r18
    2748:	0e 94 91 23 	call	0x4722	; 0x4722 <LCD_displayStringRowColumn>
	if(g_GassPer < 100 && g_GassPer < 10)
    274c:	80 91 6a 02 	lds	r24, 0x026A
    2750:	84 36       	cpi	r24, 0x64	; 100
    2752:	90 f4       	brcc	.+36     	; 0x2778 <GAS_Display_LCD+0x42>
    2754:	80 91 6a 02 	lds	r24, 0x026A
    2758:	8a 30       	cpi	r24, 0x0A	; 10
    275a:	70 f4       	brcc	.+28     	; 0x2778 <GAS_Display_LCD+0x42>
	{
		LCD_displayStringRowColumn(1,4,"00");
    275c:	26 ef       	ldi	r18, 0xF6	; 246
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	64 e0       	ldi	r22, 0x04	; 4
    2764:	a9 01       	movw	r20, r18
    2766:	0e 94 91 23 	call	0x4722	; 0x4722 <LCD_displayStringRowColumn>
		LCD_integerToString(g_GassPer);
    276a:	80 91 6a 02 	lds	r24, 0x026A
    276e:	88 2f       	mov	r24, r24
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	0e 94 b4 23 	call	0x4768	; 0x4768 <LCD_integerToString>
    2776:	18 c0       	rjmp	.+48     	; 0x27a8 <GAS_Display_LCD+0x72>
	}
	else if(g_GassPer < 100)
    2778:	80 91 6a 02 	lds	r24, 0x026A
    277c:	84 36       	cpi	r24, 0x64	; 100
    277e:	70 f4       	brcc	.+28     	; 0x279c <GAS_Display_LCD+0x66>
	{
		LCD_displayStringRowColumn(1,4,"0");
    2780:	29 ef       	ldi	r18, 0xF9	; 249
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	64 e0       	ldi	r22, 0x04	; 4
    2788:	a9 01       	movw	r20, r18
    278a:	0e 94 91 23 	call	0x4722	; 0x4722 <LCD_displayStringRowColumn>
		LCD_integerToString(g_GassPer);
    278e:	80 91 6a 02 	lds	r24, 0x026A
    2792:	88 2f       	mov	r24, r24
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	0e 94 b4 23 	call	0x4768	; 0x4768 <LCD_integerToString>
    279a:	06 c0       	rjmp	.+12     	; 0x27a8 <GAS_Display_LCD+0x72>
	}
	else
	{
		LCD_integerToString(g_GassPer);
    279c:	80 91 6a 02 	lds	r24, 0x026A
    27a0:	88 2f       	mov	r24, r24
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e 94 b4 23 	call	0x4768	; 0x4768 <LCD_integerToString>
	}
	LCD_displayStringRowColumn(1,7,"%");
    27a8:	2b ef       	ldi	r18, 0xFB	; 251
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	67 e0       	ldi	r22, 0x07	; 7
    27b0:	a9 01       	movw	r20, r18
    27b2:	0e 94 91 23 	call	0x4722	; 0x4722 <LCD_displayStringRowColumn>
}
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <main>:
/*********************************************************************************************************
 *                      					Main Function                                                *
 *********************************************************************************************************/

int main (void)
{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
	/* I-bit enable (global interrupts) */
	SREG |= (1<<7);
    27c4:	af e5       	ldi	r26, 0x5F	; 95
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	ef e5       	ldi	r30, 0x5F	; 95
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	80 68       	ori	r24, 0x80	; 128
    27d0:	8c 93       	st	X, r24

	UART_Init();
    27d2:	0e 94 19 14 	call	0x2832	; 0x2832 <UART_Init>
	UART_RX_SetCallBack(Received_From_GUI);
    27d6:	82 e7       	ldi	r24, 0x72	; 114
    27d8:	9e e0       	ldi	r25, 0x0E	; 14
    27da:	0e 94 a6 14 	call	0x294c	; 0x294c <UART_RX_SetCallBack>
	UART_RX_InterruptEnable();
    27de:	0e 94 6e 14 	call	0x28dc	; 0x28dc <UART_RX_InterruptEnable>

	ADC_init();
    27e2:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <ADC_init>
	LCD_init();
    27e6:	0e 94 7e 19 	call	0x32fc	; 0x32fc <LCD_init>
	LEDS_Init();
    27ea:	0e 94 d7 23 	call	0x47ae	; 0x47ae <LEDS_Init>
	Buzzer_init();
    27ee:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <Buzzer_init>
	Pump_init();
    27f2:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <Pump_init>

	/* Initial State (No gass) */
	g_CurrentState = SAFE;
    27f6:	10 92 6d 02 	sts	0x026D, r1
	Ptr_current_state = safe_state;
    27fa:	80 e1       	ldi	r24, 0x10	; 16
    27fc:	97 e0       	ldi	r25, 0x07	; 7
    27fe:	90 93 6c 02 	sts	0x026C, r25
    2802:	80 93 6b 02 	sts	0x026B, r24
	Ptr_current_state();
    2806:	e0 91 6b 02 	lds	r30, 0x026B
    280a:	f0 91 6c 02 	lds	r31, 0x026C
    280e:	09 95       	icall
	while(1)
	{
		g_GassPer = MQ135_getGassPer();
    2810:	0e 94 74 24 	call	0x48e8	; 0x48e8 <MQ135_getGassPer>
    2814:	80 93 6a 02 	sts	0x026A, r24
		Send_Gas_to_GUI();
    2818:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Send_Gas_to_GUI>
		GAS_Display_LCD();
    281c:	0e 94 9b 13 	call	0x2736	; 0x2736 <GAS_Display_LCD>
		get_state();
    2820:	0e 94 a5 07 	call	0xf4a	; 0xf4a <get_state>
		if(g_CurrentState == DANGER)
    2824:	80 91 6d 02 	lds	r24, 0x026D
    2828:	82 30       	cpi	r24, 0x02	; 2
    282a:	91 f7       	brne	.-28     	; 0x2810 <main+0x54>
		{
			Time_Display_LCD();
    282c:	0e 94 5f 13 	call	0x26be	; 0x26be <Time_Display_LCD>
    2830:	ef cf       	rjmp	.-34     	; 0x2810 <main+0x54>

00002832 <UART_Init>:
const uint16_t BaudRateArray[TOTAL_SPEED_MODE][TOTAL_CPU_F][TOTAL_BAUD_RATE]=
		 {{{103, 51, 25, 16, 12,  8},{207,103, 51, 34, 25, 16},{416,207,103, 68 ,51, 34}},
		  {{207,103, 51, 34, 25, 16},{416,207,103, 68 ,51, 34},{832,416,207,138,103, 68}}};

void UART_Init(void)
{
    2832:	df 93       	push	r29
    2834:	cf 93       	push	r28
    2836:	00 d0       	rcall	.+0      	; 0x2838 <UART_Init+0x6>
    2838:	0f 92       	push	r0
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
	uint8  UCSRC_var=0;
    283e:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t UBRR_var=0;
    2840:	1a 82       	std	Y+2, r1	; 0x02
    2842:	19 82       	std	Y+1, r1	; 0x01
/***************************** transmission speed***************************/
	#if (SPEED_MODE==NORMAL_SPEED)
	CLEAR_BIT(UCSRA,U2X);
    2844:	ab e2       	ldi	r26, 0x2B	; 43
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	eb e2       	ldi	r30, 0x2B	; 43
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	8d 7f       	andi	r24, 0xFD	; 253
    2850:	8c 93       	st	X, r24
	#elif (SPEED_MODE==DOUBLE_SPEED)
	SET_BIT(UCSRA,U2X);
	#endif

//******************set URSEL to write data to UCSRC register***************/
   SET_BIT(UCSRC_var,URSEL);
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	80 68       	ori	r24, 0x80	; 128
    2856:	8b 83       	std	Y+3, r24	; 0x03

//********************************synch***********************************/
	 #if (SYNCH_MODE==SYNCH)
	 SET_BIT(UCSRC_var,UMSEL)
	 #elif (SYNCH_MODE==ASYNCH)
 	 CLEAR_BIT(UCSRC_var,UMSEL);
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	8f 7b       	andi	r24, 0xBF	; 191
    285c:	8b 83       	std	Y+3, r24	; 0x03
	 #endif
 //*****************************parity mode*******************************/

	#if (PARITY_MODE==NO_PARITY)
	CLEAR_BIT(UCSRC_var,UPM0);
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	8f 7e       	andi	r24, 0xEF	; 239
    2862:	8b 83       	std	Y+3, r24	; 0x03
	CLEAR_BIT(UCSRC_var,UPM1);
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	8f 7d       	andi	r24, 0xDF	; 223
    2868:	8b 83       	std	Y+3, r24	; 0x03
    #elif (N_DATA_BITS==_7_DATA_BITS)
    CLEAR_BIT(UCSRC_var,UCSZ0);
    SET_BIT(UCSRC_var,UCSZ1);
    CLEAR_BIT(UCSRB,UCSZ2);
	#elif (N_DATA_BITS==_8_DATA_BITS)
	SET_BIT(UCSRC_var,UCSZ0);
    286a:	8b 81       	ldd	r24, Y+3	; 0x03
    286c:	82 60       	ori	r24, 0x02	; 2
    286e:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UCSZ1);
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	84 60       	ori	r24, 0x04	; 4
    2874:	8b 83       	std	Y+3, r24	; 0x03
	CLEAR_BIT(UCSRB,UCSZ2);
    2876:	aa e2       	ldi	r26, 0x2A	; 42
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	ea e2       	ldi	r30, 0x2A	; 42
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	8b 7f       	andi	r24, 0xFB	; 251
    2882:	8c 93       	st	X, r24
	SET_BIT(UCSRC_var,UCSZ1);
	SET_BIT(UCSRB,UCSZ2);
	#endif
//************************Stop bits*******************************/
	#if (N_STOP_BITS==ONE_STOP_BIT)
	CLEAR_BIT(UCSRC_var,USBS);
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	87 7f       	andi	r24, 0xF7	; 247
    2888:	8b 83       	std	Y+3, r24	; 0x03
	#elif (N_STOP_BITS==TWO_STOP_BIT)
	SET_BIT(UCSRC_var,USBS);
	#endif
//*****************set UCSRC value   *******************************/
	UCSRC=UCSRC_var;
    288a:	e0 e4       	ldi	r30, 0x40	; 64
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	80 83       	st	Z, r24

//************************Baud rate *******************************/

    UBRR_var=BaudRateArray[SPEED_MODE][CPU_F][BUAD_RATE];
    2892:	80 91 2e 02 	lds	r24, 0x022E
    2896:	90 91 2f 02 	lds	r25, 0x022F
    289a:	9a 83       	std	Y+2, r25	; 0x02
    289c:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (uint8)(UBRR_var>>8);
    289e:	e0 e4       	ldi	r30, 0x40	; 64
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	9a 81       	ldd	r25, Y+2	; 0x02
    28a6:	89 2f       	mov	r24, r25
    28a8:	99 27       	eor	r25, r25
    28aa:	80 83       	st	Z, r24
	UBRRL = (uint8)UBRR_var;
    28ac:	e9 e2       	ldi	r30, 0x29	; 41
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	80 83       	st	Z, r24

//************************Enable  *******************************/
//enable UART  receiver.
SET_BIT(UCSRB,RXEN);
    28b4:	aa e2       	ldi	r26, 0x2A	; 42
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	ea e2       	ldi	r30, 0x2A	; 42
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	80 61       	ori	r24, 0x10	; 16
    28c0:	8c 93       	st	X, r24
//enable UART  transmitter .
SET_BIT(UCSRB,TXEN);
    28c2:	aa e2       	ldi	r26, 0x2A	; 42
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	ea e2       	ldi	r30, 0x2A	; 42
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	88 60       	ori	r24, 0x08	; 8
    28ce:	8c 93       	st	X, r24
}
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	cf 91       	pop	r28
    28d8:	df 91       	pop	r29
    28da:	08 95       	ret

000028dc <UART_RX_InterruptEnable>:

/*****************************************Interrupt functions*********************************************/


 void UART_RX_InterruptEnable(void)
{
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXCIE);
    28e4:	aa e2       	ldi	r26, 0x2A	; 42
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	ea e2       	ldi	r30, 0x2A	; 42
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	80 68       	ori	r24, 0x80	; 128
    28f0:	8c 93       	st	X, r24
}
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <UART_RX_InterruptDisable>:

 void UART_RX_InterruptDisable(void)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXCIE);
    2900:	aa e2       	ldi	r26, 0x2A	; 42
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	ea e2       	ldi	r30, 0x2A	; 42
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	8f 77       	andi	r24, 0x7F	; 127
    290c:	8c 93       	st	X, r24
}
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <UART_TX_InterruptEnable>:

 void UART_TX_InterruptEnable(void)
{
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXCIE);
    291c:	aa e2       	ldi	r26, 0x2A	; 42
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	ea e2       	ldi	r30, 0x2A	; 42
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	80 64       	ori	r24, 0x40	; 64
    2928:	8c 93       	st	X, r24
}
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	08 95       	ret

00002930 <UART_TX_InterruptDisable>:

 void UART_TX_InterruptDisable(void)
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXCIE);
    2938:	aa e2       	ldi	r26, 0x2A	; 42
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	ea e2       	ldi	r30, 0x2A	; 42
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	8f 7b       	andi	r24, 0xBF	; 191
    2944:	8c 93       	st	X, r24
}
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <UART_RX_SetCallBack>:
/*****************************************Set Call Back Functions*********************************************/
 void UART_RX_SetCallBack(void (*LocalFptr)(void))
{
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	00 d0       	rcall	.+0      	; 0x2952 <UART_RX_SetCallBack+0x6>
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
	UART_RX_Fptr = LocalFptr;
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	9a 81       	ldd	r25, Y+2	; 0x02
    295e:	90 93 6f 02 	sts	0x026F, r25
    2962:	80 93 6e 02 	sts	0x026E, r24
}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	08 95       	ret

00002970 <UART_TX_SetCallBack>:

 void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	00 d0       	rcall	.+0      	; 0x2976 <UART_TX_SetCallBack+0x6>
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	9a 83       	std	Y+2, r25	; 0x02
    297c:	89 83       	std	Y+1, r24	; 0x01
	UART_TX_Fptr = LocalFptr;
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	9a 81       	ldd	r25, Y+2	; 0x02
    2982:	90 93 71 02 	sts	0x0271, r25
    2986:	80 93 70 02 	sts	0x0270, r24
}
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <__vector_13>:
/***********************************************ISR ************************************************************/
 ISR(USART_RXC_vect)
{
    2994:	1f 92       	push	r1
    2996:	0f 92       	push	r0
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	0f 92       	push	r0
    299c:	11 24       	eor	r1, r1
    299e:	2f 93       	push	r18
    29a0:	3f 93       	push	r19
    29a2:	4f 93       	push	r20
    29a4:	5f 93       	push	r21
    29a6:	6f 93       	push	r22
    29a8:	7f 93       	push	r23
    29aa:	8f 93       	push	r24
    29ac:	9f 93       	push	r25
    29ae:	af 93       	push	r26
    29b0:	bf 93       	push	r27
    29b2:	ef 93       	push	r30
    29b4:	ff 93       	push	r31
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_Fptr!=((void*)0))
    29be:	80 91 6e 02 	lds	r24, 0x026E
    29c2:	90 91 6f 02 	lds	r25, 0x026F
    29c6:	00 97       	sbiw	r24, 0x00	; 0
    29c8:	29 f0       	breq	.+10     	; 0x29d4 <__vector_13+0x40>
	{
		UART_RX_Fptr();
    29ca:	e0 91 6e 02 	lds	r30, 0x026E
    29ce:	f0 91 6f 02 	lds	r31, 0x026F
    29d2:	09 95       	icall
	}
}
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	ff 91       	pop	r31
    29da:	ef 91       	pop	r30
    29dc:	bf 91       	pop	r27
    29de:	af 91       	pop	r26
    29e0:	9f 91       	pop	r25
    29e2:	8f 91       	pop	r24
    29e4:	7f 91       	pop	r23
    29e6:	6f 91       	pop	r22
    29e8:	5f 91       	pop	r21
    29ea:	4f 91       	pop	r20
    29ec:	3f 91       	pop	r19
    29ee:	2f 91       	pop	r18
    29f0:	0f 90       	pop	r0
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	0f 90       	pop	r0
    29f6:	1f 90       	pop	r1
    29f8:	18 95       	reti

000029fa <__vector_15>:

 ISR(USART_TXC_vect)
{
    29fa:	1f 92       	push	r1
    29fc:	0f 92       	push	r0
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	0f 92       	push	r0
    2a02:	11 24       	eor	r1, r1
    2a04:	2f 93       	push	r18
    2a06:	3f 93       	push	r19
    2a08:	4f 93       	push	r20
    2a0a:	5f 93       	push	r21
    2a0c:	6f 93       	push	r22
    2a0e:	7f 93       	push	r23
    2a10:	8f 93       	push	r24
    2a12:	9f 93       	push	r25
    2a14:	af 93       	push	r26
    2a16:	bf 93       	push	r27
    2a18:	ef 93       	push	r30
    2a1a:	ff 93       	push	r31
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
	if (UART_TX_Fptr!=((void*)0))
    2a24:	80 91 70 02 	lds	r24, 0x0270
    2a28:	90 91 71 02 	lds	r25, 0x0271
    2a2c:	00 97       	sbiw	r24, 0x00	; 0
    2a2e:	29 f0       	breq	.+10     	; 0x2a3a <__vector_15+0x40>
	{
		UART_TX_Fptr();
    2a30:	e0 91 70 02 	lds	r30, 0x0270
    2a34:	f0 91 71 02 	lds	r31, 0x0271
    2a38:	09 95       	icall
	}
}
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	ff 91       	pop	r31
    2a40:	ef 91       	pop	r30
    2a42:	bf 91       	pop	r27
    2a44:	af 91       	pop	r26
    2a46:	9f 91       	pop	r25
    2a48:	8f 91       	pop	r24
    2a4a:	7f 91       	pop	r23
    2a4c:	6f 91       	pop	r22
    2a4e:	5f 91       	pop	r21
    2a50:	4f 91       	pop	r20
    2a52:	3f 91       	pop	r19
    2a54:	2f 91       	pop	r18
    2a56:	0f 90       	pop	r0
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	0f 90       	pop	r0
    2a5c:	1f 90       	pop	r1
    2a5e:	18 95       	reti

00002a60 <UART_SendByteNoBlock>:


/****************************************Send and receive functions with no checking ********************************/

void UART_SendByteNoBlock(uint8 data)
{
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	0f 92       	push	r0
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
    2a6a:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    2a6c:	ec e2       	ldi	r30, 0x2C	; 44
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	80 83       	st	Z, r24
}
    2a74:	0f 90       	pop	r0
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <UART_ReceiveByteNoBlock>:

uint8 UART_ReceiveByteNoBlock(void)
{
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    return UDR;
    2a84:	ec e2       	ldi	r30, 0x2C	; 44
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
}
    2a8a:	cf 91       	pop	r28
    2a8c:	df 91       	pop	r29
    2a8e:	08 95       	ret

00002a90 <UART_SendByte>:
/****************************************Send and receive functions with polling     ********************************/
void UART_SendByte(uint8 data)
{
    2a90:	df 93       	push	r29
    2a92:	cf 93       	push	r28
    2a94:	0f 92       	push	r0
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE flag is set when the buffer is empty and ready
	for transmitting a new byte so wait until this flag is set to one
	and it will cleared by hardware when u write  new data to puffer.*/
	while(!(GET_BIT(UCSRA,UDRE)));
    2a9c:	eb e2       	ldi	r30, 0x2B	; 43
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
    2aa2:	88 2f       	mov	r24, r24
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	80 72       	andi	r24, 0x20	; 32
    2aa8:	90 70       	andi	r25, 0x00	; 0
    2aaa:	95 95       	asr	r25
    2aac:	87 95       	ror	r24
    2aae:	95 95       	asr	r25
    2ab0:	87 95       	ror	r24
    2ab2:	95 95       	asr	r25
    2ab4:	87 95       	ror	r24
    2ab6:	95 95       	asr	r25
    2ab8:	87 95       	ror	r24
    2aba:	95 95       	asr	r25
    2abc:	87 95       	ror	r24
    2abe:	00 97       	sbiw	r24, 0x00	; 0
    2ac0:	69 f3       	breq	.-38     	; 0x2a9c <UART_SendByte+0xc>
	UDR = data;
    2ac2:	ec e2       	ldi	r30, 0x2C	; 44
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	80 83       	st	Z, r24
}
    2aca:	0f 90       	pop	r0
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	08 95       	ret

00002ad2 <UART_SendString>:

void UART_SendString(uint8 *data)
{
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	00 d0       	rcall	.+0      	; 0x2ad8 <UART_SendString+0x6>
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	9a 83       	std	Y+2, r25	; 0x02
    2ade:	89 83       	std	Y+1, r24	; 0x01
    2ae0:	0b c0       	rjmp	.+22     	; 0x2af8 <UART_SendString+0x26>
	while(*data)
	{
		UART_SendByte(*data++);
    2ae2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae6:	20 81       	ld	r18, Z
    2ae8:	89 81       	ldd	r24, Y+1	; 0x01
    2aea:	9a 81       	ldd	r25, Y+2	; 0x02
    2aec:	01 96       	adiw	r24, 0x01	; 1
    2aee:	9a 83       	std	Y+2, r25	; 0x02
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	82 2f       	mov	r24, r18
    2af4:	0e 94 48 15 	call	0x2a90	; 0x2a90 <UART_SendByte>
	UDR = data;
}

void UART_SendString(uint8 *data)
{
	while(*data)
    2af8:	e9 81       	ldd	r30, Y+1	; 0x01
    2afa:	fa 81       	ldd	r31, Y+2	; 0x02
    2afc:	80 81       	ld	r24, Z
    2afe:	88 23       	and	r24, r24
    2b00:	81 f7       	brne	.-32     	; 0x2ae2 <UART_SendString+0x10>
	{
		UART_SendByte(*data++);
	}
}
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <UART_ReceiveByte>:

uint8 UART_ReceiveByte(void)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
	/*RXC flag is set when the UART receive data so  wait until this flag is set to one
	and it will cleared by hardware when u read the data*/
	while(!(GET_BIT(UCSRA,RXC)));
    2b14:	eb e2       	ldi	r30, 0x2B	; 43
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	88 1f       	adc	r24, r24
    2b1c:	88 27       	eor	r24, r24
    2b1e:	88 1f       	adc	r24, r24
    2b20:	88 2f       	mov	r24, r24
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	90 70       	andi	r25, 0x00	; 0
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	a9 f3       	breq	.-22     	; 0x2b14 <UART_ReceiveByte+0x8>
    return UDR;
    2b2a:	ec e2       	ldi	r30, 0x2C	; 44
    2b2c:	f0 e0       	ldi	r31, 0x00	; 0
    2b2e:	80 81       	ld	r24, Z
}
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <UART_Receive_NoBlock>:



uint8 UART_Receive_NoBlock(uint8*pdata)
{
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	00 d0       	rcall	.+0      	; 0x2b3c <UART_Receive_NoBlock+0x6>
    2b3c:	0f 92       	push	r0
    2b3e:	cd b7       	in	r28, 0x3d	; 61
    2b40:	de b7       	in	r29, 0x3e	; 62
    2b42:	9b 83       	std	Y+3, r25	; 0x03
    2b44:	8a 83       	std	Y+2, r24	; 0x02
	uint8 status=0;
    2b46:	19 82       	std	Y+1, r1	; 0x01
	if(GET_BIT(UCSRA,RXC))
    2b48:	eb e2       	ldi	r30, 0x2B	; 43
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	88 1f       	adc	r24, r24
    2b50:	88 27       	eor	r24, r24
    2b52:	88 1f       	adc	r24, r24
    2b54:	88 2f       	mov	r24, r24
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	90 70       	andi	r25, 0x00	; 0
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	49 f0       	breq	.+18     	; 0x2b70 <UART_Receive_NoBlock+0x3a>
	{
		*pdata=UDR;
    2b5e:	ec e2       	ldi	r30, 0x2C	; 44
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	ea 81       	ldd	r30, Y+2	; 0x02
    2b66:	fb 81       	ldd	r31, Y+3	; 0x03
    2b68:	80 83       	st	Z, r24
		status=1;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	89 83       	std	Y+1, r24	; 0x01
    2b6e:	01 c0       	rjmp	.+2      	; 0x2b72 <UART_Receive_NoBlock+0x3c>
	}
	else
	{
		status=0;
    2b70:	19 82       	std	Y+1, r1	; 0x01
	}
return status;
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b74:	0f 90       	pop	r0
    2b76:	0f 90       	pop	r0
    2b78:	0f 90       	pop	r0
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	08 95       	ret

00002b80 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init()
{
    2b80:	df 93       	push	r29
    2b82:	cf 93       	push	r28
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
	/*Select reference voltage*/
	ADMUX = (ADMUX & 0b00111111) | (ADC_Reference_Selection<<6);
    2b88:	a7 e2       	ldi	r26, 0x27	; 39
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	e7 e2       	ldi	r30, 0x27	; 39
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	8f 73       	andi	r24, 0x3F	; 63
    2b94:	80 64       	ori	r24, 0x40	; 64
    2b96:	8c 93       	st	X, r24

	/*to select prescaler*/
	ADCSRA = (ADCSRA & 0b11111000) | (ADC_Prescaler & 0b00000111) ;
    2b98:	a6 e2       	ldi	r26, 0x26	; 38
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	e6 e2       	ldi	r30, 0x26	; 38
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	87 60       	ori	r24, 0x07	; 7
    2ba4:	8c 93       	st	X, r24

	/*to Enable ADC*/
	SET_BIT(ADCSRA,ADEN);
    2ba6:	a6 e2       	ldi	r26, 0x26	; 38
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	e6 e2       	ldi	r30, 0x26	; 38
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
    2bb0:	80 68       	ori	r24, 0x80	; 128
    2bb2:	8c 93       	st	X, r24
}
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <ADC_Read>:

int ADC_Read(unsigned char Channel)
{
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	0f 92       	push	r0
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	89 83       	std	Y+1, r24	; 0x01
	/*to select channel*/
	ADMUX = (ADMUX &0b11100000) | (Channel & 0b00011111);
    2bc6:	a7 e2       	ldi	r26, 0x27	; 39
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	e7 e2       	ldi	r30, 0x27	; 39
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	80 81       	ld	r24, Z
    2bd0:	98 2f       	mov	r25, r24
    2bd2:	90 7e       	andi	r25, 0xE0	; 224
    2bd4:	89 81       	ldd	r24, Y+1	; 0x01
    2bd6:	8f 71       	andi	r24, 0x1F	; 31
    2bd8:	89 2b       	or	r24, r25
    2bda:	8c 93       	st	X, r24

	/*to start conversion*/
	SET_BIT(ADCSRA,ADSC);
    2bdc:	a6 e2       	ldi	r26, 0x26	; 38
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	e6 e2       	ldi	r30, 0x26	; 38
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	80 81       	ld	r24, Z
    2be6:	80 64       	ori	r24, 0x40	; 64
    2be8:	8c 93       	st	X, r24

	/*to wait until coversion to complete*/
	while(BIT_IS_CLEAR(ADCSRA,ADIF))
    2bea:	e6 e2       	ldi	r30, 0x26	; 38
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	88 2f       	mov	r24, r24
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	80 71       	andi	r24, 0x10	; 16
    2bf6:	90 70       	andi	r25, 0x00	; 0
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	b9 f3       	breq	.-18     	; 0x2bea <ADC_Read+0x30>
	{
		;
	}

	/*to clear ADIF*/
	SET_BIT(ADCSRA,ADIF);
    2bfc:	a6 e2       	ldi	r26, 0x26	; 38
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	e6 e2       	ldi	r30, 0x26	; 38
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	80 61       	ori	r24, 0x10	; 16
    2c08:	8c 93       	st	X, r24

	return (int)ADCL + (int)(ADCH<<8);
    2c0a:	e4 e2       	ldi	r30, 0x24	; 36
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	28 2f       	mov	r18, r24
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	e5 e2       	ldi	r30, 0x25	; 37
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	88 2f       	mov	r24, r24
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	98 2f       	mov	r25, r24
    2c20:	88 27       	eor	r24, r24
    2c22:	82 0f       	add	r24, r18
    2c24:	93 1f       	adc	r25, r19
}
    2c26:	0f 90       	pop	r0
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <Buzzer_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Buzzer_init(void)
{
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
	/* Setup the direction for the buzzer pins as output pins */
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	61 e0       	ldi	r22, 0x01	; 1
    2c3a:	41 e0       	ldi	r20, 0x01	; 1
    2c3c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_setupPinDirection>

	/*  Turn off the buzzer  */
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	61 e0       	ldi	r22, 0x01	; 1
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
}
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <Buzzer_on>:

void Buzzer_on(void)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	61 e0       	ldi	r22, 0x01	; 1
    2c5c:	41 e0       	ldi	r20, 0x01	; 1
    2c5e:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
}
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <Buzzer_off>:

void Buzzer_off(void)
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	61 e0       	ldi	r22, 0x01	; 1
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
}
    2c7a:	cf 91       	pop	r28
    2c7c:	df 91       	pop	r29
    2c7e:	08 95       	ret

00002c80 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	00 d0       	rcall	.+0      	; 0x2c86 <GPIO_setupPinDirection+0x6>
    2c86:	00 d0       	rcall	.+0      	; 0x2c88 <GPIO_setupPinDirection+0x8>
    2c88:	0f 92       	push	r0
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	6a 83       	std	Y+2, r22	; 0x02
    2c92:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	88 30       	cpi	r24, 0x08	; 8
    2c98:	08 f0       	brcs	.+2      	; 0x2c9c <GPIO_setupPinDirection+0x1c>
    2c9a:	d5 c0       	rjmp	.+426    	; 0x2e46 <GPIO_setupPinDirection+0x1c6>
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	84 30       	cpi	r24, 0x04	; 4
    2ca0:	08 f0       	brcs	.+2      	; 0x2ca4 <GPIO_setupPinDirection+0x24>
    2ca2:	d1 c0       	rjmp	.+418    	; 0x2e46 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	28 2f       	mov	r18, r24
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	3d 83       	std	Y+5, r19	; 0x05
    2cac:	2c 83       	std	Y+4, r18	; 0x04
    2cae:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb2:	81 30       	cpi	r24, 0x01	; 1
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	09 f4       	brne	.+2      	; 0x2cba <GPIO_setupPinDirection+0x3a>
    2cb8:	43 c0       	rjmp	.+134    	; 0x2d40 <GPIO_setupPinDirection+0xc0>
    2cba:	2c 81       	ldd	r18, Y+4	; 0x04
    2cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    2cbe:	22 30       	cpi	r18, 0x02	; 2
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	2c f4       	brge	.+10     	; 0x2cce <GPIO_setupPinDirection+0x4e>
    2cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	71 f0       	breq	.+28     	; 0x2ce8 <GPIO_setupPinDirection+0x68>
    2ccc:	bc c0       	rjmp	.+376    	; 0x2e46 <GPIO_setupPinDirection+0x1c6>
    2cce:	2c 81       	ldd	r18, Y+4	; 0x04
    2cd0:	3d 81       	ldd	r19, Y+5	; 0x05
    2cd2:	22 30       	cpi	r18, 0x02	; 2
    2cd4:	31 05       	cpc	r19, r1
    2cd6:	09 f4       	brne	.+2      	; 0x2cda <GPIO_setupPinDirection+0x5a>
    2cd8:	5f c0       	rjmp	.+190    	; 0x2d98 <GPIO_setupPinDirection+0x118>
    2cda:	8c 81       	ldd	r24, Y+4	; 0x04
    2cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cde:	83 30       	cpi	r24, 0x03	; 3
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	09 f4       	brne	.+2      	; 0x2ce6 <GPIO_setupPinDirection+0x66>
    2ce4:	85 c0       	rjmp	.+266    	; 0x2df0 <GPIO_setupPinDirection+0x170>
    2ce6:	af c0       	rjmp	.+350    	; 0x2e46 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	81 30       	cpi	r24, 0x01	; 1
    2cec:	a1 f4       	brne	.+40     	; 0x2d16 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2cee:	aa e3       	ldi	r26, 0x3A	; 58
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	ea e3       	ldi	r30, 0x3A	; 58
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	48 2f       	mov	r20, r24
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	02 2e       	mov	r0, r18
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <GPIO_setupPinDirection+0x8c>
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	0a 94       	dec	r0
    2d0e:	e2 f7       	brpl	.-8      	; 0x2d08 <GPIO_setupPinDirection+0x88>
    2d10:	84 2b       	or	r24, r20
    2d12:	8c 93       	st	X, r24
    2d14:	98 c0       	rjmp	.+304    	; 0x2e46 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2d16:	aa e3       	ldi	r26, 0x3A	; 58
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	ea e3       	ldi	r30, 0x3A	; 58
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	48 2f       	mov	r20, r24
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	02 2e       	mov	r0, r18
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <GPIO_setupPinDirection+0xb4>
    2d30:	88 0f       	add	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	0a 94       	dec	r0
    2d36:	e2 f7       	brpl	.-8      	; 0x2d30 <GPIO_setupPinDirection+0xb0>
    2d38:	80 95       	com	r24
    2d3a:	84 23       	and	r24, r20
    2d3c:	8c 93       	st	X, r24
    2d3e:	83 c0       	rjmp	.+262    	; 0x2e46 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	81 30       	cpi	r24, 0x01	; 1
    2d44:	a1 f4       	brne	.+40     	; 0x2d6e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2d46:	a7 e3       	ldi	r26, 0x37	; 55
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e7 e3       	ldi	r30, 0x37	; 55
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	48 2f       	mov	r20, r24
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	28 2f       	mov	r18, r24
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	02 2e       	mov	r0, r18
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <GPIO_setupPinDirection+0xe4>
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	0a 94       	dec	r0
    2d66:	e2 f7       	brpl	.-8      	; 0x2d60 <GPIO_setupPinDirection+0xe0>
    2d68:	84 2b       	or	r24, r20
    2d6a:	8c 93       	st	X, r24
    2d6c:	6c c0       	rjmp	.+216    	; 0x2e46 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2d6e:	a7 e3       	ldi	r26, 0x37	; 55
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	e7 e3       	ldi	r30, 0x37	; 55
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	48 2f       	mov	r20, r24
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	02 2e       	mov	r0, r18
    2d86:	02 c0       	rjmp	.+4      	; 0x2d8c <GPIO_setupPinDirection+0x10c>
    2d88:	88 0f       	add	r24, r24
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	0a 94       	dec	r0
    2d8e:	e2 f7       	brpl	.-8      	; 0x2d88 <GPIO_setupPinDirection+0x108>
    2d90:	80 95       	com	r24
    2d92:	84 23       	and	r24, r20
    2d94:	8c 93       	st	X, r24
    2d96:	57 c0       	rjmp	.+174    	; 0x2e46 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	81 30       	cpi	r24, 0x01	; 1
    2d9c:	a1 f4       	brne	.+40     	; 0x2dc6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2d9e:	a4 e3       	ldi	r26, 0x34	; 52
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	e4 e3       	ldi	r30, 0x34	; 52
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	48 2f       	mov	r20, r24
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	02 2e       	mov	r0, r18
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <GPIO_setupPinDirection+0x13c>
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	0a 94       	dec	r0
    2dbe:	e2 f7       	brpl	.-8      	; 0x2db8 <GPIO_setupPinDirection+0x138>
    2dc0:	84 2b       	or	r24, r20
    2dc2:	8c 93       	st	X, r24
    2dc4:	40 c0       	rjmp	.+128    	; 0x2e46 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2dc6:	a4 e3       	ldi	r26, 0x34	; 52
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e4 e3       	ldi	r30, 0x34	; 52
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	48 2f       	mov	r20, r24
    2dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd4:	28 2f       	mov	r18, r24
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	02 2e       	mov	r0, r18
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <GPIO_setupPinDirection+0x164>
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	0a 94       	dec	r0
    2de6:	e2 f7       	brpl	.-8      	; 0x2de0 <GPIO_setupPinDirection+0x160>
    2de8:	80 95       	com	r24
    2dea:	84 23       	and	r24, r20
    2dec:	8c 93       	st	X, r24
    2dee:	2b c0       	rjmp	.+86     	; 0x2e46 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	81 30       	cpi	r24, 0x01	; 1
    2df4:	a1 f4       	brne	.+40     	; 0x2e1e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2df6:	a1 e3       	ldi	r26, 0x31	; 49
    2df8:	b0 e0       	ldi	r27, 0x00	; 0
    2dfa:	e1 e3       	ldi	r30, 0x31	; 49
    2dfc:	f0 e0       	ldi	r31, 0x00	; 0
    2dfe:	80 81       	ld	r24, Z
    2e00:	48 2f       	mov	r20, r24
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	28 2f       	mov	r18, r24
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	02 2e       	mov	r0, r18
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <GPIO_setupPinDirection+0x194>
    2e10:	88 0f       	add	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	0a 94       	dec	r0
    2e16:	e2 f7       	brpl	.-8      	; 0x2e10 <GPIO_setupPinDirection+0x190>
    2e18:	84 2b       	or	r24, r20
    2e1a:	8c 93       	st	X, r24
    2e1c:	14 c0       	rjmp	.+40     	; 0x2e46 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2e1e:	a1 e3       	ldi	r26, 0x31	; 49
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	e1 e3       	ldi	r30, 0x31	; 49
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	48 2f       	mov	r20, r24
    2e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2c:	28 2f       	mov	r18, r24
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	02 2e       	mov	r0, r18
    2e36:	02 c0       	rjmp	.+4      	; 0x2e3c <GPIO_setupPinDirection+0x1bc>
    2e38:	88 0f       	add	r24, r24
    2e3a:	99 1f       	adc	r25, r25
    2e3c:	0a 94       	dec	r0
    2e3e:	e2 f7       	brpl	.-8      	; 0x2e38 <GPIO_setupPinDirection+0x1b8>
    2e40:	80 95       	com	r24
    2e42:	84 23       	and	r24, r20
    2e44:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	08 95       	ret

00002e56 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	00 d0       	rcall	.+0      	; 0x2e5c <GPIO_writePin+0x6>
    2e5c:	00 d0       	rcall	.+0      	; 0x2e5e <GPIO_writePin+0x8>
    2e5e:	0f 92       	push	r0
    2e60:	cd b7       	in	r28, 0x3d	; 61
    2e62:	de b7       	in	r29, 0x3e	; 62
    2e64:	89 83       	std	Y+1, r24	; 0x01
    2e66:	6a 83       	std	Y+2, r22	; 0x02
    2e68:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	88 30       	cpi	r24, 0x08	; 8
    2e6e:	08 f0       	brcs	.+2      	; 0x2e72 <GPIO_writePin+0x1c>
    2e70:	d5 c0       	rjmp	.+426    	; 0x301c <GPIO_writePin+0x1c6>
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	84 30       	cpi	r24, 0x04	; 4
    2e76:	08 f0       	brcs	.+2      	; 0x2e7a <GPIO_writePin+0x24>
    2e78:	d1 c0       	rjmp	.+418    	; 0x301c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	3d 83       	std	Y+5, r19	; 0x05
    2e82:	2c 83       	std	Y+4, r18	; 0x04
    2e84:	8c 81       	ldd	r24, Y+4	; 0x04
    2e86:	9d 81       	ldd	r25, Y+5	; 0x05
    2e88:	81 30       	cpi	r24, 0x01	; 1
    2e8a:	91 05       	cpc	r25, r1
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <GPIO_writePin+0x3a>
    2e8e:	43 c0       	rjmp	.+134    	; 0x2f16 <GPIO_writePin+0xc0>
    2e90:	2c 81       	ldd	r18, Y+4	; 0x04
    2e92:	3d 81       	ldd	r19, Y+5	; 0x05
    2e94:	22 30       	cpi	r18, 0x02	; 2
    2e96:	31 05       	cpc	r19, r1
    2e98:	2c f4       	brge	.+10     	; 0x2ea4 <GPIO_writePin+0x4e>
    2e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9e:	00 97       	sbiw	r24, 0x00	; 0
    2ea0:	71 f0       	breq	.+28     	; 0x2ebe <GPIO_writePin+0x68>
    2ea2:	bc c0       	rjmp	.+376    	; 0x301c <GPIO_writePin+0x1c6>
    2ea4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ea6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ea8:	22 30       	cpi	r18, 0x02	; 2
    2eaa:	31 05       	cpc	r19, r1
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <GPIO_writePin+0x5a>
    2eae:	5f c0       	rjmp	.+190    	; 0x2f6e <GPIO_writePin+0x118>
    2eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb4:	83 30       	cpi	r24, 0x03	; 3
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <GPIO_writePin+0x66>
    2eba:	85 c0       	rjmp	.+266    	; 0x2fc6 <GPIO_writePin+0x170>
    2ebc:	af c0       	rjmp	.+350    	; 0x301c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	81 30       	cpi	r24, 0x01	; 1
    2ec2:	a1 f4       	brne	.+40     	; 0x2eec <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2ec4:	ab e3       	ldi	r26, 0x3B	; 59
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	eb e3       	ldi	r30, 0x3B	; 59
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	80 81       	ld	r24, Z
    2ece:	48 2f       	mov	r20, r24
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	28 2f       	mov	r18, r24
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	81 e0       	ldi	r24, 0x01	; 1
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	02 2e       	mov	r0, r18
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <GPIO_writePin+0x8c>
    2ede:	88 0f       	add	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	0a 94       	dec	r0
    2ee4:	e2 f7       	brpl	.-8      	; 0x2ede <GPIO_writePin+0x88>
    2ee6:	84 2b       	or	r24, r20
    2ee8:	8c 93       	st	X, r24
    2eea:	98 c0       	rjmp	.+304    	; 0x301c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2eec:	ab e3       	ldi	r26, 0x3B	; 59
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	eb e3       	ldi	r30, 0x3B	; 59
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	48 2f       	mov	r20, r24
    2ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    2efa:	28 2f       	mov	r18, r24
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	02 2e       	mov	r0, r18
    2f04:	02 c0       	rjmp	.+4      	; 0x2f0a <GPIO_writePin+0xb4>
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	0a 94       	dec	r0
    2f0c:	e2 f7       	brpl	.-8      	; 0x2f06 <GPIO_writePin+0xb0>
    2f0e:	80 95       	com	r24
    2f10:	84 23       	and	r24, r20
    2f12:	8c 93       	st	X, r24
    2f14:	83 c0       	rjmp	.+262    	; 0x301c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	81 30       	cpi	r24, 0x01	; 1
    2f1a:	a1 f4       	brne	.+40     	; 0x2f44 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2f1c:	a8 e3       	ldi	r26, 0x38	; 56
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	e8 e3       	ldi	r30, 0x38	; 56
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	80 81       	ld	r24, Z
    2f26:	48 2f       	mov	r20, r24
    2f28:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2a:	28 2f       	mov	r18, r24
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	02 2e       	mov	r0, r18
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <GPIO_writePin+0xe4>
    2f36:	88 0f       	add	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	0a 94       	dec	r0
    2f3c:	e2 f7       	brpl	.-8      	; 0x2f36 <GPIO_writePin+0xe0>
    2f3e:	84 2b       	or	r24, r20
    2f40:	8c 93       	st	X, r24
    2f42:	6c c0       	rjmp	.+216    	; 0x301c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    2f44:	a8 e3       	ldi	r26, 0x38	; 56
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e8 e3       	ldi	r30, 0x38	; 56
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	48 2f       	mov	r20, r24
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	28 2f       	mov	r18, r24
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	02 2e       	mov	r0, r18
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <GPIO_writePin+0x10c>
    2f5e:	88 0f       	add	r24, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	0a 94       	dec	r0
    2f64:	e2 f7       	brpl	.-8      	; 0x2f5e <GPIO_writePin+0x108>
    2f66:	80 95       	com	r24
    2f68:	84 23       	and	r24, r20
    2f6a:	8c 93       	st	X, r24
    2f6c:	57 c0       	rjmp	.+174    	; 0x301c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	81 30       	cpi	r24, 0x01	; 1
    2f72:	a1 f4       	brne	.+40     	; 0x2f9c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2f74:	a5 e3       	ldi	r26, 0x35	; 53
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	e5 e3       	ldi	r30, 0x35	; 53
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	48 2f       	mov	r20, r24
    2f80:	8a 81       	ldd	r24, Y+2	; 0x02
    2f82:	28 2f       	mov	r18, r24
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	02 2e       	mov	r0, r18
    2f8c:	02 c0       	rjmp	.+4      	; 0x2f92 <GPIO_writePin+0x13c>
    2f8e:	88 0f       	add	r24, r24
    2f90:	99 1f       	adc	r25, r25
    2f92:	0a 94       	dec	r0
    2f94:	e2 f7       	brpl	.-8      	; 0x2f8e <GPIO_writePin+0x138>
    2f96:	84 2b       	or	r24, r20
    2f98:	8c 93       	st	X, r24
    2f9a:	40 c0       	rjmp	.+128    	; 0x301c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2f9c:	a5 e3       	ldi	r26, 0x35	; 53
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e5 e3       	ldi	r30, 0x35	; 53
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	48 2f       	mov	r20, r24
    2fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2faa:	28 2f       	mov	r18, r24
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	02 2e       	mov	r0, r18
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <GPIO_writePin+0x164>
    2fb6:	88 0f       	add	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	0a 94       	dec	r0
    2fbc:	e2 f7       	brpl	.-8      	; 0x2fb6 <GPIO_writePin+0x160>
    2fbe:	80 95       	com	r24
    2fc0:	84 23       	and	r24, r20
    2fc2:	8c 93       	st	X, r24
    2fc4:	2b c0       	rjmp	.+86     	; 0x301c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc8:	81 30       	cpi	r24, 0x01	; 1
    2fca:	a1 f4       	brne	.+40     	; 0x2ff4 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2fcc:	a2 e3       	ldi	r26, 0x32	; 50
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	e2 e3       	ldi	r30, 0x32	; 50
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	80 81       	ld	r24, Z
    2fd6:	48 2f       	mov	r20, r24
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	28 2f       	mov	r18, r24
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	02 2e       	mov	r0, r18
    2fe4:	02 c0       	rjmp	.+4      	; 0x2fea <GPIO_writePin+0x194>
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	0a 94       	dec	r0
    2fec:	e2 f7       	brpl	.-8      	; 0x2fe6 <GPIO_writePin+0x190>
    2fee:	84 2b       	or	r24, r20
    2ff0:	8c 93       	st	X, r24
    2ff2:	14 c0       	rjmp	.+40     	; 0x301c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2ff4:	a2 e3       	ldi	r26, 0x32	; 50
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	e2 e3       	ldi	r30, 0x32	; 50
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	48 2f       	mov	r20, r24
    3000:	8a 81       	ldd	r24, Y+2	; 0x02
    3002:	28 2f       	mov	r18, r24
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	02 2e       	mov	r0, r18
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <GPIO_writePin+0x1bc>
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	0a 94       	dec	r0
    3014:	e2 f7       	brpl	.-8      	; 0x300e <GPIO_writePin+0x1b8>
    3016:	80 95       	com	r24
    3018:	84 23       	and	r24, r20
    301a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    301c:	0f 90       	pop	r0
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	08 95       	ret

0000302c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    302c:	df 93       	push	r29
    302e:	cf 93       	push	r28
    3030:	00 d0       	rcall	.+0      	; 0x3032 <GPIO_readPin+0x6>
    3032:	00 d0       	rcall	.+0      	; 0x3034 <GPIO_readPin+0x8>
    3034:	0f 92       	push	r0
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	8a 83       	std	Y+2, r24	; 0x02
    303c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    303e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	88 30       	cpi	r24, 0x08	; 8
    3044:	08 f0       	brcs	.+2      	; 0x3048 <GPIO_readPin+0x1c>
    3046:	84 c0       	rjmp	.+264    	; 0x3150 <GPIO_readPin+0x124>
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	84 30       	cpi	r24, 0x04	; 4
    304c:	08 f0       	brcs	.+2      	; 0x3050 <GPIO_readPin+0x24>
    304e:	80 c0       	rjmp	.+256    	; 0x3150 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	28 2f       	mov	r18, r24
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	3d 83       	std	Y+5, r19	; 0x05
    3058:	2c 83       	std	Y+4, r18	; 0x04
    305a:	4c 81       	ldd	r20, Y+4	; 0x04
    305c:	5d 81       	ldd	r21, Y+5	; 0x05
    305e:	41 30       	cpi	r20, 0x01	; 1
    3060:	51 05       	cpc	r21, r1
    3062:	79 f1       	breq	.+94     	; 0x30c2 <GPIO_readPin+0x96>
    3064:	8c 81       	ldd	r24, Y+4	; 0x04
    3066:	9d 81       	ldd	r25, Y+5	; 0x05
    3068:	82 30       	cpi	r24, 0x02	; 2
    306a:	91 05       	cpc	r25, r1
    306c:	34 f4       	brge	.+12     	; 0x307a <GPIO_readPin+0x4e>
    306e:	2c 81       	ldd	r18, Y+4	; 0x04
    3070:	3d 81       	ldd	r19, Y+5	; 0x05
    3072:	21 15       	cp	r18, r1
    3074:	31 05       	cpc	r19, r1
    3076:	69 f0       	breq	.+26     	; 0x3092 <GPIO_readPin+0x66>
    3078:	6b c0       	rjmp	.+214    	; 0x3150 <GPIO_readPin+0x124>
    307a:	4c 81       	ldd	r20, Y+4	; 0x04
    307c:	5d 81       	ldd	r21, Y+5	; 0x05
    307e:	42 30       	cpi	r20, 0x02	; 2
    3080:	51 05       	cpc	r21, r1
    3082:	b9 f1       	breq	.+110    	; 0x30f2 <GPIO_readPin+0xc6>
    3084:	8c 81       	ldd	r24, Y+4	; 0x04
    3086:	9d 81       	ldd	r25, Y+5	; 0x05
    3088:	83 30       	cpi	r24, 0x03	; 3
    308a:	91 05       	cpc	r25, r1
    308c:	09 f4       	brne	.+2      	; 0x3090 <GPIO_readPin+0x64>
    308e:	49 c0       	rjmp	.+146    	; 0x3122 <GPIO_readPin+0xf6>
    3090:	5f c0       	rjmp	.+190    	; 0x3150 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    3092:	e9 e3       	ldi	r30, 0x39	; 57
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	80 81       	ld	r24, Z
    3098:	28 2f       	mov	r18, r24
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	8b 81       	ldd	r24, Y+3	; 0x03
    309e:	88 2f       	mov	r24, r24
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	a9 01       	movw	r20, r18
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <GPIO_readPin+0x7e>
    30a6:	55 95       	asr	r21
    30a8:	47 95       	ror	r20
    30aa:	8a 95       	dec	r24
    30ac:	e2 f7       	brpl	.-8      	; 0x30a6 <GPIO_readPin+0x7a>
    30ae:	ca 01       	movw	r24, r20
    30b0:	81 70       	andi	r24, 0x01	; 1
    30b2:	90 70       	andi	r25, 0x00	; 0
    30b4:	88 23       	and	r24, r24
    30b6:	19 f0       	breq	.+6      	; 0x30be <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	49 c0       	rjmp	.+146    	; 0x3150 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    30be:	19 82       	std	Y+1, r1	; 0x01
    30c0:	47 c0       	rjmp	.+142    	; 0x3150 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    30c2:	e6 e3       	ldi	r30, 0x36	; 54
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	28 2f       	mov	r18, r24
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	8b 81       	ldd	r24, Y+3	; 0x03
    30ce:	88 2f       	mov	r24, r24
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	a9 01       	movw	r20, r18
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <GPIO_readPin+0xae>
    30d6:	55 95       	asr	r21
    30d8:	47 95       	ror	r20
    30da:	8a 95       	dec	r24
    30dc:	e2 f7       	brpl	.-8      	; 0x30d6 <GPIO_readPin+0xaa>
    30de:	ca 01       	movw	r24, r20
    30e0:	81 70       	andi	r24, 0x01	; 1
    30e2:	90 70       	andi	r25, 0x00	; 0
    30e4:	88 23       	and	r24, r24
    30e6:	19 f0       	breq	.+6      	; 0x30ee <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	89 83       	std	Y+1, r24	; 0x01
    30ec:	31 c0       	rjmp	.+98     	; 0x3150 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    30ee:	19 82       	std	Y+1, r1	; 0x01
    30f0:	2f c0       	rjmp	.+94     	; 0x3150 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    30f2:	e3 e3       	ldi	r30, 0x33	; 51
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	28 2f       	mov	r18, r24
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	88 2f       	mov	r24, r24
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	a9 01       	movw	r20, r18
    3104:	02 c0       	rjmp	.+4      	; 0x310a <GPIO_readPin+0xde>
    3106:	55 95       	asr	r21
    3108:	47 95       	ror	r20
    310a:	8a 95       	dec	r24
    310c:	e2 f7       	brpl	.-8      	; 0x3106 <GPIO_readPin+0xda>
    310e:	ca 01       	movw	r24, r20
    3110:	81 70       	andi	r24, 0x01	; 1
    3112:	90 70       	andi	r25, 0x00	; 0
    3114:	88 23       	and	r24, r24
    3116:	19 f0       	breq	.+6      	; 0x311e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	89 83       	std	Y+1, r24	; 0x01
    311c:	19 c0       	rjmp	.+50     	; 0x3150 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    311e:	19 82       	std	Y+1, r1	; 0x01
    3120:	17 c0       	rjmp	.+46     	; 0x3150 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    3122:	e0 e3       	ldi	r30, 0x30	; 48
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	8b 81       	ldd	r24, Y+3	; 0x03
    312e:	88 2f       	mov	r24, r24
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	a9 01       	movw	r20, r18
    3134:	02 c0       	rjmp	.+4      	; 0x313a <GPIO_readPin+0x10e>
    3136:	55 95       	asr	r21
    3138:	47 95       	ror	r20
    313a:	8a 95       	dec	r24
    313c:	e2 f7       	brpl	.-8      	; 0x3136 <GPIO_readPin+0x10a>
    313e:	ca 01       	movw	r24, r20
    3140:	81 70       	andi	r24, 0x01	; 1
    3142:	90 70       	andi	r25, 0x00	; 0
    3144:	88 23       	and	r24, r24
    3146:	19 f0       	breq	.+6      	; 0x314e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	89 83       	std	Y+1, r24	; 0x01
    314c:	01 c0       	rjmp	.+2      	; 0x3150 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    314e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    3150:	89 81       	ldd	r24, Y+1	; 0x01
}
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	0f 90       	pop	r0
    3158:	0f 90       	pop	r0
    315a:	0f 90       	pop	r0
    315c:	cf 91       	pop	r28
    315e:	df 91       	pop	r29
    3160:	08 95       	ret

00003162 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    3162:	df 93       	push	r29
    3164:	cf 93       	push	r28
    3166:	00 d0       	rcall	.+0      	; 0x3168 <GPIO_setupPortDirection+0x6>
    3168:	00 d0       	rcall	.+0      	; 0x316a <GPIO_setupPortDirection+0x8>
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	89 83       	std	Y+1, r24	; 0x01
    3170:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	84 30       	cpi	r24, 0x04	; 4
    3176:	90 f5       	brcc	.+100    	; 0x31dc <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	28 2f       	mov	r18, r24
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	3c 83       	std	Y+4, r19	; 0x04
    3180:	2b 83       	std	Y+3, r18	; 0x03
    3182:	8b 81       	ldd	r24, Y+3	; 0x03
    3184:	9c 81       	ldd	r25, Y+4	; 0x04
    3186:	81 30       	cpi	r24, 0x01	; 1
    3188:	91 05       	cpc	r25, r1
    318a:	d1 f0       	breq	.+52     	; 0x31c0 <GPIO_setupPortDirection+0x5e>
    318c:	2b 81       	ldd	r18, Y+3	; 0x03
    318e:	3c 81       	ldd	r19, Y+4	; 0x04
    3190:	22 30       	cpi	r18, 0x02	; 2
    3192:	31 05       	cpc	r19, r1
    3194:	2c f4       	brge	.+10     	; 0x31a0 <GPIO_setupPortDirection+0x3e>
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	9c 81       	ldd	r25, Y+4	; 0x04
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	61 f0       	breq	.+24     	; 0x31b6 <GPIO_setupPortDirection+0x54>
    319e:	1e c0       	rjmp	.+60     	; 0x31dc <GPIO_setupPortDirection+0x7a>
    31a0:	2b 81       	ldd	r18, Y+3	; 0x03
    31a2:	3c 81       	ldd	r19, Y+4	; 0x04
    31a4:	22 30       	cpi	r18, 0x02	; 2
    31a6:	31 05       	cpc	r19, r1
    31a8:	81 f0       	breq	.+32     	; 0x31ca <GPIO_setupPortDirection+0x68>
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	9c 81       	ldd	r25, Y+4	; 0x04
    31ae:	83 30       	cpi	r24, 0x03	; 3
    31b0:	91 05       	cpc	r25, r1
    31b2:	81 f0       	breq	.+32     	; 0x31d4 <GPIO_setupPortDirection+0x72>
    31b4:	13 c0       	rjmp	.+38     	; 0x31dc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    31b6:	ea e3       	ldi	r30, 0x3A	; 58
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	8a 81       	ldd	r24, Y+2	; 0x02
    31bc:	80 83       	st	Z, r24
    31be:	0e c0       	rjmp	.+28     	; 0x31dc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    31c0:	e7 e3       	ldi	r30, 0x37	; 55
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	80 83       	st	Z, r24
    31c8:	09 c0       	rjmp	.+18     	; 0x31dc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    31ca:	e4 e3       	ldi	r30, 0x34	; 52
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	80 83       	st	Z, r24
    31d2:	04 c0       	rjmp	.+8      	; 0x31dc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    31d4:	e1 e3       	ldi	r30, 0x31	; 49
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	8a 81       	ldd	r24, Y+2	; 0x02
    31da:	80 83       	st	Z, r24
			break;
		}
	}
}
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	cf 91       	pop	r28
    31e6:	df 91       	pop	r29
    31e8:	08 95       	ret

000031ea <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    31ea:	df 93       	push	r29
    31ec:	cf 93       	push	r28
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <GPIO_writePort+0x6>
    31f0:	00 d0       	rcall	.+0      	; 0x31f2 <GPIO_writePort+0x8>
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	89 83       	std	Y+1, r24	; 0x01
    31f8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	84 30       	cpi	r24, 0x04	; 4
    31fe:	90 f5       	brcc	.+100    	; 0x3264 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	28 2f       	mov	r18, r24
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	3c 83       	std	Y+4, r19	; 0x04
    3208:	2b 83       	std	Y+3, r18	; 0x03
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	9c 81       	ldd	r25, Y+4	; 0x04
    320e:	81 30       	cpi	r24, 0x01	; 1
    3210:	91 05       	cpc	r25, r1
    3212:	d1 f0       	breq	.+52     	; 0x3248 <GPIO_writePort+0x5e>
    3214:	2b 81       	ldd	r18, Y+3	; 0x03
    3216:	3c 81       	ldd	r19, Y+4	; 0x04
    3218:	22 30       	cpi	r18, 0x02	; 2
    321a:	31 05       	cpc	r19, r1
    321c:	2c f4       	brge	.+10     	; 0x3228 <GPIO_writePort+0x3e>
    321e:	8b 81       	ldd	r24, Y+3	; 0x03
    3220:	9c 81       	ldd	r25, Y+4	; 0x04
    3222:	00 97       	sbiw	r24, 0x00	; 0
    3224:	61 f0       	breq	.+24     	; 0x323e <GPIO_writePort+0x54>
    3226:	1e c0       	rjmp	.+60     	; 0x3264 <GPIO_writePort+0x7a>
    3228:	2b 81       	ldd	r18, Y+3	; 0x03
    322a:	3c 81       	ldd	r19, Y+4	; 0x04
    322c:	22 30       	cpi	r18, 0x02	; 2
    322e:	31 05       	cpc	r19, r1
    3230:	81 f0       	breq	.+32     	; 0x3252 <GPIO_writePort+0x68>
    3232:	8b 81       	ldd	r24, Y+3	; 0x03
    3234:	9c 81       	ldd	r25, Y+4	; 0x04
    3236:	83 30       	cpi	r24, 0x03	; 3
    3238:	91 05       	cpc	r25, r1
    323a:	81 f0       	breq	.+32     	; 0x325c <GPIO_writePort+0x72>
    323c:	13 c0       	rjmp	.+38     	; 0x3264 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    323e:	eb e3       	ldi	r30, 0x3B	; 59
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	8a 81       	ldd	r24, Y+2	; 0x02
    3244:	80 83       	st	Z, r24
    3246:	0e c0       	rjmp	.+28     	; 0x3264 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    3248:	e8 e3       	ldi	r30, 0x38	; 56
    324a:	f0 e0       	ldi	r31, 0x00	; 0
    324c:	8a 81       	ldd	r24, Y+2	; 0x02
    324e:	80 83       	st	Z, r24
    3250:	09 c0       	rjmp	.+18     	; 0x3264 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    3252:	e5 e3       	ldi	r30, 0x35	; 53
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	8a 81       	ldd	r24, Y+2	; 0x02
    3258:	80 83       	st	Z, r24
    325a:	04 c0       	rjmp	.+8      	; 0x3264 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    325c:	e2 e3       	ldi	r30, 0x32	; 50
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	80 83       	st	Z, r24
			break;
		}
	}
}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	cf 91       	pop	r28
    326e:	df 91       	pop	r29
    3270:	08 95       	ret

00003272 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    3272:	df 93       	push	r29
    3274:	cf 93       	push	r28
    3276:	00 d0       	rcall	.+0      	; 0x3278 <GPIO_readPort+0x6>
    3278:	00 d0       	rcall	.+0      	; 0x327a <GPIO_readPort+0x8>
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    3280:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	84 30       	cpi	r24, 0x04	; 4
    3286:	90 f5       	brcc	.+100    	; 0x32ec <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    3288:	8a 81       	ldd	r24, Y+2	; 0x02
    328a:	28 2f       	mov	r18, r24
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	3c 83       	std	Y+4, r19	; 0x04
    3290:	2b 83       	std	Y+3, r18	; 0x03
    3292:	8b 81       	ldd	r24, Y+3	; 0x03
    3294:	9c 81       	ldd	r25, Y+4	; 0x04
    3296:	81 30       	cpi	r24, 0x01	; 1
    3298:	91 05       	cpc	r25, r1
    329a:	d1 f0       	breq	.+52     	; 0x32d0 <GPIO_readPort+0x5e>
    329c:	2b 81       	ldd	r18, Y+3	; 0x03
    329e:	3c 81       	ldd	r19, Y+4	; 0x04
    32a0:	22 30       	cpi	r18, 0x02	; 2
    32a2:	31 05       	cpc	r19, r1
    32a4:	2c f4       	brge	.+10     	; 0x32b0 <GPIO_readPort+0x3e>
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	9c 81       	ldd	r25, Y+4	; 0x04
    32aa:	00 97       	sbiw	r24, 0x00	; 0
    32ac:	61 f0       	breq	.+24     	; 0x32c6 <GPIO_readPort+0x54>
    32ae:	1e c0       	rjmp	.+60     	; 0x32ec <GPIO_readPort+0x7a>
    32b0:	2b 81       	ldd	r18, Y+3	; 0x03
    32b2:	3c 81       	ldd	r19, Y+4	; 0x04
    32b4:	22 30       	cpi	r18, 0x02	; 2
    32b6:	31 05       	cpc	r19, r1
    32b8:	81 f0       	breq	.+32     	; 0x32da <GPIO_readPort+0x68>
    32ba:	8b 81       	ldd	r24, Y+3	; 0x03
    32bc:	9c 81       	ldd	r25, Y+4	; 0x04
    32be:	83 30       	cpi	r24, 0x03	; 3
    32c0:	91 05       	cpc	r25, r1
    32c2:	81 f0       	breq	.+32     	; 0x32e4 <GPIO_readPort+0x72>
    32c4:	13 c0       	rjmp	.+38     	; 0x32ec <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    32c6:	e9 e3       	ldi	r30, 0x39	; 57
    32c8:	f0 e0       	ldi	r31, 0x00	; 0
    32ca:	80 81       	ld	r24, Z
    32cc:	89 83       	std	Y+1, r24	; 0x01
    32ce:	0e c0       	rjmp	.+28     	; 0x32ec <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    32d0:	e6 e3       	ldi	r30, 0x36	; 54
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	89 83       	std	Y+1, r24	; 0x01
    32d8:	09 c0       	rjmp	.+18     	; 0x32ec <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    32da:	e3 e3       	ldi	r30, 0x33	; 51
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	04 c0       	rjmp	.+8      	; 0x32ec <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    32e4:	e0 e3       	ldi	r30, 0x30	; 48
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	80 81       	ld	r24, Z
    32ea:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <LCD_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void LCD_init(void)
{
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	2e 97       	sbiw	r28, 0x0e	; 14
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    3310:	82 e0       	ldi	r24, 0x02	; 2
    3312:	67 e0       	ldi	r22, 0x07	; 7
    3314:	41 e0       	ldi	r20, 0x01	; 1
    3316:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    331a:	82 e0       	ldi	r24, 0x02	; 2
    331c:	66 e0       	ldi	r22, 0x06	; 6
    331e:	41 e0       	ldi	r20, 0x01	; 1
    3320:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_setupPinDirection>
    3324:	80 e0       	ldi	r24, 0x00	; 0
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	a0 ea       	ldi	r26, 0xA0	; 160
    332a:	b1 e4       	ldi	r27, 0x41	; 65
    332c:	8b 87       	std	Y+11, r24	; 0x0b
    332e:	9c 87       	std	Y+12, r25	; 0x0c
    3330:	ad 87       	std	Y+13, r26	; 0x0d
    3332:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3334:	6b 85       	ldd	r22, Y+11	; 0x0b
    3336:	7c 85       	ldd	r23, Y+12	; 0x0c
    3338:	8d 85       	ldd	r24, Y+13	; 0x0d
    333a:	9e 85       	ldd	r25, Y+14	; 0x0e
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	4a ef       	ldi	r20, 0xFA	; 250
    3342:	54 e4       	ldi	r21, 0x44	; 68
    3344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	8f 83       	std	Y+7, r24	; 0x07
    334e:	98 87       	std	Y+8, r25	; 0x08
    3350:	a9 87       	std	Y+9, r26	; 0x09
    3352:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3354:	6f 81       	ldd	r22, Y+7	; 0x07
    3356:	78 85       	ldd	r23, Y+8	; 0x08
    3358:	89 85       	ldd	r24, Y+9	; 0x09
    335a:	9a 85       	ldd	r25, Y+10	; 0x0a
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	40 e8       	ldi	r20, 0x80	; 128
    3362:	5f e3       	ldi	r21, 0x3F	; 63
    3364:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3368:	88 23       	and	r24, r24
    336a:	2c f4       	brge	.+10     	; 0x3376 <LCD_init+0x7a>
		__ticks = 1;
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	9e 83       	std	Y+6, r25	; 0x06
    3372:	8d 83       	std	Y+5, r24	; 0x05
    3374:	3f c0       	rjmp	.+126    	; 0x33f4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    3376:	6f 81       	ldd	r22, Y+7	; 0x07
    3378:	78 85       	ldd	r23, Y+8	; 0x08
    337a:	89 85       	ldd	r24, Y+9	; 0x09
    337c:	9a 85       	ldd	r25, Y+10	; 0x0a
    337e:	20 e0       	ldi	r18, 0x00	; 0
    3380:	3f ef       	ldi	r19, 0xFF	; 255
    3382:	4f e7       	ldi	r20, 0x7F	; 127
    3384:	57 e4       	ldi	r21, 0x47	; 71
    3386:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    338a:	18 16       	cp	r1, r24
    338c:	4c f5       	brge	.+82     	; 0x33e0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    338e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3390:	7c 85       	ldd	r23, Y+12	; 0x0c
    3392:	8d 85       	ldd	r24, Y+13	; 0x0d
    3394:	9e 85       	ldd	r25, Y+14	; 0x0e
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	40 e2       	ldi	r20, 0x20	; 32
    339c:	51 e4       	ldi	r21, 0x41	; 65
    339e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	bc 01       	movw	r22, r24
    33a8:	cd 01       	movw	r24, r26
    33aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	9e 83       	std	Y+6, r25	; 0x06
    33b4:	8d 83       	std	Y+5, r24	; 0x05
    33b6:	0f c0       	rjmp	.+30     	; 0x33d6 <LCD_init+0xda>
    33b8:	88 ec       	ldi	r24, 0xC8	; 200
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	9c 83       	std	Y+4, r25	; 0x04
    33be:	8b 83       	std	Y+3, r24	; 0x03
    33c0:	8b 81       	ldd	r24, Y+3	; 0x03
    33c2:	9c 81       	ldd	r25, Y+4	; 0x04
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	f1 f7       	brne	.-4      	; 0x33c4 <LCD_init+0xc8>
    33c8:	9c 83       	std	Y+4, r25	; 0x04
    33ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33cc:	8d 81       	ldd	r24, Y+5	; 0x05
    33ce:	9e 81       	ldd	r25, Y+6	; 0x06
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	9e 83       	std	Y+6, r25	; 0x06
    33d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d6:	8d 81       	ldd	r24, Y+5	; 0x05
    33d8:	9e 81       	ldd	r25, Y+6	; 0x06
    33da:	00 97       	sbiw	r24, 0x00	; 0
    33dc:	69 f7       	brne	.-38     	; 0x33b8 <LCD_init+0xbc>
    33de:	14 c0       	rjmp	.+40     	; 0x3408 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33e0:	6f 81       	ldd	r22, Y+7	; 0x07
    33e2:	78 85       	ldd	r23, Y+8	; 0x08
    33e4:	89 85       	ldd	r24, Y+9	; 0x09
    33e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	9e 83       	std	Y+6, r25	; 0x06
    33f2:	8d 83       	std	Y+5, r24	; 0x05
    33f4:	8d 81       	ldd	r24, Y+5	; 0x05
    33f6:	9e 81       	ldd	r25, Y+6	; 0x06
    33f8:	9a 83       	std	Y+2, r25	; 0x02
    33fa:	89 83       	std	Y+1, r24	; 0x01
    33fc:	89 81       	ldd	r24, Y+1	; 0x01
    33fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3400:	01 97       	sbiw	r24, 0x01	; 1
    3402:	f1 f7       	brne	.-4      	; 0x3400 <LCD_init+0x104>
    3404:	9a 83       	std	Y+2, r25	; 0x02
    3406:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20); /* delay > 15ms for power sequence */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure the 4 pins for DB as output port */
	GPIO_setupPinDirection(LCD_DB_PORT_ID, LCD_DB4_PIN_ID, PIN_OUTPUT);
    3408:	82 e0       	ldi	r24, 0x02	; 2
    340a:	65 e0       	ldi	r22, 0x05	; 5
    340c:	41 e0       	ldi	r20, 0x01	; 1
    340e:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DB_PORT_ID, LCD_DB5_PIN_ID, PIN_OUTPUT);
    3412:	82 e0       	ldi	r24, 0x02	; 2
    3414:	64 e0       	ldi	r22, 0x04	; 4
    3416:	41 e0       	ldi	r20, 0x01	; 1
    3418:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DB_PORT_ID, LCD_DB6_PIN_ID, PIN_OUTPUT);
    341c:	82 e0       	ldi	r24, 0x02	; 2
    341e:	63 e0       	ldi	r22, 0x03	; 3
    3420:	41 e0       	ldi	r20, 0x01	; 1
    3422:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DB_PORT_ID, LCD_DB7_PIN_ID, PIN_OUTPUT);
    3426:	82 e0       	ldi	r24, 0x02	; 2
    3428:	62 e0       	ldi	r22, 0x02	; 2
    342a:	41 e0       	ldi	r20, 0x01	; 1
    342c:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    3430:	83 e3       	ldi	r24, 0x33	; 51
    3432:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    3436:	82 e3       	ldi	r24, 0x32	; 50
    3438:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_sendCommand>

	/* Initialize LCD command for 2 lines / 4-bit mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    343c:	88 e2       	ldi	r24, 0x28	; 40
    343e:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_sendCommand>
	/* Initialize LCD command for 2 lines / 8-bit mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* Cursor Off at the beginning */
    3442:	8c e0       	ldi	r24, 0x0C	; 12
    3444:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY); /* Clear screen at the beginning */
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_sendCommand>
}
    344e:	2e 96       	adiw	r28, 0x0e	; 14
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	08 95       	ret

00003460 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    3460:	0f 93       	push	r16
    3462:	1f 93       	push	r17
    3464:	df 93       	push	r29
    3466:	cf 93       	push	r28
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
    346c:	c3 56       	subi	r28, 0x63	; 99
    346e:	d0 40       	sbci	r29, 0x00	; 0
    3470:	0f b6       	in	r0, 0x3f	; 63
    3472:	f8 94       	cli
    3474:	de bf       	out	0x3e, r29	; 62
    3476:	0f be       	out	0x3f, r0	; 63
    3478:	cd bf       	out	0x3d, r28	; 61
    347a:	fe 01       	movw	r30, r28
    347c:	ed 59       	subi	r30, 0x9D	; 157
    347e:	ff 4f       	sbci	r31, 0xFF	; 255
    3480:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* making RS=0 (send command) */
    3482:	82 e0       	ldi	r24, 0x02	; 2
    3484:	67 e0       	ldi	r22, 0x07	; 7
    3486:	40 e0       	ldi	r20, 0x00	; 0
    3488:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    348c:	fe 01       	movw	r30, r28
    348e:	e1 5a       	subi	r30, 0xA1	; 161
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	80 e0       	ldi	r24, 0x00	; 0
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	a0 e8       	ldi	r26, 0x80	; 128
    3498:	bf e3       	ldi	r27, 0x3F	; 63
    349a:	80 83       	st	Z, r24
    349c:	91 83       	std	Z+1, r25	; 0x01
    349e:	a2 83       	std	Z+2, r26	; 0x02
    34a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34a2:	8e 01       	movw	r16, r28
    34a4:	05 5a       	subi	r16, 0xA5	; 165
    34a6:	1f 4f       	sbci	r17, 0xFF	; 255
    34a8:	fe 01       	movw	r30, r28
    34aa:	e1 5a       	subi	r30, 0xA1	; 161
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	60 81       	ld	r22, Z
    34b0:	71 81       	ldd	r23, Z+1	; 0x01
    34b2:	82 81       	ldd	r24, Z+2	; 0x02
    34b4:	93 81       	ldd	r25, Z+3	; 0x03
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	4a ef       	ldi	r20, 0xFA	; 250
    34bc:	54 e4       	ldi	r21, 0x44	; 68
    34be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	f8 01       	movw	r30, r16
    34c8:	80 83       	st	Z, r24
    34ca:	91 83       	std	Z+1, r25	; 0x01
    34cc:	a2 83       	std	Z+2, r26	; 0x02
    34ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34d0:	fe 01       	movw	r30, r28
    34d2:	e5 5a       	subi	r30, 0xA5	; 165
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	60 81       	ld	r22, Z
    34d8:	71 81       	ldd	r23, Z+1	; 0x01
    34da:	82 81       	ldd	r24, Z+2	; 0x02
    34dc:	93 81       	ldd	r25, Z+3	; 0x03
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	40 e8       	ldi	r20, 0x80	; 128
    34e4:	5f e3       	ldi	r21, 0x3F	; 63
    34e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34ea:	88 23       	and	r24, r24
    34ec:	44 f4       	brge	.+16     	; 0x34fe <LCD_sendCommand+0x9e>
		__ticks = 1;
    34ee:	fe 01       	movw	r30, r28
    34f0:	e7 5a       	subi	r30, 0xA7	; 167
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	91 83       	std	Z+1, r25	; 0x01
    34fa:	80 83       	st	Z, r24
    34fc:	64 c0       	rjmp	.+200    	; 0x35c6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    34fe:	fe 01       	movw	r30, r28
    3500:	e5 5a       	subi	r30, 0xA5	; 165
    3502:	ff 4f       	sbci	r31, 0xFF	; 255
    3504:	60 81       	ld	r22, Z
    3506:	71 81       	ldd	r23, Z+1	; 0x01
    3508:	82 81       	ldd	r24, Z+2	; 0x02
    350a:	93 81       	ldd	r25, Z+3	; 0x03
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	3f ef       	ldi	r19, 0xFF	; 255
    3510:	4f e7       	ldi	r20, 0x7F	; 127
    3512:	57 e4       	ldi	r21, 0x47	; 71
    3514:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3518:	18 16       	cp	r1, r24
    351a:	0c f0       	brlt	.+2      	; 0x351e <LCD_sendCommand+0xbe>
    351c:	43 c0       	rjmp	.+134    	; 0x35a4 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    351e:	fe 01       	movw	r30, r28
    3520:	e1 5a       	subi	r30, 0xA1	; 161
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	60 81       	ld	r22, Z
    3526:	71 81       	ldd	r23, Z+1	; 0x01
    3528:	82 81       	ldd	r24, Z+2	; 0x02
    352a:	93 81       	ldd	r25, Z+3	; 0x03
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e2       	ldi	r20, 0x20	; 32
    3532:	51 e4       	ldi	r21, 0x41	; 65
    3534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	8e 01       	movw	r16, r28
    353e:	07 5a       	subi	r16, 0xA7	; 167
    3540:	1f 4f       	sbci	r17, 0xFF	; 255
    3542:	bc 01       	movw	r22, r24
    3544:	cd 01       	movw	r24, r26
    3546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	f8 01       	movw	r30, r16
    3550:	91 83       	std	Z+1, r25	; 0x01
    3552:	80 83       	st	Z, r24
    3554:	1f c0       	rjmp	.+62     	; 0x3594 <LCD_sendCommand+0x134>
    3556:	fe 01       	movw	r30, r28
    3558:	e9 5a       	subi	r30, 0xA9	; 169
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	88 ec       	ldi	r24, 0xC8	; 200
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	91 83       	std	Z+1, r25	; 0x01
    3562:	80 83       	st	Z, r24
    3564:	fe 01       	movw	r30, r28
    3566:	e9 5a       	subi	r30, 0xA9	; 169
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	80 81       	ld	r24, Z
    356c:	91 81       	ldd	r25, Z+1	; 0x01
    356e:	01 97       	sbiw	r24, 0x01	; 1
    3570:	f1 f7       	brne	.-4      	; 0x356e <LCD_sendCommand+0x10e>
    3572:	fe 01       	movw	r30, r28
    3574:	e9 5a       	subi	r30, 0xA9	; 169
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	91 83       	std	Z+1, r25	; 0x01
    357a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357c:	de 01       	movw	r26, r28
    357e:	a7 5a       	subi	r26, 0xA7	; 167
    3580:	bf 4f       	sbci	r27, 0xFF	; 255
    3582:	fe 01       	movw	r30, r28
    3584:	e7 5a       	subi	r30, 0xA7	; 167
    3586:	ff 4f       	sbci	r31, 0xFF	; 255
    3588:	80 81       	ld	r24, Z
    358a:	91 81       	ldd	r25, Z+1	; 0x01
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	11 96       	adiw	r26, 0x01	; 1
    3590:	9c 93       	st	X, r25
    3592:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3594:	fe 01       	movw	r30, r28
    3596:	e7 5a       	subi	r30, 0xA7	; 167
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 81       	ld	r24, Z
    359c:	91 81       	ldd	r25, Z+1	; 0x01
    359e:	00 97       	sbiw	r24, 0x00	; 0
    35a0:	d1 f6       	brne	.-76     	; 0x3556 <LCD_sendCommand+0xf6>
    35a2:	27 c0       	rjmp	.+78     	; 0x35f2 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a4:	8e 01       	movw	r16, r28
    35a6:	07 5a       	subi	r16, 0xA7	; 167
    35a8:	1f 4f       	sbci	r17, 0xFF	; 255
    35aa:	fe 01       	movw	r30, r28
    35ac:	e5 5a       	subi	r30, 0xA5	; 165
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	60 81       	ld	r22, Z
    35b2:	71 81       	ldd	r23, Z+1	; 0x01
    35b4:	82 81       	ldd	r24, Z+2	; 0x02
    35b6:	93 81       	ldd	r25, Z+3	; 0x03
    35b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	f8 01       	movw	r30, r16
    35c2:	91 83       	std	Z+1, r25	; 0x01
    35c4:	80 83       	st	Z, r24
    35c6:	de 01       	movw	r26, r28
    35c8:	ab 5a       	subi	r26, 0xAB	; 171
    35ca:	bf 4f       	sbci	r27, 0xFF	; 255
    35cc:	fe 01       	movw	r30, r28
    35ce:	e7 5a       	subi	r30, 0xA7	; 167
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	80 81       	ld	r24, Z
    35d4:	91 81       	ldd	r25, Z+1	; 0x01
    35d6:	8d 93       	st	X+, r24
    35d8:	9c 93       	st	X, r25
    35da:	fe 01       	movw	r30, r28
    35dc:	eb 5a       	subi	r30, 0xAB	; 171
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	80 81       	ld	r24, Z
    35e2:	91 81       	ldd	r25, Z+1	; 0x01
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	f1 f7       	brne	.-4      	; 0x35e4 <LCD_sendCommand+0x184>
    35e8:	fe 01       	movw	r30, r28
    35ea:	eb 5a       	subi	r30, 0xAB	; 171
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	91 83       	std	Z+1, r25	; 0x01
    35f0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay Ts = 50nsec */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);	/* making the Enable(E) = 1 */
    35f2:	82 e0       	ldi	r24, 0x02	; 2
    35f4:	66 e0       	ldi	r22, 0x06	; 6
    35f6:	41 e0       	ldi	r20, 0x01	; 1
    35f8:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    35fc:	fe 01       	movw	r30, r28
    35fe:	ef 5a       	subi	r30, 0xAF	; 175
    3600:	ff 4f       	sbci	r31, 0xFF	; 255
    3602:	80 e0       	ldi	r24, 0x00	; 0
    3604:	90 e0       	ldi	r25, 0x00	; 0
    3606:	a0 e8       	ldi	r26, 0x80	; 128
    3608:	bf e3       	ldi	r27, 0x3F	; 63
    360a:	80 83       	st	Z, r24
    360c:	91 83       	std	Z+1, r25	; 0x01
    360e:	a2 83       	std	Z+2, r26	; 0x02
    3610:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3612:	8e 01       	movw	r16, r28
    3614:	03 5b       	subi	r16, 0xB3	; 179
    3616:	1f 4f       	sbci	r17, 0xFF	; 255
    3618:	fe 01       	movw	r30, r28
    361a:	ef 5a       	subi	r30, 0xAF	; 175
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	60 81       	ld	r22, Z
    3620:	71 81       	ldd	r23, Z+1	; 0x01
    3622:	82 81       	ldd	r24, Z+2	; 0x02
    3624:	93 81       	ldd	r25, Z+3	; 0x03
    3626:	20 e0       	ldi	r18, 0x00	; 0
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	4a ef       	ldi	r20, 0xFA	; 250
    362c:	54 e4       	ldi	r21, 0x44	; 68
    362e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3632:	dc 01       	movw	r26, r24
    3634:	cb 01       	movw	r24, r22
    3636:	f8 01       	movw	r30, r16
    3638:	80 83       	st	Z, r24
    363a:	91 83       	std	Z+1, r25	; 0x01
    363c:	a2 83       	std	Z+2, r26	; 0x02
    363e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3640:	fe 01       	movw	r30, r28
    3642:	e3 5b       	subi	r30, 0xB3	; 179
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	60 81       	ld	r22, Z
    3648:	71 81       	ldd	r23, Z+1	; 0x01
    364a:	82 81       	ldd	r24, Z+2	; 0x02
    364c:	93 81       	ldd	r25, Z+3	; 0x03
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	40 e8       	ldi	r20, 0x80	; 128
    3654:	5f e3       	ldi	r21, 0x3F	; 63
    3656:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    365a:	88 23       	and	r24, r24
    365c:	44 f4       	brge	.+16     	; 0x366e <LCD_sendCommand+0x20e>
		__ticks = 1;
    365e:	fe 01       	movw	r30, r28
    3660:	e5 5b       	subi	r30, 0xB5	; 181
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	91 83       	std	Z+1, r25	; 0x01
    366a:	80 83       	st	Z, r24
    366c:	64 c0       	rjmp	.+200    	; 0x3736 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    366e:	fe 01       	movw	r30, r28
    3670:	e3 5b       	subi	r30, 0xB3	; 179
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	60 81       	ld	r22, Z
    3676:	71 81       	ldd	r23, Z+1	; 0x01
    3678:	82 81       	ldd	r24, Z+2	; 0x02
    367a:	93 81       	ldd	r25, Z+3	; 0x03
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	3f ef       	ldi	r19, 0xFF	; 255
    3680:	4f e7       	ldi	r20, 0x7F	; 127
    3682:	57 e4       	ldi	r21, 0x47	; 71
    3684:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3688:	18 16       	cp	r1, r24
    368a:	0c f0       	brlt	.+2      	; 0x368e <LCD_sendCommand+0x22e>
    368c:	43 c0       	rjmp	.+134    	; 0x3714 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    368e:	fe 01       	movw	r30, r28
    3690:	ef 5a       	subi	r30, 0xAF	; 175
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	60 81       	ld	r22, Z
    3696:	71 81       	ldd	r23, Z+1	; 0x01
    3698:	82 81       	ldd	r24, Z+2	; 0x02
    369a:	93 81       	ldd	r25, Z+3	; 0x03
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	40 e2       	ldi	r20, 0x20	; 32
    36a2:	51 e4       	ldi	r21, 0x41	; 65
    36a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	8e 01       	movw	r16, r28
    36ae:	05 5b       	subi	r16, 0xB5	; 181
    36b0:	1f 4f       	sbci	r17, 0xFF	; 255
    36b2:	bc 01       	movw	r22, r24
    36b4:	cd 01       	movw	r24, r26
    36b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	f8 01       	movw	r30, r16
    36c0:	91 83       	std	Z+1, r25	; 0x01
    36c2:	80 83       	st	Z, r24
    36c4:	1f c0       	rjmp	.+62     	; 0x3704 <LCD_sendCommand+0x2a4>
    36c6:	fe 01       	movw	r30, r28
    36c8:	e7 5b       	subi	r30, 0xB7	; 183
    36ca:	ff 4f       	sbci	r31, 0xFF	; 255
    36cc:	88 ec       	ldi	r24, 0xC8	; 200
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	91 83       	std	Z+1, r25	; 0x01
    36d2:	80 83       	st	Z, r24
    36d4:	fe 01       	movw	r30, r28
    36d6:	e7 5b       	subi	r30, 0xB7	; 183
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	80 81       	ld	r24, Z
    36dc:	91 81       	ldd	r25, Z+1	; 0x01
    36de:	01 97       	sbiw	r24, 0x01	; 1
    36e0:	f1 f7       	brne	.-4      	; 0x36de <LCD_sendCommand+0x27e>
    36e2:	fe 01       	movw	r30, r28
    36e4:	e7 5b       	subi	r30, 0xB7	; 183
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	91 83       	std	Z+1, r25	; 0x01
    36ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ec:	de 01       	movw	r26, r28
    36ee:	a5 5b       	subi	r26, 0xB5	; 181
    36f0:	bf 4f       	sbci	r27, 0xFF	; 255
    36f2:	fe 01       	movw	r30, r28
    36f4:	e5 5b       	subi	r30, 0xB5	; 181
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	80 81       	ld	r24, Z
    36fa:	91 81       	ldd	r25, Z+1	; 0x01
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	11 96       	adiw	r26, 0x01	; 1
    3700:	9c 93       	st	X, r25
    3702:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3704:	fe 01       	movw	r30, r28
    3706:	e5 5b       	subi	r30, 0xB5	; 181
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	80 81       	ld	r24, Z
    370c:	91 81       	ldd	r25, Z+1	; 0x01
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	d1 f6       	brne	.-76     	; 0x36c6 <LCD_sendCommand+0x266>
    3712:	27 c0       	rjmp	.+78     	; 0x3762 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3714:	8e 01       	movw	r16, r28
    3716:	05 5b       	subi	r16, 0xB5	; 181
    3718:	1f 4f       	sbci	r17, 0xFF	; 255
    371a:	fe 01       	movw	r30, r28
    371c:	e3 5b       	subi	r30, 0xB3	; 179
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	60 81       	ld	r22, Z
    3722:	71 81       	ldd	r23, Z+1	; 0x01
    3724:	82 81       	ldd	r24, Z+2	; 0x02
    3726:	93 81       	ldd	r25, Z+3	; 0x03
    3728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    372c:	dc 01       	movw	r26, r24
    372e:	cb 01       	movw	r24, r22
    3730:	f8 01       	movw	r30, r16
    3732:	91 83       	std	Z+1, r25	; 0x01
    3734:	80 83       	st	Z, r24
    3736:	de 01       	movw	r26, r28
    3738:	a9 5b       	subi	r26, 0xB9	; 185
    373a:	bf 4f       	sbci	r27, 0xFF	; 255
    373c:	fe 01       	movw	r30, r28
    373e:	e5 5b       	subi	r30, 0xB5	; 181
    3740:	ff 4f       	sbci	r31, 0xFF	; 255
    3742:	80 81       	ld	r24, Z
    3744:	91 81       	ldd	r25, Z+1	; 0x01
    3746:	8d 93       	st	X+, r24
    3748:	9c 93       	st	X, r25
    374a:	fe 01       	movw	r30, r28
    374c:	e9 5b       	subi	r30, 0xB9	; 185
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	80 81       	ld	r24, Z
    3752:	91 81       	ldd	r25, Z+1	; 0x01
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <LCD_sendCommand+0x2f4>
    3758:	fe 01       	movw	r30, r28
    375a:	e9 5b       	subi	r30, 0xB9	; 185
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	91 83       	std	Z+1, r25	; 0x01
    3760:	80 83       	st	Z, r24
	_delay_ms(1); /* delay Tpw-Tdsw=290-100=190 nsec */

#if(LCD_DATA_BITS_MODE == 4)
	/* writing first 4 bits of the command on DB 4 pins */
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB4_PIN_ID , GET_BIT(command,4));
    3762:	fe 01       	movw	r30, r28
    3764:	ed 59       	subi	r30, 0x9D	; 157
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	80 81       	ld	r24, Z
    376a:	88 2f       	mov	r24, r24
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	80 71       	andi	r24, 0x10	; 16
    3770:	90 70       	andi	r25, 0x00	; 0
    3772:	95 95       	asr	r25
    3774:	87 95       	ror	r24
    3776:	95 95       	asr	r25
    3778:	87 95       	ror	r24
    377a:	95 95       	asr	r25
    377c:	87 95       	ror	r24
    377e:	95 95       	asr	r25
    3780:	87 95       	ror	r24
    3782:	98 2f       	mov	r25, r24
    3784:	82 e0       	ldi	r24, 0x02	; 2
    3786:	65 e0       	ldi	r22, 0x05	; 5
    3788:	49 2f       	mov	r20, r25
    378a:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB5_PIN_ID , GET_BIT(command,5));
    378e:	fe 01       	movw	r30, r28
    3790:	ed 59       	subi	r30, 0x9D	; 157
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	80 81       	ld	r24, Z
    3796:	88 2f       	mov	r24, r24
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	80 72       	andi	r24, 0x20	; 32
    379c:	90 70       	andi	r25, 0x00	; 0
    379e:	95 95       	asr	r25
    37a0:	87 95       	ror	r24
    37a2:	95 95       	asr	r25
    37a4:	87 95       	ror	r24
    37a6:	95 95       	asr	r25
    37a8:	87 95       	ror	r24
    37aa:	95 95       	asr	r25
    37ac:	87 95       	ror	r24
    37ae:	95 95       	asr	r25
    37b0:	87 95       	ror	r24
    37b2:	98 2f       	mov	r25, r24
    37b4:	82 e0       	ldi	r24, 0x02	; 2
    37b6:	64 e0       	ldi	r22, 0x04	; 4
    37b8:	49 2f       	mov	r20, r25
    37ba:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB6_PIN_ID , GET_BIT(command,6));
    37be:	fe 01       	movw	r30, r28
    37c0:	ed 59       	subi	r30, 0x9D	; 157
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	80 81       	ld	r24, Z
    37c6:	88 2f       	mov	r24, r24
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	80 74       	andi	r24, 0x40	; 64
    37cc:	90 70       	andi	r25, 0x00	; 0
    37ce:	08 2e       	mov	r0, r24
    37d0:	89 2f       	mov	r24, r25
    37d2:	00 0c       	add	r0, r0
    37d4:	88 1f       	adc	r24, r24
    37d6:	99 0b       	sbc	r25, r25
    37d8:	00 0c       	add	r0, r0
    37da:	88 1f       	adc	r24, r24
    37dc:	99 1f       	adc	r25, r25
    37de:	98 2f       	mov	r25, r24
    37e0:	82 e0       	ldi	r24, 0x02	; 2
    37e2:	63 e0       	ldi	r22, 0x03	; 3
    37e4:	49 2f       	mov	r20, r25
    37e6:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB7_PIN_ID , GET_BIT(command,7));
    37ea:	fe 01       	movw	r30, r28
    37ec:	ed 59       	subi	r30, 0x9D	; 157
    37ee:	ff 4f       	sbci	r31, 0xFF	; 255
    37f0:	80 81       	ld	r24, Z
    37f2:	98 2f       	mov	r25, r24
    37f4:	99 1f       	adc	r25, r25
    37f6:	99 27       	eor	r25, r25
    37f8:	99 1f       	adc	r25, r25
    37fa:	82 e0       	ldi	r24, 0x02	; 2
    37fc:	62 e0       	ldi	r22, 0x02	; 2
    37fe:	49 2f       	mov	r20, r25
    3800:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    3804:	fe 01       	movw	r30, r28
    3806:	ed 5b       	subi	r30, 0xBD	; 189
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	a0 e8       	ldi	r26, 0x80	; 128
    3810:	bf e3       	ldi	r27, 0x3F	; 63
    3812:	80 83       	st	Z, r24
    3814:	91 83       	std	Z+1, r25	; 0x01
    3816:	a2 83       	std	Z+2, r26	; 0x02
    3818:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381a:	8e 01       	movw	r16, r28
    381c:	01 5c       	subi	r16, 0xC1	; 193
    381e:	1f 4f       	sbci	r17, 0xFF	; 255
    3820:	fe 01       	movw	r30, r28
    3822:	ed 5b       	subi	r30, 0xBD	; 189
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	60 81       	ld	r22, Z
    3828:	71 81       	ldd	r23, Z+1	; 0x01
    382a:	82 81       	ldd	r24, Z+2	; 0x02
    382c:	93 81       	ldd	r25, Z+3	; 0x03
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	4a ef       	ldi	r20, 0xFA	; 250
    3834:	54 e4       	ldi	r21, 0x44	; 68
    3836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	f8 01       	movw	r30, r16
    3840:	80 83       	st	Z, r24
    3842:	91 83       	std	Z+1, r25	; 0x01
    3844:	a2 83       	std	Z+2, r26	; 0x02
    3846:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3848:	fe 01       	movw	r30, r28
    384a:	ff 96       	adiw	r30, 0x3f	; 63
    384c:	60 81       	ld	r22, Z
    384e:	71 81       	ldd	r23, Z+1	; 0x01
    3850:	82 81       	ldd	r24, Z+2	; 0x02
    3852:	93 81       	ldd	r25, Z+3	; 0x03
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	40 e8       	ldi	r20, 0x80	; 128
    385a:	5f e3       	ldi	r21, 0x3F	; 63
    385c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3860:	88 23       	and	r24, r24
    3862:	2c f4       	brge	.+10     	; 0x386e <LCD_sendCommand+0x40e>
		__ticks = 1;
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	9e af       	std	Y+62, r25	; 0x3e
    386a:	8d af       	std	Y+61, r24	; 0x3d
    386c:	46 c0       	rjmp	.+140    	; 0x38fa <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    386e:	fe 01       	movw	r30, r28
    3870:	ff 96       	adiw	r30, 0x3f	; 63
    3872:	60 81       	ld	r22, Z
    3874:	71 81       	ldd	r23, Z+1	; 0x01
    3876:	82 81       	ldd	r24, Z+2	; 0x02
    3878:	93 81       	ldd	r25, Z+3	; 0x03
    387a:	20 e0       	ldi	r18, 0x00	; 0
    387c:	3f ef       	ldi	r19, 0xFF	; 255
    387e:	4f e7       	ldi	r20, 0x7F	; 127
    3880:	57 e4       	ldi	r21, 0x47	; 71
    3882:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3886:	18 16       	cp	r1, r24
    3888:	64 f5       	brge	.+88     	; 0x38e2 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    388a:	fe 01       	movw	r30, r28
    388c:	ed 5b       	subi	r30, 0xBD	; 189
    388e:	ff 4f       	sbci	r31, 0xFF	; 255
    3890:	60 81       	ld	r22, Z
    3892:	71 81       	ldd	r23, Z+1	; 0x01
    3894:	82 81       	ldd	r24, Z+2	; 0x02
    3896:	93 81       	ldd	r25, Z+3	; 0x03
    3898:	20 e0       	ldi	r18, 0x00	; 0
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	40 e2       	ldi	r20, 0x20	; 32
    389e:	51 e4       	ldi	r21, 0x41	; 65
    38a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a4:	dc 01       	movw	r26, r24
    38a6:	cb 01       	movw	r24, r22
    38a8:	bc 01       	movw	r22, r24
    38aa:	cd 01       	movw	r24, r26
    38ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	9e af       	std	Y+62, r25	; 0x3e
    38b6:	8d af       	std	Y+61, r24	; 0x3d
    38b8:	0f c0       	rjmp	.+30     	; 0x38d8 <LCD_sendCommand+0x478>
    38ba:	88 ec       	ldi	r24, 0xC8	; 200
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	9c af       	std	Y+60, r25	; 0x3c
    38c0:	8b af       	std	Y+59, r24	; 0x3b
    38c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    38c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    38c6:	01 97       	sbiw	r24, 0x01	; 1
    38c8:	f1 f7       	brne	.-4      	; 0x38c6 <LCD_sendCommand+0x466>
    38ca:	9c af       	std	Y+60, r25	; 0x3c
    38cc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    38d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    38d2:	01 97       	sbiw	r24, 0x01	; 1
    38d4:	9e af       	std	Y+62, r25	; 0x3e
    38d6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    38da:	9e ad       	ldd	r25, Y+62	; 0x3e
    38dc:	00 97       	sbiw	r24, 0x00	; 0
    38de:	69 f7       	brne	.-38     	; 0x38ba <LCD_sendCommand+0x45a>
    38e0:	16 c0       	rjmp	.+44     	; 0x390e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38e2:	fe 01       	movw	r30, r28
    38e4:	ff 96       	adiw	r30, 0x3f	; 63
    38e6:	60 81       	ld	r22, Z
    38e8:	71 81       	ldd	r23, Z+1	; 0x01
    38ea:	82 81       	ldd	r24, Z+2	; 0x02
    38ec:	93 81       	ldd	r25, Z+3	; 0x03
    38ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	9e af       	std	Y+62, r25	; 0x3e
    38f8:	8d af       	std	Y+61, r24	; 0x3d
    38fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    38fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    38fe:	9a af       	std	Y+58, r25	; 0x3a
    3900:	89 af       	std	Y+57, r24	; 0x39
    3902:	89 ad       	ldd	r24, Y+57	; 0x39
    3904:	9a ad       	ldd	r25, Y+58	; 0x3a
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	f1 f7       	brne	.-4      	; 0x3906 <LCD_sendCommand+0x4a6>
    390a:	9a af       	std	Y+58, r25	; 0x3a
    390c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay Tdsw=100nsec */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    390e:	82 e0       	ldi	r24, 0x02	; 2
    3910:	66 e0       	ldi	r22, 0x06	; 6
    3912:	40 e0       	ldi	r20, 0x00	; 0
    3914:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	a0 e8       	ldi	r26, 0x80	; 128
    391e:	bf e3       	ldi	r27, 0x3F	; 63
    3920:	8d ab       	std	Y+53, r24	; 0x35
    3922:	9e ab       	std	Y+54, r25	; 0x36
    3924:	af ab       	std	Y+55, r26	; 0x37
    3926:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3928:	6d a9       	ldd	r22, Y+53	; 0x35
    392a:	7e a9       	ldd	r23, Y+54	; 0x36
    392c:	8f a9       	ldd	r24, Y+55	; 0x37
    392e:	98 ad       	ldd	r25, Y+56	; 0x38
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	4a ef       	ldi	r20, 0xFA	; 250
    3936:	54 e4       	ldi	r21, 0x44	; 68
    3938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	89 ab       	std	Y+49, r24	; 0x31
    3942:	9a ab       	std	Y+50, r25	; 0x32
    3944:	ab ab       	std	Y+51, r26	; 0x33
    3946:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3948:	69 a9       	ldd	r22, Y+49	; 0x31
    394a:	7a a9       	ldd	r23, Y+50	; 0x32
    394c:	8b a9       	ldd	r24, Y+51	; 0x33
    394e:	9c a9       	ldd	r25, Y+52	; 0x34
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	40 e8       	ldi	r20, 0x80	; 128
    3956:	5f e3       	ldi	r21, 0x3F	; 63
    3958:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    395c:	88 23       	and	r24, r24
    395e:	2c f4       	brge	.+10     	; 0x396a <LCD_sendCommand+0x50a>
		__ticks = 1;
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	98 ab       	std	Y+48, r25	; 0x30
    3966:	8f a7       	std	Y+47, r24	; 0x2f
    3968:	3f c0       	rjmp	.+126    	; 0x39e8 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    396a:	69 a9       	ldd	r22, Y+49	; 0x31
    396c:	7a a9       	ldd	r23, Y+50	; 0x32
    396e:	8b a9       	ldd	r24, Y+51	; 0x33
    3970:	9c a9       	ldd	r25, Y+52	; 0x34
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	3f ef       	ldi	r19, 0xFF	; 255
    3976:	4f e7       	ldi	r20, 0x7F	; 127
    3978:	57 e4       	ldi	r21, 0x47	; 71
    397a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    397e:	18 16       	cp	r1, r24
    3980:	4c f5       	brge	.+82     	; 0x39d4 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3982:	6d a9       	ldd	r22, Y+53	; 0x35
    3984:	7e a9       	ldd	r23, Y+54	; 0x36
    3986:	8f a9       	ldd	r24, Y+55	; 0x37
    3988:	98 ad       	ldd	r25, Y+56	; 0x38
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	40 e2       	ldi	r20, 0x20	; 32
    3990:	51 e4       	ldi	r21, 0x41	; 65
    3992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	bc 01       	movw	r22, r24
    399c:	cd 01       	movw	r24, r26
    399e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	98 ab       	std	Y+48, r25	; 0x30
    39a8:	8f a7       	std	Y+47, r24	; 0x2f
    39aa:	0f c0       	rjmp	.+30     	; 0x39ca <LCD_sendCommand+0x56a>
    39ac:	88 ec       	ldi	r24, 0xC8	; 200
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	9e a7       	std	Y+46, r25	; 0x2e
    39b2:	8d a7       	std	Y+45, r24	; 0x2d
    39b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    39b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    39b8:	01 97       	sbiw	r24, 0x01	; 1
    39ba:	f1 f7       	brne	.-4      	; 0x39b8 <LCD_sendCommand+0x558>
    39bc:	9e a7       	std	Y+46, r25	; 0x2e
    39be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    39c2:	98 a9       	ldd	r25, Y+48	; 0x30
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	98 ab       	std	Y+48, r25	; 0x30
    39c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    39cc:	98 a9       	ldd	r25, Y+48	; 0x30
    39ce:	00 97       	sbiw	r24, 0x00	; 0
    39d0:	69 f7       	brne	.-38     	; 0x39ac <LCD_sendCommand+0x54c>
    39d2:	14 c0       	rjmp	.+40     	; 0x39fc <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d4:	69 a9       	ldd	r22, Y+49	; 0x31
    39d6:	7a a9       	ldd	r23, Y+50	; 0x32
    39d8:	8b a9       	ldd	r24, Y+51	; 0x33
    39da:	9c a9       	ldd	r25, Y+52	; 0x34
    39dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	98 ab       	std	Y+48, r25	; 0x30
    39e6:	8f a7       	std	Y+47, r24	; 0x2f
    39e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    39ea:	98 a9       	ldd	r25, Y+48	; 0x30
    39ec:	9c a7       	std	Y+44, r25	; 0x2c
    39ee:	8b a7       	std	Y+43, r24	; 0x2b
    39f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    39f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	f1 f7       	brne	.-4      	; 0x39f4 <LCD_sendCommand+0x594>
    39f8:	9c a7       	std	Y+44, r25	; 0x2c
    39fa:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1); /* delay Ts = 50nsec */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);	/* making the Enable(E) = 1 */
    39fc:	82 e0       	ldi	r24, 0x02	; 2
    39fe:	66 e0       	ldi	r22, 0x06	; 6
    3a00:	41 e0       	ldi	r20, 0x01	; 1
    3a02:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    3a06:	80 e0       	ldi	r24, 0x00	; 0
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	a0 e8       	ldi	r26, 0x80	; 128
    3a0c:	bf e3       	ldi	r27, 0x3F	; 63
    3a0e:	8f a3       	std	Y+39, r24	; 0x27
    3a10:	98 a7       	std	Y+40, r25	; 0x28
    3a12:	a9 a7       	std	Y+41, r26	; 0x29
    3a14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a16:	6f a1       	ldd	r22, Y+39	; 0x27
    3a18:	78 a5       	ldd	r23, Y+40	; 0x28
    3a1a:	89 a5       	ldd	r24, Y+41	; 0x29
    3a1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
    3a20:	30 e0       	ldi	r19, 0x00	; 0
    3a22:	4a ef       	ldi	r20, 0xFA	; 250
    3a24:	54 e4       	ldi	r21, 0x44	; 68
    3a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2a:	dc 01       	movw	r26, r24
    3a2c:	cb 01       	movw	r24, r22
    3a2e:	8b a3       	std	Y+35, r24	; 0x23
    3a30:	9c a3       	std	Y+36, r25	; 0x24
    3a32:	ad a3       	std	Y+37, r26	; 0x25
    3a34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a36:	6b a1       	ldd	r22, Y+35	; 0x23
    3a38:	7c a1       	ldd	r23, Y+36	; 0x24
    3a3a:	8d a1       	ldd	r24, Y+37	; 0x25
    3a3c:	9e a1       	ldd	r25, Y+38	; 0x26
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	40 e8       	ldi	r20, 0x80	; 128
    3a44:	5f e3       	ldi	r21, 0x3F	; 63
    3a46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a4a:	88 23       	and	r24, r24
    3a4c:	2c f4       	brge	.+10     	; 0x3a58 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	9a a3       	std	Y+34, r25	; 0x22
    3a54:	89 a3       	std	Y+33, r24	; 0x21
    3a56:	3f c0       	rjmp	.+126    	; 0x3ad6 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    3a58:	6b a1       	ldd	r22, Y+35	; 0x23
    3a5a:	7c a1       	ldd	r23, Y+36	; 0x24
    3a5c:	8d a1       	ldd	r24, Y+37	; 0x25
    3a5e:	9e a1       	ldd	r25, Y+38	; 0x26
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	3f ef       	ldi	r19, 0xFF	; 255
    3a64:	4f e7       	ldi	r20, 0x7F	; 127
    3a66:	57 e4       	ldi	r21, 0x47	; 71
    3a68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a6c:	18 16       	cp	r1, r24
    3a6e:	4c f5       	brge	.+82     	; 0x3ac2 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a70:	6f a1       	ldd	r22, Y+39	; 0x27
    3a72:	78 a5       	ldd	r23, Y+40	; 0x28
    3a74:	89 a5       	ldd	r24, Y+41	; 0x29
    3a76:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e2       	ldi	r20, 0x20	; 32
    3a7e:	51 e4       	ldi	r21, 0x41	; 65
    3a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	bc 01       	movw	r22, r24
    3a8a:	cd 01       	movw	r24, r26
    3a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	9a a3       	std	Y+34, r25	; 0x22
    3a96:	89 a3       	std	Y+33, r24	; 0x21
    3a98:	0f c0       	rjmp	.+30     	; 0x3ab8 <LCD_sendCommand+0x658>
    3a9a:	88 ec       	ldi	r24, 0xC8	; 200
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	98 a3       	std	Y+32, r25	; 0x20
    3aa0:	8f 8f       	std	Y+31, r24	; 0x1f
    3aa2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3aa4:	98 a1       	ldd	r25, Y+32	; 0x20
    3aa6:	01 97       	sbiw	r24, 0x01	; 1
    3aa8:	f1 f7       	brne	.-4      	; 0x3aa6 <LCD_sendCommand+0x646>
    3aaa:	98 a3       	std	Y+32, r25	; 0x20
    3aac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aae:	89 a1       	ldd	r24, Y+33	; 0x21
    3ab0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ab2:	01 97       	sbiw	r24, 0x01	; 1
    3ab4:	9a a3       	std	Y+34, r25	; 0x22
    3ab6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab8:	89 a1       	ldd	r24, Y+33	; 0x21
    3aba:	9a a1       	ldd	r25, Y+34	; 0x22
    3abc:	00 97       	sbiw	r24, 0x00	; 0
    3abe:	69 f7       	brne	.-38     	; 0x3a9a <LCD_sendCommand+0x63a>
    3ac0:	14 c0       	rjmp	.+40     	; 0x3aea <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac2:	6b a1       	ldd	r22, Y+35	; 0x23
    3ac4:	7c a1       	ldd	r23, Y+36	; 0x24
    3ac6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ac8:	9e a1       	ldd	r25, Y+38	; 0x26
    3aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	9a a3       	std	Y+34, r25	; 0x22
    3ad4:	89 a3       	std	Y+33, r24	; 0x21
    3ad6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ad8:	9a a1       	ldd	r25, Y+34	; 0x22
    3ada:	9e 8f       	std	Y+30, r25	; 0x1e
    3adc:	8d 8f       	std	Y+29, r24	; 0x1d
    3ade:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ae0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ae2:	01 97       	sbiw	r24, 0x01	; 1
    3ae4:	f1 f7       	brne	.-4      	; 0x3ae2 <LCD_sendCommand+0x682>
    3ae6:	9e 8f       	std	Y+30, r25	; 0x1e
    3ae8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay Tpw-Tdsw=290-100=190 nsec */

	/* writing second 4 bits of the command on DB 4 pins */
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB4_PIN_ID , GET_BIT(command,0));
    3aea:	fe 01       	movw	r30, r28
    3aec:	ed 59       	subi	r30, 0x9D	; 157
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	80 81       	ld	r24, Z
    3af2:	98 2f       	mov	r25, r24
    3af4:	91 70       	andi	r25, 0x01	; 1
    3af6:	82 e0       	ldi	r24, 0x02	; 2
    3af8:	65 e0       	ldi	r22, 0x05	; 5
    3afa:	49 2f       	mov	r20, r25
    3afc:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB5_PIN_ID , GET_BIT(command,1));
    3b00:	fe 01       	movw	r30, r28
    3b02:	ed 59       	subi	r30, 0x9D	; 157
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	80 81       	ld	r24, Z
    3b08:	88 2f       	mov	r24, r24
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	82 70       	andi	r24, 0x02	; 2
    3b0e:	90 70       	andi	r25, 0x00	; 0
    3b10:	95 95       	asr	r25
    3b12:	87 95       	ror	r24
    3b14:	98 2f       	mov	r25, r24
    3b16:	82 e0       	ldi	r24, 0x02	; 2
    3b18:	64 e0       	ldi	r22, 0x04	; 4
    3b1a:	49 2f       	mov	r20, r25
    3b1c:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB6_PIN_ID , GET_BIT(command,2));
    3b20:	fe 01       	movw	r30, r28
    3b22:	ed 59       	subi	r30, 0x9D	; 157
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	80 81       	ld	r24, Z
    3b28:	88 2f       	mov	r24, r24
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	84 70       	andi	r24, 0x04	; 4
    3b2e:	90 70       	andi	r25, 0x00	; 0
    3b30:	95 95       	asr	r25
    3b32:	87 95       	ror	r24
    3b34:	95 95       	asr	r25
    3b36:	87 95       	ror	r24
    3b38:	98 2f       	mov	r25, r24
    3b3a:	82 e0       	ldi	r24, 0x02	; 2
    3b3c:	63 e0       	ldi	r22, 0x03	; 3
    3b3e:	49 2f       	mov	r20, r25
    3b40:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB7_PIN_ID , GET_BIT(command,3));
    3b44:	fe 01       	movw	r30, r28
    3b46:	ed 59       	subi	r30, 0x9D	; 157
    3b48:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4a:	80 81       	ld	r24, Z
    3b4c:	88 2f       	mov	r24, r24
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	88 70       	andi	r24, 0x08	; 8
    3b52:	90 70       	andi	r25, 0x00	; 0
    3b54:	95 95       	asr	r25
    3b56:	87 95       	ror	r24
    3b58:	95 95       	asr	r25
    3b5a:	87 95       	ror	r24
    3b5c:	95 95       	asr	r25
    3b5e:	87 95       	ror	r24
    3b60:	98 2f       	mov	r25, r24
    3b62:	82 e0       	ldi	r24, 0x02	; 2
    3b64:	62 e0       	ldi	r22, 0x02	; 2
    3b66:	49 2f       	mov	r20, r25
    3b68:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
    3b6e:	90 e0       	ldi	r25, 0x00	; 0
    3b70:	a0 e8       	ldi	r26, 0x80	; 128
    3b72:	bf e3       	ldi	r27, 0x3F	; 63
    3b74:	89 8f       	std	Y+25, r24	; 0x19
    3b76:	9a 8f       	std	Y+26, r25	; 0x1a
    3b78:	ab 8f       	std	Y+27, r26	; 0x1b
    3b7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b7c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	4a ef       	ldi	r20, 0xFA	; 250
    3b8a:	54 e4       	ldi	r21, 0x44	; 68
    3b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	8d 8b       	std	Y+21, r24	; 0x15
    3b96:	9e 8b       	std	Y+22, r25	; 0x16
    3b98:	af 8b       	std	Y+23, r26	; 0x17
    3b9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    3b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    3ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    3ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	40 e8       	ldi	r20, 0x80	; 128
    3baa:	5f e3       	ldi	r21, 0x3F	; 63
    3bac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bb0:	88 23       	and	r24, r24
    3bb2:	2c f4       	brge	.+10     	; 0x3bbe <LCD_sendCommand+0x75e>
		__ticks = 1;
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	9c 8b       	std	Y+20, r25	; 0x14
    3bba:	8b 8b       	std	Y+19, r24	; 0x13
    3bbc:	3f c0       	rjmp	.+126    	; 0x3c3c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    3bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    3bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    3bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	3f ef       	ldi	r19, 0xFF	; 255
    3bca:	4f e7       	ldi	r20, 0x7F	; 127
    3bcc:	57 e4       	ldi	r21, 0x47	; 71
    3bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bd2:	18 16       	cp	r1, r24
    3bd4:	4c f5       	brge	.+82     	; 0x3c28 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bd6:	69 8d       	ldd	r22, Y+25	; 0x19
    3bd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	40 e2       	ldi	r20, 0x20	; 32
    3be4:	51 e4       	ldi	r21, 0x41	; 65
    3be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	bc 01       	movw	r22, r24
    3bf0:	cd 01       	movw	r24, r26
    3bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	9c 8b       	std	Y+20, r25	; 0x14
    3bfc:	8b 8b       	std	Y+19, r24	; 0x13
    3bfe:	0f c0       	rjmp	.+30     	; 0x3c1e <LCD_sendCommand+0x7be>
    3c00:	88 ec       	ldi	r24, 0xC8	; 200
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	9a 8b       	std	Y+18, r25	; 0x12
    3c06:	89 8b       	std	Y+17, r24	; 0x11
    3c08:	89 89       	ldd	r24, Y+17	; 0x11
    3c0a:	9a 89       	ldd	r25, Y+18	; 0x12
    3c0c:	01 97       	sbiw	r24, 0x01	; 1
    3c0e:	f1 f7       	brne	.-4      	; 0x3c0c <LCD_sendCommand+0x7ac>
    3c10:	9a 8b       	std	Y+18, r25	; 0x12
    3c12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c14:	8b 89       	ldd	r24, Y+19	; 0x13
    3c16:	9c 89       	ldd	r25, Y+20	; 0x14
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	9c 8b       	std	Y+20, r25	; 0x14
    3c1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c20:	9c 89       	ldd	r25, Y+20	; 0x14
    3c22:	00 97       	sbiw	r24, 0x00	; 0
    3c24:	69 f7       	brne	.-38     	; 0x3c00 <LCD_sendCommand+0x7a0>
    3c26:	14 c0       	rjmp	.+40     	; 0x3c50 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c28:	6d 89       	ldd	r22, Y+21	; 0x15
    3c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    3c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    3c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    3c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	9c 8b       	std	Y+20, r25	; 0x14
    3c3a:	8b 8b       	std	Y+19, r24	; 0x13
    3c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c40:	98 8b       	std	Y+16, r25	; 0x10
    3c42:	8f 87       	std	Y+15, r24	; 0x0f
    3c44:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c46:	98 89       	ldd	r25, Y+16	; 0x10
    3c48:	01 97       	sbiw	r24, 0x01	; 1
    3c4a:	f1 f7       	brne	.-4      	; 0x3c48 <LCD_sendCommand+0x7e8>
    3c4c:	98 8b       	std	Y+16, r25	; 0x10
    3c4e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay Tdsw=100nsec */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    3c50:	82 e0       	ldi	r24, 0x02	; 2
    3c52:	66 e0       	ldi	r22, 0x06	; 6
    3c54:	40 e0       	ldi	r20, 0x00	; 0
    3c56:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    3c5a:	80 e0       	ldi	r24, 0x00	; 0
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	a0 e8       	ldi	r26, 0x80	; 128
    3c60:	bf e3       	ldi	r27, 0x3F	; 63
    3c62:	8b 87       	std	Y+11, r24	; 0x0b
    3c64:	9c 87       	std	Y+12, r25	; 0x0c
    3c66:	ad 87       	std	Y+13, r26	; 0x0d
    3c68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c70:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c72:	20 e0       	ldi	r18, 0x00	; 0
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	4a ef       	ldi	r20, 0xFA	; 250
    3c78:	54 e4       	ldi	r21, 0x44	; 68
    3c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	8f 83       	std	Y+7, r24	; 0x07
    3c84:	98 87       	std	Y+8, r25	; 0x08
    3c86:	a9 87       	std	Y+9, r26	; 0x09
    3c88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c8c:	78 85       	ldd	r23, Y+8	; 0x08
    3c8e:	89 85       	ldd	r24, Y+9	; 0x09
    3c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c92:	20 e0       	ldi	r18, 0x00	; 0
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	40 e8       	ldi	r20, 0x80	; 128
    3c98:	5f e3       	ldi	r21, 0x3F	; 63
    3c9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c9e:	88 23       	and	r24, r24
    3ca0:	2c f4       	brge	.+10     	; 0x3cac <LCD_sendCommand+0x84c>
		__ticks = 1;
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	9e 83       	std	Y+6, r25	; 0x06
    3ca8:	8d 83       	std	Y+5, r24	; 0x05
    3caa:	3f c0       	rjmp	.+126    	; 0x3d2a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    3cac:	6f 81       	ldd	r22, Y+7	; 0x07
    3cae:	78 85       	ldd	r23, Y+8	; 0x08
    3cb0:	89 85       	ldd	r24, Y+9	; 0x09
    3cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb4:	20 e0       	ldi	r18, 0x00	; 0
    3cb6:	3f ef       	ldi	r19, 0xFF	; 255
    3cb8:	4f e7       	ldi	r20, 0x7F	; 127
    3cba:	57 e4       	ldi	r21, 0x47	; 71
    3cbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cc0:	18 16       	cp	r1, r24
    3cc2:	4c f5       	brge	.+82     	; 0x3d16 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	40 e2       	ldi	r20, 0x20	; 32
    3cd2:	51 e4       	ldi	r21, 0x41	; 65
    3cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	bc 01       	movw	r22, r24
    3cde:	cd 01       	movw	r24, r26
    3ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	9e 83       	std	Y+6, r25	; 0x06
    3cea:	8d 83       	std	Y+5, r24	; 0x05
    3cec:	0f c0       	rjmp	.+30     	; 0x3d0c <LCD_sendCommand+0x8ac>
    3cee:	88 ec       	ldi	r24, 0xC8	; 200
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	9c 83       	std	Y+4, r25	; 0x04
    3cf4:	8b 83       	std	Y+3, r24	; 0x03
    3cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	f1 f7       	brne	.-4      	; 0x3cfa <LCD_sendCommand+0x89a>
    3cfe:	9c 83       	std	Y+4, r25	; 0x04
    3d00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d02:	8d 81       	ldd	r24, Y+5	; 0x05
    3d04:	9e 81       	ldd	r25, Y+6	; 0x06
    3d06:	01 97       	sbiw	r24, 0x01	; 1
    3d08:	9e 83       	std	Y+6, r25	; 0x06
    3d0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d10:	00 97       	sbiw	r24, 0x00	; 0
    3d12:	69 f7       	brne	.-38     	; 0x3cee <LCD_sendCommand+0x88e>
    3d14:	14 c0       	rjmp	.+40     	; 0x3d3e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d16:	6f 81       	ldd	r22, Y+7	; 0x07
    3d18:	78 85       	ldd	r23, Y+8	; 0x08
    3d1a:	89 85       	ldd	r24, Y+9	; 0x09
    3d1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d22:	dc 01       	movw	r26, r24
    3d24:	cb 01       	movw	r24, r22
    3d26:	9e 83       	std	Y+6, r25	; 0x06
    3d28:	8d 83       	std	Y+5, r24	; 0x05
    3d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2e:	9a 83       	std	Y+2, r25	; 0x02
    3d30:	89 83       	std	Y+1, r24	; 0x01
    3d32:	89 81       	ldd	r24, Y+1	; 0x01
    3d34:	9a 81       	ldd	r25, Y+2	; 0x02
    3d36:	01 97       	sbiw	r24, 0x01	; 1
    3d38:	f1 f7       	brne	.-4      	; 0x3d36 <LCD_sendCommand+0x8d6>
    3d3a:	9a 83       	std	Y+2, r25	; 0x02
    3d3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay Tdsw=100nsec */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay Th=13nsec */
#endif

}
    3d3e:	cd 59       	subi	r28, 0x9D	; 157
    3d40:	df 4f       	sbci	r29, 0xFF	; 255
    3d42:	0f b6       	in	r0, 0x3f	; 63
    3d44:	f8 94       	cli
    3d46:	de bf       	out	0x3e, r29	; 62
    3d48:	0f be       	out	0x3f, r0	; 63
    3d4a:	cd bf       	out	0x3d, r28	; 61
    3d4c:	cf 91       	pop	r28
    3d4e:	df 91       	pop	r29
    3d50:	1f 91       	pop	r17
    3d52:	0f 91       	pop	r16
    3d54:	08 95       	ret

00003d56 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 character)
{
    3d56:	0f 93       	push	r16
    3d58:	1f 93       	push	r17
    3d5a:	df 93       	push	r29
    3d5c:	cf 93       	push	r28
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
    3d62:	c3 56       	subi	r28, 0x63	; 99
    3d64:	d0 40       	sbci	r29, 0x00	; 0
    3d66:	0f b6       	in	r0, 0x3f	; 63
    3d68:	f8 94       	cli
    3d6a:	de bf       	out	0x3e, r29	; 62
    3d6c:	0f be       	out	0x3f, r0	; 63
    3d6e:	cd bf       	out	0x3d, r28	; 61
    3d70:	fe 01       	movw	r30, r28
    3d72:	ed 59       	subi	r30, 0x9D	; 157
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* making RS=1 (send data) */
    3d78:	82 e0       	ldi	r24, 0x02	; 2
    3d7a:	67 e0       	ldi	r22, 0x07	; 7
    3d7c:	41 e0       	ldi	r20, 0x01	; 1
    3d7e:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    3d82:	fe 01       	movw	r30, r28
    3d84:	e1 5a       	subi	r30, 0xA1	; 161
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	a0 e8       	ldi	r26, 0x80	; 128
    3d8e:	bf e3       	ldi	r27, 0x3F	; 63
    3d90:	80 83       	st	Z, r24
    3d92:	91 83       	std	Z+1, r25	; 0x01
    3d94:	a2 83       	std	Z+2, r26	; 0x02
    3d96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d98:	8e 01       	movw	r16, r28
    3d9a:	05 5a       	subi	r16, 0xA5	; 165
    3d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d9e:	fe 01       	movw	r30, r28
    3da0:	e1 5a       	subi	r30, 0xA1	; 161
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	60 81       	ld	r22, Z
    3da6:	71 81       	ldd	r23, Z+1	; 0x01
    3da8:	82 81       	ldd	r24, Z+2	; 0x02
    3daa:	93 81       	ldd	r25, Z+3	; 0x03
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	4a ef       	ldi	r20, 0xFA	; 250
    3db2:	54 e4       	ldi	r21, 0x44	; 68
    3db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	f8 01       	movw	r30, r16
    3dbe:	80 83       	st	Z, r24
    3dc0:	91 83       	std	Z+1, r25	; 0x01
    3dc2:	a2 83       	std	Z+2, r26	; 0x02
    3dc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	e5 5a       	subi	r30, 0xA5	; 165
    3dca:	ff 4f       	sbci	r31, 0xFF	; 255
    3dcc:	60 81       	ld	r22, Z
    3dce:	71 81       	ldd	r23, Z+1	; 0x01
    3dd0:	82 81       	ldd	r24, Z+2	; 0x02
    3dd2:	93 81       	ldd	r25, Z+3	; 0x03
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	40 e8       	ldi	r20, 0x80	; 128
    3dda:	5f e3       	ldi	r21, 0x3F	; 63
    3ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de0:	88 23       	and	r24, r24
    3de2:	44 f4       	brge	.+16     	; 0x3df4 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3de4:	fe 01       	movw	r30, r28
    3de6:	e7 5a       	subi	r30, 0xA7	; 167
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	91 83       	std	Z+1, r25	; 0x01
    3df0:	80 83       	st	Z, r24
    3df2:	64 c0       	rjmp	.+200    	; 0x3ebc <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3df4:	fe 01       	movw	r30, r28
    3df6:	e5 5a       	subi	r30, 0xA5	; 165
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	60 81       	ld	r22, Z
    3dfc:	71 81       	ldd	r23, Z+1	; 0x01
    3dfe:	82 81       	ldd	r24, Z+2	; 0x02
    3e00:	93 81       	ldd	r25, Z+3	; 0x03
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	3f ef       	ldi	r19, 0xFF	; 255
    3e06:	4f e7       	ldi	r20, 0x7F	; 127
    3e08:	57 e4       	ldi	r21, 0x47	; 71
    3e0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e0e:	18 16       	cp	r1, r24
    3e10:	0c f0       	brlt	.+2      	; 0x3e14 <LCD_displayCharacter+0xbe>
    3e12:	43 c0       	rjmp	.+134    	; 0x3e9a <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e14:	fe 01       	movw	r30, r28
    3e16:	e1 5a       	subi	r30, 0xA1	; 161
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	60 81       	ld	r22, Z
    3e1c:	71 81       	ldd	r23, Z+1	; 0x01
    3e1e:	82 81       	ldd	r24, Z+2	; 0x02
    3e20:	93 81       	ldd	r25, Z+3	; 0x03
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	40 e2       	ldi	r20, 0x20	; 32
    3e28:	51 e4       	ldi	r21, 0x41	; 65
    3e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2e:	dc 01       	movw	r26, r24
    3e30:	cb 01       	movw	r24, r22
    3e32:	8e 01       	movw	r16, r28
    3e34:	07 5a       	subi	r16, 0xA7	; 167
    3e36:	1f 4f       	sbci	r17, 0xFF	; 255
    3e38:	bc 01       	movw	r22, r24
    3e3a:	cd 01       	movw	r24, r26
    3e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	f8 01       	movw	r30, r16
    3e46:	91 83       	std	Z+1, r25	; 0x01
    3e48:	80 83       	st	Z, r24
    3e4a:	1f c0       	rjmp	.+62     	; 0x3e8a <LCD_displayCharacter+0x134>
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	e9 5a       	subi	r30, 0xA9	; 169
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	88 ec       	ldi	r24, 0xC8	; 200
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	91 83       	std	Z+1, r25	; 0x01
    3e58:	80 83       	st	Z, r24
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	e9 5a       	subi	r30, 0xA9	; 169
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	80 81       	ld	r24, Z
    3e62:	91 81       	ldd	r25, Z+1	; 0x01
    3e64:	01 97       	sbiw	r24, 0x01	; 1
    3e66:	f1 f7       	brne	.-4      	; 0x3e64 <LCD_displayCharacter+0x10e>
    3e68:	fe 01       	movw	r30, r28
    3e6a:	e9 5a       	subi	r30, 0xA9	; 169
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	91 83       	std	Z+1, r25	; 0x01
    3e70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e72:	de 01       	movw	r26, r28
    3e74:	a7 5a       	subi	r26, 0xA7	; 167
    3e76:	bf 4f       	sbci	r27, 0xFF	; 255
    3e78:	fe 01       	movw	r30, r28
    3e7a:	e7 5a       	subi	r30, 0xA7	; 167
    3e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7e:	80 81       	ld	r24, Z
    3e80:	91 81       	ldd	r25, Z+1	; 0x01
    3e82:	01 97       	sbiw	r24, 0x01	; 1
    3e84:	11 96       	adiw	r26, 0x01	; 1
    3e86:	9c 93       	st	X, r25
    3e88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e8a:	fe 01       	movw	r30, r28
    3e8c:	e7 5a       	subi	r30, 0xA7	; 167
    3e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e90:	80 81       	ld	r24, Z
    3e92:	91 81       	ldd	r25, Z+1	; 0x01
    3e94:	00 97       	sbiw	r24, 0x00	; 0
    3e96:	d1 f6       	brne	.-76     	; 0x3e4c <LCD_displayCharacter+0xf6>
    3e98:	27 c0       	rjmp	.+78     	; 0x3ee8 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e9a:	8e 01       	movw	r16, r28
    3e9c:	07 5a       	subi	r16, 0xA7	; 167
    3e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e5 5a       	subi	r30, 0xA5	; 165
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	60 81       	ld	r22, Z
    3ea8:	71 81       	ldd	r23, Z+1	; 0x01
    3eaa:	82 81       	ldd	r24, Z+2	; 0x02
    3eac:	93 81       	ldd	r25, Z+3	; 0x03
    3eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	f8 01       	movw	r30, r16
    3eb8:	91 83       	std	Z+1, r25	; 0x01
    3eba:	80 83       	st	Z, r24
    3ebc:	de 01       	movw	r26, r28
    3ebe:	ab 5a       	subi	r26, 0xAB	; 171
    3ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	e7 5a       	subi	r30, 0xA7	; 167
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	80 81       	ld	r24, Z
    3eca:	91 81       	ldd	r25, Z+1	; 0x01
    3ecc:	8d 93       	st	X+, r24
    3ece:	9c 93       	st	X, r25
    3ed0:	fe 01       	movw	r30, r28
    3ed2:	eb 5a       	subi	r30, 0xAB	; 171
    3ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed6:	80 81       	ld	r24, Z
    3ed8:	91 81       	ldd	r25, Z+1	; 0x01
    3eda:	01 97       	sbiw	r24, 0x01	; 1
    3edc:	f1 f7       	brne	.-4      	; 0x3eda <LCD_displayCharacter+0x184>
    3ede:	fe 01       	movw	r30, r28
    3ee0:	eb 5a       	subi	r30, 0xAB	; 171
    3ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee4:	91 83       	std	Z+1, r25	; 0x01
    3ee6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay Ts = 50nsec */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);	/* making the Enable(E) = 1 */
    3ee8:	82 e0       	ldi	r24, 0x02	; 2
    3eea:	66 e0       	ldi	r22, 0x06	; 6
    3eec:	41 e0       	ldi	r20, 0x01	; 1
    3eee:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	ef 5a       	subi	r30, 0xAF	; 175
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	80 e0       	ldi	r24, 0x00	; 0
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	a0 e8       	ldi	r26, 0x80	; 128
    3efe:	bf e3       	ldi	r27, 0x3F	; 63
    3f00:	80 83       	st	Z, r24
    3f02:	91 83       	std	Z+1, r25	; 0x01
    3f04:	a2 83       	std	Z+2, r26	; 0x02
    3f06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f08:	8e 01       	movw	r16, r28
    3f0a:	03 5b       	subi	r16, 0xB3	; 179
    3f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f0e:	fe 01       	movw	r30, r28
    3f10:	ef 5a       	subi	r30, 0xAF	; 175
    3f12:	ff 4f       	sbci	r31, 0xFF	; 255
    3f14:	60 81       	ld	r22, Z
    3f16:	71 81       	ldd	r23, Z+1	; 0x01
    3f18:	82 81       	ldd	r24, Z+2	; 0x02
    3f1a:	93 81       	ldd	r25, Z+3	; 0x03
    3f1c:	20 e0       	ldi	r18, 0x00	; 0
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	4a ef       	ldi	r20, 0xFA	; 250
    3f22:	54 e4       	ldi	r21, 0x44	; 68
    3f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f28:	dc 01       	movw	r26, r24
    3f2a:	cb 01       	movw	r24, r22
    3f2c:	f8 01       	movw	r30, r16
    3f2e:	80 83       	st	Z, r24
    3f30:	91 83       	std	Z+1, r25	; 0x01
    3f32:	a2 83       	std	Z+2, r26	; 0x02
    3f34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f36:	fe 01       	movw	r30, r28
    3f38:	e3 5b       	subi	r30, 0xB3	; 179
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	60 81       	ld	r22, Z
    3f3e:	71 81       	ldd	r23, Z+1	; 0x01
    3f40:	82 81       	ldd	r24, Z+2	; 0x02
    3f42:	93 81       	ldd	r25, Z+3	; 0x03
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	40 e8       	ldi	r20, 0x80	; 128
    3f4a:	5f e3       	ldi	r21, 0x3F	; 63
    3f4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f50:	88 23       	and	r24, r24
    3f52:	44 f4       	brge	.+16     	; 0x3f64 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    3f54:	fe 01       	movw	r30, r28
    3f56:	e5 5b       	subi	r30, 0xB5	; 181
    3f58:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	90 e0       	ldi	r25, 0x00	; 0
    3f5e:	91 83       	std	Z+1, r25	; 0x01
    3f60:	80 83       	st	Z, r24
    3f62:	64 c0       	rjmp	.+200    	; 0x402c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    3f64:	fe 01       	movw	r30, r28
    3f66:	e3 5b       	subi	r30, 0xB3	; 179
    3f68:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6a:	60 81       	ld	r22, Z
    3f6c:	71 81       	ldd	r23, Z+1	; 0x01
    3f6e:	82 81       	ldd	r24, Z+2	; 0x02
    3f70:	93 81       	ldd	r25, Z+3	; 0x03
    3f72:	20 e0       	ldi	r18, 0x00	; 0
    3f74:	3f ef       	ldi	r19, 0xFF	; 255
    3f76:	4f e7       	ldi	r20, 0x7F	; 127
    3f78:	57 e4       	ldi	r21, 0x47	; 71
    3f7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f7e:	18 16       	cp	r1, r24
    3f80:	0c f0       	brlt	.+2      	; 0x3f84 <LCD_displayCharacter+0x22e>
    3f82:	43 c0       	rjmp	.+134    	; 0x400a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f84:	fe 01       	movw	r30, r28
    3f86:	ef 5a       	subi	r30, 0xAF	; 175
    3f88:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8a:	60 81       	ld	r22, Z
    3f8c:	71 81       	ldd	r23, Z+1	; 0x01
    3f8e:	82 81       	ldd	r24, Z+2	; 0x02
    3f90:	93 81       	ldd	r25, Z+3	; 0x03
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	40 e2       	ldi	r20, 0x20	; 32
    3f98:	51 e4       	ldi	r21, 0x41	; 65
    3f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	cb 01       	movw	r24, r22
    3fa2:	8e 01       	movw	r16, r28
    3fa4:	05 5b       	subi	r16, 0xB5	; 181
    3fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa8:	bc 01       	movw	r22, r24
    3faa:	cd 01       	movw	r24, r26
    3fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb0:	dc 01       	movw	r26, r24
    3fb2:	cb 01       	movw	r24, r22
    3fb4:	f8 01       	movw	r30, r16
    3fb6:	91 83       	std	Z+1, r25	; 0x01
    3fb8:	80 83       	st	Z, r24
    3fba:	1f c0       	rjmp	.+62     	; 0x3ffa <LCD_displayCharacter+0x2a4>
    3fbc:	fe 01       	movw	r30, r28
    3fbe:	e7 5b       	subi	r30, 0xB7	; 183
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	88 ec       	ldi	r24, 0xC8	; 200
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	91 83       	std	Z+1, r25	; 0x01
    3fc8:	80 83       	st	Z, r24
    3fca:	fe 01       	movw	r30, r28
    3fcc:	e7 5b       	subi	r30, 0xB7	; 183
    3fce:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd0:	80 81       	ld	r24, Z
    3fd2:	91 81       	ldd	r25, Z+1	; 0x01
    3fd4:	01 97       	sbiw	r24, 0x01	; 1
    3fd6:	f1 f7       	brne	.-4      	; 0x3fd4 <LCD_displayCharacter+0x27e>
    3fd8:	fe 01       	movw	r30, r28
    3fda:	e7 5b       	subi	r30, 0xB7	; 183
    3fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fde:	91 83       	std	Z+1, r25	; 0x01
    3fe0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe2:	de 01       	movw	r26, r28
    3fe4:	a5 5b       	subi	r26, 0xB5	; 181
    3fe6:	bf 4f       	sbci	r27, 0xFF	; 255
    3fe8:	fe 01       	movw	r30, r28
    3fea:	e5 5b       	subi	r30, 0xB5	; 181
    3fec:	ff 4f       	sbci	r31, 0xFF	; 255
    3fee:	80 81       	ld	r24, Z
    3ff0:	91 81       	ldd	r25, Z+1	; 0x01
    3ff2:	01 97       	sbiw	r24, 0x01	; 1
    3ff4:	11 96       	adiw	r26, 0x01	; 1
    3ff6:	9c 93       	st	X, r25
    3ff8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ffa:	fe 01       	movw	r30, r28
    3ffc:	e5 5b       	subi	r30, 0xB5	; 181
    3ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    4000:	80 81       	ld	r24, Z
    4002:	91 81       	ldd	r25, Z+1	; 0x01
    4004:	00 97       	sbiw	r24, 0x00	; 0
    4006:	d1 f6       	brne	.-76     	; 0x3fbc <LCD_displayCharacter+0x266>
    4008:	27 c0       	rjmp	.+78     	; 0x4058 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    400a:	8e 01       	movw	r16, r28
    400c:	05 5b       	subi	r16, 0xB5	; 181
    400e:	1f 4f       	sbci	r17, 0xFF	; 255
    4010:	fe 01       	movw	r30, r28
    4012:	e3 5b       	subi	r30, 0xB3	; 179
    4014:	ff 4f       	sbci	r31, 0xFF	; 255
    4016:	60 81       	ld	r22, Z
    4018:	71 81       	ldd	r23, Z+1	; 0x01
    401a:	82 81       	ldd	r24, Z+2	; 0x02
    401c:	93 81       	ldd	r25, Z+3	; 0x03
    401e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4022:	dc 01       	movw	r26, r24
    4024:	cb 01       	movw	r24, r22
    4026:	f8 01       	movw	r30, r16
    4028:	91 83       	std	Z+1, r25	; 0x01
    402a:	80 83       	st	Z, r24
    402c:	de 01       	movw	r26, r28
    402e:	a9 5b       	subi	r26, 0xB9	; 185
    4030:	bf 4f       	sbci	r27, 0xFF	; 255
    4032:	fe 01       	movw	r30, r28
    4034:	e5 5b       	subi	r30, 0xB5	; 181
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	80 81       	ld	r24, Z
    403a:	91 81       	ldd	r25, Z+1	; 0x01
    403c:	8d 93       	st	X+, r24
    403e:	9c 93       	st	X, r25
    4040:	fe 01       	movw	r30, r28
    4042:	e9 5b       	subi	r30, 0xB9	; 185
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	80 81       	ld	r24, Z
    4048:	91 81       	ldd	r25, Z+1	; 0x01
    404a:	01 97       	sbiw	r24, 0x01	; 1
    404c:	f1 f7       	brne	.-4      	; 0x404a <LCD_displayCharacter+0x2f4>
    404e:	fe 01       	movw	r30, r28
    4050:	e9 5b       	subi	r30, 0xB9	; 185
    4052:	ff 4f       	sbci	r31, 0xFF	; 255
    4054:	91 83       	std	Z+1, r25	; 0x01
    4056:	80 83       	st	Z, r24
	_delay_ms(1); /* delay Tpw-Tdsw=290-100=190 nsec */
#if(LCD_DATA_BITS_MODE == 4)
	/* writing first 4 bits of the data(character) on DB 4 pins */
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB4_PIN_ID , GET_BIT(character,4));
    4058:	fe 01       	movw	r30, r28
    405a:	ed 59       	subi	r30, 0x9D	; 157
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	80 81       	ld	r24, Z
    4060:	88 2f       	mov	r24, r24
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	80 71       	andi	r24, 0x10	; 16
    4066:	90 70       	andi	r25, 0x00	; 0
    4068:	95 95       	asr	r25
    406a:	87 95       	ror	r24
    406c:	95 95       	asr	r25
    406e:	87 95       	ror	r24
    4070:	95 95       	asr	r25
    4072:	87 95       	ror	r24
    4074:	95 95       	asr	r25
    4076:	87 95       	ror	r24
    4078:	98 2f       	mov	r25, r24
    407a:	82 e0       	ldi	r24, 0x02	; 2
    407c:	65 e0       	ldi	r22, 0x05	; 5
    407e:	49 2f       	mov	r20, r25
    4080:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB5_PIN_ID , GET_BIT(character,5));
    4084:	fe 01       	movw	r30, r28
    4086:	ed 59       	subi	r30, 0x9D	; 157
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	80 81       	ld	r24, Z
    408c:	88 2f       	mov	r24, r24
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	80 72       	andi	r24, 0x20	; 32
    4092:	90 70       	andi	r25, 0x00	; 0
    4094:	95 95       	asr	r25
    4096:	87 95       	ror	r24
    4098:	95 95       	asr	r25
    409a:	87 95       	ror	r24
    409c:	95 95       	asr	r25
    409e:	87 95       	ror	r24
    40a0:	95 95       	asr	r25
    40a2:	87 95       	ror	r24
    40a4:	95 95       	asr	r25
    40a6:	87 95       	ror	r24
    40a8:	98 2f       	mov	r25, r24
    40aa:	82 e0       	ldi	r24, 0x02	; 2
    40ac:	64 e0       	ldi	r22, 0x04	; 4
    40ae:	49 2f       	mov	r20, r25
    40b0:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB6_PIN_ID , GET_BIT(character,6));
    40b4:	fe 01       	movw	r30, r28
    40b6:	ed 59       	subi	r30, 0x9D	; 157
    40b8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ba:	80 81       	ld	r24, Z
    40bc:	88 2f       	mov	r24, r24
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	80 74       	andi	r24, 0x40	; 64
    40c2:	90 70       	andi	r25, 0x00	; 0
    40c4:	08 2e       	mov	r0, r24
    40c6:	89 2f       	mov	r24, r25
    40c8:	00 0c       	add	r0, r0
    40ca:	88 1f       	adc	r24, r24
    40cc:	99 0b       	sbc	r25, r25
    40ce:	00 0c       	add	r0, r0
    40d0:	88 1f       	adc	r24, r24
    40d2:	99 1f       	adc	r25, r25
    40d4:	98 2f       	mov	r25, r24
    40d6:	82 e0       	ldi	r24, 0x02	; 2
    40d8:	63 e0       	ldi	r22, 0x03	; 3
    40da:	49 2f       	mov	r20, r25
    40dc:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB7_PIN_ID , GET_BIT(character,7));
    40e0:	fe 01       	movw	r30, r28
    40e2:	ed 59       	subi	r30, 0x9D	; 157
    40e4:	ff 4f       	sbci	r31, 0xFF	; 255
    40e6:	80 81       	ld	r24, Z
    40e8:	98 2f       	mov	r25, r24
    40ea:	99 1f       	adc	r25, r25
    40ec:	99 27       	eor	r25, r25
    40ee:	99 1f       	adc	r25, r25
    40f0:	82 e0       	ldi	r24, 0x02	; 2
    40f2:	62 e0       	ldi	r22, 0x02	; 2
    40f4:	49 2f       	mov	r20, r25
    40f6:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    40fa:	fe 01       	movw	r30, r28
    40fc:	ed 5b       	subi	r30, 0xBD	; 189
    40fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4100:	80 e0       	ldi	r24, 0x00	; 0
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	a0 e8       	ldi	r26, 0x80	; 128
    4106:	bf e3       	ldi	r27, 0x3F	; 63
    4108:	80 83       	st	Z, r24
    410a:	91 83       	std	Z+1, r25	; 0x01
    410c:	a2 83       	std	Z+2, r26	; 0x02
    410e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4110:	8e 01       	movw	r16, r28
    4112:	01 5c       	subi	r16, 0xC1	; 193
    4114:	1f 4f       	sbci	r17, 0xFF	; 255
    4116:	fe 01       	movw	r30, r28
    4118:	ed 5b       	subi	r30, 0xBD	; 189
    411a:	ff 4f       	sbci	r31, 0xFF	; 255
    411c:	60 81       	ld	r22, Z
    411e:	71 81       	ldd	r23, Z+1	; 0x01
    4120:	82 81       	ldd	r24, Z+2	; 0x02
    4122:	93 81       	ldd	r25, Z+3	; 0x03
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	4a ef       	ldi	r20, 0xFA	; 250
    412a:	54 e4       	ldi	r21, 0x44	; 68
    412c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4130:	dc 01       	movw	r26, r24
    4132:	cb 01       	movw	r24, r22
    4134:	f8 01       	movw	r30, r16
    4136:	80 83       	st	Z, r24
    4138:	91 83       	std	Z+1, r25	; 0x01
    413a:	a2 83       	std	Z+2, r26	; 0x02
    413c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    413e:	fe 01       	movw	r30, r28
    4140:	ff 96       	adiw	r30, 0x3f	; 63
    4142:	60 81       	ld	r22, Z
    4144:	71 81       	ldd	r23, Z+1	; 0x01
    4146:	82 81       	ldd	r24, Z+2	; 0x02
    4148:	93 81       	ldd	r25, Z+3	; 0x03
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	40 e8       	ldi	r20, 0x80	; 128
    4150:	5f e3       	ldi	r21, 0x3F	; 63
    4152:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4156:	88 23       	and	r24, r24
    4158:	2c f4       	brge	.+10     	; 0x4164 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    415a:	81 e0       	ldi	r24, 0x01	; 1
    415c:	90 e0       	ldi	r25, 0x00	; 0
    415e:	9e af       	std	Y+62, r25	; 0x3e
    4160:	8d af       	std	Y+61, r24	; 0x3d
    4162:	46 c0       	rjmp	.+140    	; 0x41f0 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    4164:	fe 01       	movw	r30, r28
    4166:	ff 96       	adiw	r30, 0x3f	; 63
    4168:	60 81       	ld	r22, Z
    416a:	71 81       	ldd	r23, Z+1	; 0x01
    416c:	82 81       	ldd	r24, Z+2	; 0x02
    416e:	93 81       	ldd	r25, Z+3	; 0x03
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	3f ef       	ldi	r19, 0xFF	; 255
    4174:	4f e7       	ldi	r20, 0x7F	; 127
    4176:	57 e4       	ldi	r21, 0x47	; 71
    4178:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    417c:	18 16       	cp	r1, r24
    417e:	64 f5       	brge	.+88     	; 0x41d8 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4180:	fe 01       	movw	r30, r28
    4182:	ed 5b       	subi	r30, 0xBD	; 189
    4184:	ff 4f       	sbci	r31, 0xFF	; 255
    4186:	60 81       	ld	r22, Z
    4188:	71 81       	ldd	r23, Z+1	; 0x01
    418a:	82 81       	ldd	r24, Z+2	; 0x02
    418c:	93 81       	ldd	r25, Z+3	; 0x03
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	40 e2       	ldi	r20, 0x20	; 32
    4194:	51 e4       	ldi	r21, 0x41	; 65
    4196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	bc 01       	movw	r22, r24
    41a0:	cd 01       	movw	r24, r26
    41a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	9e af       	std	Y+62, r25	; 0x3e
    41ac:	8d af       	std	Y+61, r24	; 0x3d
    41ae:	0f c0       	rjmp	.+30     	; 0x41ce <LCD_displayCharacter+0x478>
    41b0:	88 ec       	ldi	r24, 0xC8	; 200
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	9c af       	std	Y+60, r25	; 0x3c
    41b6:	8b af       	std	Y+59, r24	; 0x3b
    41b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    41ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <LCD_displayCharacter+0x466>
    41c0:	9c af       	std	Y+60, r25	; 0x3c
    41c2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    41c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	9e af       	std	Y+62, r25	; 0x3e
    41cc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    41d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    41d2:	00 97       	sbiw	r24, 0x00	; 0
    41d4:	69 f7       	brne	.-38     	; 0x41b0 <LCD_displayCharacter+0x45a>
    41d6:	16 c0       	rjmp	.+44     	; 0x4204 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d8:	fe 01       	movw	r30, r28
    41da:	ff 96       	adiw	r30, 0x3f	; 63
    41dc:	60 81       	ld	r22, Z
    41de:	71 81       	ldd	r23, Z+1	; 0x01
    41e0:	82 81       	ldd	r24, Z+2	; 0x02
    41e2:	93 81       	ldd	r25, Z+3	; 0x03
    41e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	9e af       	std	Y+62, r25	; 0x3e
    41ee:	8d af       	std	Y+61, r24	; 0x3d
    41f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    41f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    41f4:	9a af       	std	Y+58, r25	; 0x3a
    41f6:	89 af       	std	Y+57, r24	; 0x39
    41f8:	89 ad       	ldd	r24, Y+57	; 0x39
    41fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    41fc:	01 97       	sbiw	r24, 0x01	; 1
    41fe:	f1 f7       	brne	.-4      	; 0x41fc <LCD_displayCharacter+0x4a6>
    4200:	9a af       	std	Y+58, r25	; 0x3a
    4202:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay Tdsw=100nsec */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    4204:	82 e0       	ldi	r24, 0x02	; 2
    4206:	66 e0       	ldi	r22, 0x06	; 6
    4208:	40 e0       	ldi	r20, 0x00	; 0
    420a:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	a0 e8       	ldi	r26, 0x80	; 128
    4214:	bf e3       	ldi	r27, 0x3F	; 63
    4216:	8d ab       	std	Y+53, r24	; 0x35
    4218:	9e ab       	std	Y+54, r25	; 0x36
    421a:	af ab       	std	Y+55, r26	; 0x37
    421c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    421e:	6d a9       	ldd	r22, Y+53	; 0x35
    4220:	7e a9       	ldd	r23, Y+54	; 0x36
    4222:	8f a9       	ldd	r24, Y+55	; 0x37
    4224:	98 ad       	ldd	r25, Y+56	; 0x38
    4226:	20 e0       	ldi	r18, 0x00	; 0
    4228:	30 e0       	ldi	r19, 0x00	; 0
    422a:	4a ef       	ldi	r20, 0xFA	; 250
    422c:	54 e4       	ldi	r21, 0x44	; 68
    422e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4232:	dc 01       	movw	r26, r24
    4234:	cb 01       	movw	r24, r22
    4236:	89 ab       	std	Y+49, r24	; 0x31
    4238:	9a ab       	std	Y+50, r25	; 0x32
    423a:	ab ab       	std	Y+51, r26	; 0x33
    423c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    423e:	69 a9       	ldd	r22, Y+49	; 0x31
    4240:	7a a9       	ldd	r23, Y+50	; 0x32
    4242:	8b a9       	ldd	r24, Y+51	; 0x33
    4244:	9c a9       	ldd	r25, Y+52	; 0x34
    4246:	20 e0       	ldi	r18, 0x00	; 0
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	40 e8       	ldi	r20, 0x80	; 128
    424c:	5f e3       	ldi	r21, 0x3F	; 63
    424e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4252:	88 23       	and	r24, r24
    4254:	2c f4       	brge	.+10     	; 0x4260 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	98 ab       	std	Y+48, r25	; 0x30
    425c:	8f a7       	std	Y+47, r24	; 0x2f
    425e:	3f c0       	rjmp	.+126    	; 0x42de <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    4260:	69 a9       	ldd	r22, Y+49	; 0x31
    4262:	7a a9       	ldd	r23, Y+50	; 0x32
    4264:	8b a9       	ldd	r24, Y+51	; 0x33
    4266:	9c a9       	ldd	r25, Y+52	; 0x34
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	3f ef       	ldi	r19, 0xFF	; 255
    426c:	4f e7       	ldi	r20, 0x7F	; 127
    426e:	57 e4       	ldi	r21, 0x47	; 71
    4270:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4274:	18 16       	cp	r1, r24
    4276:	4c f5       	brge	.+82     	; 0x42ca <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4278:	6d a9       	ldd	r22, Y+53	; 0x35
    427a:	7e a9       	ldd	r23, Y+54	; 0x36
    427c:	8f a9       	ldd	r24, Y+55	; 0x37
    427e:	98 ad       	ldd	r25, Y+56	; 0x38
    4280:	20 e0       	ldi	r18, 0x00	; 0
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	40 e2       	ldi	r20, 0x20	; 32
    4286:	51 e4       	ldi	r21, 0x41	; 65
    4288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	bc 01       	movw	r22, r24
    4292:	cd 01       	movw	r24, r26
    4294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4298:	dc 01       	movw	r26, r24
    429a:	cb 01       	movw	r24, r22
    429c:	98 ab       	std	Y+48, r25	; 0x30
    429e:	8f a7       	std	Y+47, r24	; 0x2f
    42a0:	0f c0       	rjmp	.+30     	; 0x42c0 <LCD_displayCharacter+0x56a>
    42a2:	88 ec       	ldi	r24, 0xC8	; 200
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	9e a7       	std	Y+46, r25	; 0x2e
    42a8:	8d a7       	std	Y+45, r24	; 0x2d
    42aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    42ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    42ae:	01 97       	sbiw	r24, 0x01	; 1
    42b0:	f1 f7       	brne	.-4      	; 0x42ae <LCD_displayCharacter+0x558>
    42b2:	9e a7       	std	Y+46, r25	; 0x2e
    42b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    42b8:	98 a9       	ldd	r25, Y+48	; 0x30
    42ba:	01 97       	sbiw	r24, 0x01	; 1
    42bc:	98 ab       	std	Y+48, r25	; 0x30
    42be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    42c2:	98 a9       	ldd	r25, Y+48	; 0x30
    42c4:	00 97       	sbiw	r24, 0x00	; 0
    42c6:	69 f7       	brne	.-38     	; 0x42a2 <LCD_displayCharacter+0x54c>
    42c8:	14 c0       	rjmp	.+40     	; 0x42f2 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ca:	69 a9       	ldd	r22, Y+49	; 0x31
    42cc:	7a a9       	ldd	r23, Y+50	; 0x32
    42ce:	8b a9       	ldd	r24, Y+51	; 0x33
    42d0:	9c a9       	ldd	r25, Y+52	; 0x34
    42d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d6:	dc 01       	movw	r26, r24
    42d8:	cb 01       	movw	r24, r22
    42da:	98 ab       	std	Y+48, r25	; 0x30
    42dc:	8f a7       	std	Y+47, r24	; 0x2f
    42de:	8f a5       	ldd	r24, Y+47	; 0x2f
    42e0:	98 a9       	ldd	r25, Y+48	; 0x30
    42e2:	9c a7       	std	Y+44, r25	; 0x2c
    42e4:	8b a7       	std	Y+43, r24	; 0x2b
    42e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    42e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    42ea:	01 97       	sbiw	r24, 0x01	; 1
    42ec:	f1 f7       	brne	.-4      	; 0x42ea <LCD_displayCharacter+0x594>
    42ee:	9c a7       	std	Y+44, r25	; 0x2c
    42f0:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1); /* delay Ts = 50nsec */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);	/* making the Enable(E) = 1 */
    42f2:	82 e0       	ldi	r24, 0x02	; 2
    42f4:	66 e0       	ldi	r22, 0x06	; 6
    42f6:	41 e0       	ldi	r20, 0x01	; 1
    42f8:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    42fc:	80 e0       	ldi	r24, 0x00	; 0
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	a0 e8       	ldi	r26, 0x80	; 128
    4302:	bf e3       	ldi	r27, 0x3F	; 63
    4304:	8f a3       	std	Y+39, r24	; 0x27
    4306:	98 a7       	std	Y+40, r25	; 0x28
    4308:	a9 a7       	std	Y+41, r26	; 0x29
    430a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    430c:	6f a1       	ldd	r22, Y+39	; 0x27
    430e:	78 a5       	ldd	r23, Y+40	; 0x28
    4310:	89 a5       	ldd	r24, Y+41	; 0x29
    4312:	9a a5       	ldd	r25, Y+42	; 0x2a
    4314:	20 e0       	ldi	r18, 0x00	; 0
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	4a ef       	ldi	r20, 0xFA	; 250
    431a:	54 e4       	ldi	r21, 0x44	; 68
    431c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4320:	dc 01       	movw	r26, r24
    4322:	cb 01       	movw	r24, r22
    4324:	8b a3       	std	Y+35, r24	; 0x23
    4326:	9c a3       	std	Y+36, r25	; 0x24
    4328:	ad a3       	std	Y+37, r26	; 0x25
    432a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    432c:	6b a1       	ldd	r22, Y+35	; 0x23
    432e:	7c a1       	ldd	r23, Y+36	; 0x24
    4330:	8d a1       	ldd	r24, Y+37	; 0x25
    4332:	9e a1       	ldd	r25, Y+38	; 0x26
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	40 e8       	ldi	r20, 0x80	; 128
    433a:	5f e3       	ldi	r21, 0x3F	; 63
    433c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4340:	88 23       	and	r24, r24
    4342:	2c f4       	brge	.+10     	; 0x434e <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    4344:	81 e0       	ldi	r24, 0x01	; 1
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	9a a3       	std	Y+34, r25	; 0x22
    434a:	89 a3       	std	Y+33, r24	; 0x21
    434c:	3f c0       	rjmp	.+126    	; 0x43cc <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    434e:	6b a1       	ldd	r22, Y+35	; 0x23
    4350:	7c a1       	ldd	r23, Y+36	; 0x24
    4352:	8d a1       	ldd	r24, Y+37	; 0x25
    4354:	9e a1       	ldd	r25, Y+38	; 0x26
    4356:	20 e0       	ldi	r18, 0x00	; 0
    4358:	3f ef       	ldi	r19, 0xFF	; 255
    435a:	4f e7       	ldi	r20, 0x7F	; 127
    435c:	57 e4       	ldi	r21, 0x47	; 71
    435e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4362:	18 16       	cp	r1, r24
    4364:	4c f5       	brge	.+82     	; 0x43b8 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4366:	6f a1       	ldd	r22, Y+39	; 0x27
    4368:	78 a5       	ldd	r23, Y+40	; 0x28
    436a:	89 a5       	ldd	r24, Y+41	; 0x29
    436c:	9a a5       	ldd	r25, Y+42	; 0x2a
    436e:	20 e0       	ldi	r18, 0x00	; 0
    4370:	30 e0       	ldi	r19, 0x00	; 0
    4372:	40 e2       	ldi	r20, 0x20	; 32
    4374:	51 e4       	ldi	r21, 0x41	; 65
    4376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    437a:	dc 01       	movw	r26, r24
    437c:	cb 01       	movw	r24, r22
    437e:	bc 01       	movw	r22, r24
    4380:	cd 01       	movw	r24, r26
    4382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4386:	dc 01       	movw	r26, r24
    4388:	cb 01       	movw	r24, r22
    438a:	9a a3       	std	Y+34, r25	; 0x22
    438c:	89 a3       	std	Y+33, r24	; 0x21
    438e:	0f c0       	rjmp	.+30     	; 0x43ae <LCD_displayCharacter+0x658>
    4390:	88 ec       	ldi	r24, 0xC8	; 200
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	98 a3       	std	Y+32, r25	; 0x20
    4396:	8f 8f       	std	Y+31, r24	; 0x1f
    4398:	8f 8d       	ldd	r24, Y+31	; 0x1f
    439a:	98 a1       	ldd	r25, Y+32	; 0x20
    439c:	01 97       	sbiw	r24, 0x01	; 1
    439e:	f1 f7       	brne	.-4      	; 0x439c <LCD_displayCharacter+0x646>
    43a0:	98 a3       	std	Y+32, r25	; 0x20
    43a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43a4:	89 a1       	ldd	r24, Y+33	; 0x21
    43a6:	9a a1       	ldd	r25, Y+34	; 0x22
    43a8:	01 97       	sbiw	r24, 0x01	; 1
    43aa:	9a a3       	std	Y+34, r25	; 0x22
    43ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ae:	89 a1       	ldd	r24, Y+33	; 0x21
    43b0:	9a a1       	ldd	r25, Y+34	; 0x22
    43b2:	00 97       	sbiw	r24, 0x00	; 0
    43b4:	69 f7       	brne	.-38     	; 0x4390 <LCD_displayCharacter+0x63a>
    43b6:	14 c0       	rjmp	.+40     	; 0x43e0 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43b8:	6b a1       	ldd	r22, Y+35	; 0x23
    43ba:	7c a1       	ldd	r23, Y+36	; 0x24
    43bc:	8d a1       	ldd	r24, Y+37	; 0x25
    43be:	9e a1       	ldd	r25, Y+38	; 0x26
    43c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c4:	dc 01       	movw	r26, r24
    43c6:	cb 01       	movw	r24, r22
    43c8:	9a a3       	std	Y+34, r25	; 0x22
    43ca:	89 a3       	std	Y+33, r24	; 0x21
    43cc:	89 a1       	ldd	r24, Y+33	; 0x21
    43ce:	9a a1       	ldd	r25, Y+34	; 0x22
    43d0:	9e 8f       	std	Y+30, r25	; 0x1e
    43d2:	8d 8f       	std	Y+29, r24	; 0x1d
    43d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43d8:	01 97       	sbiw	r24, 0x01	; 1
    43da:	f1 f7       	brne	.-4      	; 0x43d8 <LCD_displayCharacter+0x682>
    43dc:	9e 8f       	std	Y+30, r25	; 0x1e
    43de:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay Tpw-Tdsw=290-100=190 nsec */

	/* writing second 4 bits of the data(character) on DB 4 pins */
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB4_PIN_ID , GET_BIT(character,0));
    43e0:	fe 01       	movw	r30, r28
    43e2:	ed 59       	subi	r30, 0x9D	; 157
    43e4:	ff 4f       	sbci	r31, 0xFF	; 255
    43e6:	80 81       	ld	r24, Z
    43e8:	98 2f       	mov	r25, r24
    43ea:	91 70       	andi	r25, 0x01	; 1
    43ec:	82 e0       	ldi	r24, 0x02	; 2
    43ee:	65 e0       	ldi	r22, 0x05	; 5
    43f0:	49 2f       	mov	r20, r25
    43f2:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB5_PIN_ID , GET_BIT(character,1));
    43f6:	fe 01       	movw	r30, r28
    43f8:	ed 59       	subi	r30, 0x9D	; 157
    43fa:	ff 4f       	sbci	r31, 0xFF	; 255
    43fc:	80 81       	ld	r24, Z
    43fe:	88 2f       	mov	r24, r24
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	82 70       	andi	r24, 0x02	; 2
    4404:	90 70       	andi	r25, 0x00	; 0
    4406:	95 95       	asr	r25
    4408:	87 95       	ror	r24
    440a:	98 2f       	mov	r25, r24
    440c:	82 e0       	ldi	r24, 0x02	; 2
    440e:	64 e0       	ldi	r22, 0x04	; 4
    4410:	49 2f       	mov	r20, r25
    4412:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB6_PIN_ID , GET_BIT(character,2));
    4416:	fe 01       	movw	r30, r28
    4418:	ed 59       	subi	r30, 0x9D	; 157
    441a:	ff 4f       	sbci	r31, 0xFF	; 255
    441c:	80 81       	ld	r24, Z
    441e:	88 2f       	mov	r24, r24
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	84 70       	andi	r24, 0x04	; 4
    4424:	90 70       	andi	r25, 0x00	; 0
    4426:	95 95       	asr	r25
    4428:	87 95       	ror	r24
    442a:	95 95       	asr	r25
    442c:	87 95       	ror	r24
    442e:	98 2f       	mov	r25, r24
    4430:	82 e0       	ldi	r24, 0x02	; 2
    4432:	63 e0       	ldi	r22, 0x03	; 3
    4434:	49 2f       	mov	r20, r25
    4436:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LCD_DB_PORT_ID, LCD_DB7_PIN_ID , GET_BIT(character,3));
    443a:	fe 01       	movw	r30, r28
    443c:	ed 59       	subi	r30, 0x9D	; 157
    443e:	ff 4f       	sbci	r31, 0xFF	; 255
    4440:	80 81       	ld	r24, Z
    4442:	88 2f       	mov	r24, r24
    4444:	90 e0       	ldi	r25, 0x00	; 0
    4446:	88 70       	andi	r24, 0x08	; 8
    4448:	90 70       	andi	r25, 0x00	; 0
    444a:	95 95       	asr	r25
    444c:	87 95       	ror	r24
    444e:	95 95       	asr	r25
    4450:	87 95       	ror	r24
    4452:	95 95       	asr	r25
    4454:	87 95       	ror	r24
    4456:	98 2f       	mov	r25, r24
    4458:	82 e0       	ldi	r24, 0x02	; 2
    445a:	62 e0       	ldi	r22, 0x02	; 2
    445c:	49 2f       	mov	r20, r25
    445e:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    4462:	80 e0       	ldi	r24, 0x00	; 0
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	a0 e8       	ldi	r26, 0x80	; 128
    4468:	bf e3       	ldi	r27, 0x3F	; 63
    446a:	89 8f       	std	Y+25, r24	; 0x19
    446c:	9a 8f       	std	Y+26, r25	; 0x1a
    446e:	ab 8f       	std	Y+27, r26	; 0x1b
    4470:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4472:	69 8d       	ldd	r22, Y+25	; 0x19
    4474:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	30 e0       	ldi	r19, 0x00	; 0
    447e:	4a ef       	ldi	r20, 0xFA	; 250
    4480:	54 e4       	ldi	r21, 0x44	; 68
    4482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4486:	dc 01       	movw	r26, r24
    4488:	cb 01       	movw	r24, r22
    448a:	8d 8b       	std	Y+21, r24	; 0x15
    448c:	9e 8b       	std	Y+22, r25	; 0x16
    448e:	af 8b       	std	Y+23, r26	; 0x17
    4490:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4492:	6d 89       	ldd	r22, Y+21	; 0x15
    4494:	7e 89       	ldd	r23, Y+22	; 0x16
    4496:	8f 89       	ldd	r24, Y+23	; 0x17
    4498:	98 8d       	ldd	r25, Y+24	; 0x18
    449a:	20 e0       	ldi	r18, 0x00	; 0
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	40 e8       	ldi	r20, 0x80	; 128
    44a0:	5f e3       	ldi	r21, 0x3F	; 63
    44a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44a6:	88 23       	and	r24, r24
    44a8:	2c f4       	brge	.+10     	; 0x44b4 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    44aa:	81 e0       	ldi	r24, 0x01	; 1
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	9c 8b       	std	Y+20, r25	; 0x14
    44b0:	8b 8b       	std	Y+19, r24	; 0x13
    44b2:	3f c0       	rjmp	.+126    	; 0x4532 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    44b4:	6d 89       	ldd	r22, Y+21	; 0x15
    44b6:	7e 89       	ldd	r23, Y+22	; 0x16
    44b8:	8f 89       	ldd	r24, Y+23	; 0x17
    44ba:	98 8d       	ldd	r25, Y+24	; 0x18
    44bc:	20 e0       	ldi	r18, 0x00	; 0
    44be:	3f ef       	ldi	r19, 0xFF	; 255
    44c0:	4f e7       	ldi	r20, 0x7F	; 127
    44c2:	57 e4       	ldi	r21, 0x47	; 71
    44c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44c8:	18 16       	cp	r1, r24
    44ca:	4c f5       	brge	.+82     	; 0x451e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44cc:	69 8d       	ldd	r22, Y+25	; 0x19
    44ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44d4:	20 e0       	ldi	r18, 0x00	; 0
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	40 e2       	ldi	r20, 0x20	; 32
    44da:	51 e4       	ldi	r21, 0x41	; 65
    44dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
    44e4:	bc 01       	movw	r22, r24
    44e6:	cd 01       	movw	r24, r26
    44e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ec:	dc 01       	movw	r26, r24
    44ee:	cb 01       	movw	r24, r22
    44f0:	9c 8b       	std	Y+20, r25	; 0x14
    44f2:	8b 8b       	std	Y+19, r24	; 0x13
    44f4:	0f c0       	rjmp	.+30     	; 0x4514 <LCD_displayCharacter+0x7be>
    44f6:	88 ec       	ldi	r24, 0xC8	; 200
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	9a 8b       	std	Y+18, r25	; 0x12
    44fc:	89 8b       	std	Y+17, r24	; 0x11
    44fe:	89 89       	ldd	r24, Y+17	; 0x11
    4500:	9a 89       	ldd	r25, Y+18	; 0x12
    4502:	01 97       	sbiw	r24, 0x01	; 1
    4504:	f1 f7       	brne	.-4      	; 0x4502 <LCD_displayCharacter+0x7ac>
    4506:	9a 8b       	std	Y+18, r25	; 0x12
    4508:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    450a:	8b 89       	ldd	r24, Y+19	; 0x13
    450c:	9c 89       	ldd	r25, Y+20	; 0x14
    450e:	01 97       	sbiw	r24, 0x01	; 1
    4510:	9c 8b       	std	Y+20, r25	; 0x14
    4512:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4514:	8b 89       	ldd	r24, Y+19	; 0x13
    4516:	9c 89       	ldd	r25, Y+20	; 0x14
    4518:	00 97       	sbiw	r24, 0x00	; 0
    451a:	69 f7       	brne	.-38     	; 0x44f6 <LCD_displayCharacter+0x7a0>
    451c:	14 c0       	rjmp	.+40     	; 0x4546 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    451e:	6d 89       	ldd	r22, Y+21	; 0x15
    4520:	7e 89       	ldd	r23, Y+22	; 0x16
    4522:	8f 89       	ldd	r24, Y+23	; 0x17
    4524:	98 8d       	ldd	r25, Y+24	; 0x18
    4526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    452a:	dc 01       	movw	r26, r24
    452c:	cb 01       	movw	r24, r22
    452e:	9c 8b       	std	Y+20, r25	; 0x14
    4530:	8b 8b       	std	Y+19, r24	; 0x13
    4532:	8b 89       	ldd	r24, Y+19	; 0x13
    4534:	9c 89       	ldd	r25, Y+20	; 0x14
    4536:	98 8b       	std	Y+16, r25	; 0x10
    4538:	8f 87       	std	Y+15, r24	; 0x0f
    453a:	8f 85       	ldd	r24, Y+15	; 0x0f
    453c:	98 89       	ldd	r25, Y+16	; 0x10
    453e:	01 97       	sbiw	r24, 0x01	; 1
    4540:	f1 f7       	brne	.-4      	; 0x453e <LCD_displayCharacter+0x7e8>
    4542:	98 8b       	std	Y+16, r25	; 0x10
    4544:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay Tdsw=100nsec */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    4546:	82 e0       	ldi	r24, 0x02	; 2
    4548:	66 e0       	ldi	r22, 0x06	; 6
    454a:	40 e0       	ldi	r20, 0x00	; 0
    454c:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    4550:	80 e0       	ldi	r24, 0x00	; 0
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	a0 e8       	ldi	r26, 0x80	; 128
    4556:	bf e3       	ldi	r27, 0x3F	; 63
    4558:	8b 87       	std	Y+11, r24	; 0x0b
    455a:	9c 87       	std	Y+12, r25	; 0x0c
    455c:	ad 87       	std	Y+13, r26	; 0x0d
    455e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4560:	6b 85       	ldd	r22, Y+11	; 0x0b
    4562:	7c 85       	ldd	r23, Y+12	; 0x0c
    4564:	8d 85       	ldd	r24, Y+13	; 0x0d
    4566:	9e 85       	ldd	r25, Y+14	; 0x0e
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	4a ef       	ldi	r20, 0xFA	; 250
    456e:	54 e4       	ldi	r21, 0x44	; 68
    4570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4574:	dc 01       	movw	r26, r24
    4576:	cb 01       	movw	r24, r22
    4578:	8f 83       	std	Y+7, r24	; 0x07
    457a:	98 87       	std	Y+8, r25	; 0x08
    457c:	a9 87       	std	Y+9, r26	; 0x09
    457e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4580:	6f 81       	ldd	r22, Y+7	; 0x07
    4582:	78 85       	ldd	r23, Y+8	; 0x08
    4584:	89 85       	ldd	r24, Y+9	; 0x09
    4586:	9a 85       	ldd	r25, Y+10	; 0x0a
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	40 e8       	ldi	r20, 0x80	; 128
    458e:	5f e3       	ldi	r21, 0x3F	; 63
    4590:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4594:	88 23       	and	r24, r24
    4596:	2c f4       	brge	.+10     	; 0x45a2 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	9e 83       	std	Y+6, r25	; 0x06
    459e:	8d 83       	std	Y+5, r24	; 0x05
    45a0:	3f c0       	rjmp	.+126    	; 0x4620 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    45a2:	6f 81       	ldd	r22, Y+7	; 0x07
    45a4:	78 85       	ldd	r23, Y+8	; 0x08
    45a6:	89 85       	ldd	r24, Y+9	; 0x09
    45a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	3f ef       	ldi	r19, 0xFF	; 255
    45ae:	4f e7       	ldi	r20, 0x7F	; 127
    45b0:	57 e4       	ldi	r21, 0x47	; 71
    45b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45b6:	18 16       	cp	r1, r24
    45b8:	4c f5       	brge	.+82     	; 0x460c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    45bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    45be:	8d 85       	ldd	r24, Y+13	; 0x0d
    45c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    45c2:	20 e0       	ldi	r18, 0x00	; 0
    45c4:	30 e0       	ldi	r19, 0x00	; 0
    45c6:	40 e2       	ldi	r20, 0x20	; 32
    45c8:	51 e4       	ldi	r21, 0x41	; 65
    45ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ce:	dc 01       	movw	r26, r24
    45d0:	cb 01       	movw	r24, r22
    45d2:	bc 01       	movw	r22, r24
    45d4:	cd 01       	movw	r24, r26
    45d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	9e 83       	std	Y+6, r25	; 0x06
    45e0:	8d 83       	std	Y+5, r24	; 0x05
    45e2:	0f c0       	rjmp	.+30     	; 0x4602 <LCD_displayCharacter+0x8ac>
    45e4:	88 ec       	ldi	r24, 0xC8	; 200
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	9c 83       	std	Y+4, r25	; 0x04
    45ea:	8b 83       	std	Y+3, r24	; 0x03
    45ec:	8b 81       	ldd	r24, Y+3	; 0x03
    45ee:	9c 81       	ldd	r25, Y+4	; 0x04
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	f1 f7       	brne	.-4      	; 0x45f0 <LCD_displayCharacter+0x89a>
    45f4:	9c 83       	std	Y+4, r25	; 0x04
    45f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f8:	8d 81       	ldd	r24, Y+5	; 0x05
    45fa:	9e 81       	ldd	r25, Y+6	; 0x06
    45fc:	01 97       	sbiw	r24, 0x01	; 1
    45fe:	9e 83       	std	Y+6, r25	; 0x06
    4600:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4602:	8d 81       	ldd	r24, Y+5	; 0x05
    4604:	9e 81       	ldd	r25, Y+6	; 0x06
    4606:	00 97       	sbiw	r24, 0x00	; 0
    4608:	69 f7       	brne	.-38     	; 0x45e4 <LCD_displayCharacter+0x88e>
    460a:	14 c0       	rjmp	.+40     	; 0x4634 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    460c:	6f 81       	ldd	r22, Y+7	; 0x07
    460e:	78 85       	ldd	r23, Y+8	; 0x08
    4610:	89 85       	ldd	r24, Y+9	; 0x09
    4612:	9a 85       	ldd	r25, Y+10	; 0x0a
    4614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4618:	dc 01       	movw	r26, r24
    461a:	cb 01       	movw	r24, r22
    461c:	9e 83       	std	Y+6, r25	; 0x06
    461e:	8d 83       	std	Y+5, r24	; 0x05
    4620:	8d 81       	ldd	r24, Y+5	; 0x05
    4622:	9e 81       	ldd	r25, Y+6	; 0x06
    4624:	9a 83       	std	Y+2, r25	; 0x02
    4626:	89 83       	std	Y+1, r24	; 0x01
    4628:	89 81       	ldd	r24, Y+1	; 0x01
    462a:	9a 81       	ldd	r25, Y+2	; 0x02
    462c:	01 97       	sbiw	r24, 0x01	; 1
    462e:	f1 f7       	brne	.-4      	; 0x462c <LCD_displayCharacter+0x8d6>
    4630:	9a 83       	std	Y+2, r25	; 0x02
    4632:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay Tdsw=100nsec */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay Th=13nsec */
#endif

}
    4634:	cd 59       	subi	r28, 0x9D	; 157
    4636:	df 4f       	sbci	r29, 0xFF	; 255
    4638:	0f b6       	in	r0, 0x3f	; 63
    463a:	f8 94       	cli
    463c:	de bf       	out	0x3e, r29	; 62
    463e:	0f be       	out	0x3f, r0	; 63
    4640:	cd bf       	out	0x3d, r28	; 61
    4642:	cf 91       	pop	r28
    4644:	df 91       	pop	r29
    4646:	1f 91       	pop	r17
    4648:	0f 91       	pop	r16
    464a:	08 95       	ret

0000464c <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    464c:	df 93       	push	r29
    464e:	cf 93       	push	r28
    4650:	00 d0       	rcall	.+0      	; 0x4652 <LCD_displayString+0x6>
    4652:	0f 92       	push	r0
    4654:	cd b7       	in	r28, 0x3d	; 61
    4656:	de b7       	in	r29, 0x3e	; 62
    4658:	9b 83       	std	Y+3, r25	; 0x03
    465a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    465c:	19 82       	std	Y+1, r1	; 0x01
    465e:	0e c0       	rjmp	.+28     	; 0x467c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    4660:	89 81       	ldd	r24, Y+1	; 0x01
    4662:	28 2f       	mov	r18, r24
    4664:	30 e0       	ldi	r19, 0x00	; 0
    4666:	8a 81       	ldd	r24, Y+2	; 0x02
    4668:	9b 81       	ldd	r25, Y+3	; 0x03
    466a:	fc 01       	movw	r30, r24
    466c:	e2 0f       	add	r30, r18
    466e:	f3 1f       	adc	r31, r19
    4670:	80 81       	ld	r24, Z
    4672:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <LCD_displayCharacter>
		i++;
    4676:	89 81       	ldd	r24, Y+1	; 0x01
    4678:	8f 5f       	subi	r24, 0xFF	; 255
    467a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    467c:	89 81       	ldd	r24, Y+1	; 0x01
    467e:	28 2f       	mov	r18, r24
    4680:	30 e0       	ldi	r19, 0x00	; 0
    4682:	8a 81       	ldd	r24, Y+2	; 0x02
    4684:	9b 81       	ldd	r25, Y+3	; 0x03
    4686:	fc 01       	movw	r30, r24
    4688:	e2 0f       	add	r30, r18
    468a:	f3 1f       	adc	r31, r19
    468c:	80 81       	ld	r24, Z
    468e:	88 23       	and	r24, r24
    4690:	39 f7       	brne	.-50     	; 0x4660 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    4692:	0f 90       	pop	r0
    4694:	0f 90       	pop	r0
    4696:	0f 90       	pop	r0
    4698:	cf 91       	pop	r28
    469a:	df 91       	pop	r29
    469c:	08 95       	ret

0000469e <LCD_moveCursor>:

void LCD_moveCursor(uint8 row,uint8 col)
{
    469e:	df 93       	push	r29
    46a0:	cf 93       	push	r28
    46a2:	00 d0       	rcall	.+0      	; 0x46a4 <LCD_moveCursor+0x6>
    46a4:	00 d0       	rcall	.+0      	; 0x46a6 <LCD_moveCursor+0x8>
    46a6:	0f 92       	push	r0
    46a8:	cd b7       	in	r28, 0x3d	; 61
    46aa:	de b7       	in	r29, 0x3e	; 62
    46ac:	8a 83       	std	Y+2, r24	; 0x02
    46ae:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    46b0:	8a 81       	ldd	r24, Y+2	; 0x02
    46b2:	28 2f       	mov	r18, r24
    46b4:	30 e0       	ldi	r19, 0x00	; 0
    46b6:	3d 83       	std	Y+5, r19	; 0x05
    46b8:	2c 83       	std	Y+4, r18	; 0x04
    46ba:	8c 81       	ldd	r24, Y+4	; 0x04
    46bc:	9d 81       	ldd	r25, Y+5	; 0x05
    46be:	81 30       	cpi	r24, 0x01	; 1
    46c0:	91 05       	cpc	r25, r1
    46c2:	c1 f0       	breq	.+48     	; 0x46f4 <LCD_moveCursor+0x56>
    46c4:	2c 81       	ldd	r18, Y+4	; 0x04
    46c6:	3d 81       	ldd	r19, Y+5	; 0x05
    46c8:	22 30       	cpi	r18, 0x02	; 2
    46ca:	31 05       	cpc	r19, r1
    46cc:	2c f4       	brge	.+10     	; 0x46d8 <LCD_moveCursor+0x3a>
    46ce:	8c 81       	ldd	r24, Y+4	; 0x04
    46d0:	9d 81       	ldd	r25, Y+5	; 0x05
    46d2:	00 97       	sbiw	r24, 0x00	; 0
    46d4:	61 f0       	breq	.+24     	; 0x46ee <LCD_moveCursor+0x50>
    46d6:	19 c0       	rjmp	.+50     	; 0x470a <LCD_moveCursor+0x6c>
    46d8:	2c 81       	ldd	r18, Y+4	; 0x04
    46da:	3d 81       	ldd	r19, Y+5	; 0x05
    46dc:	22 30       	cpi	r18, 0x02	; 2
    46de:	31 05       	cpc	r19, r1
    46e0:	69 f0       	breq	.+26     	; 0x46fc <LCD_moveCursor+0x5e>
    46e2:	8c 81       	ldd	r24, Y+4	; 0x04
    46e4:	9d 81       	ldd	r25, Y+5	; 0x05
    46e6:	83 30       	cpi	r24, 0x03	; 3
    46e8:	91 05       	cpc	r25, r1
    46ea:	61 f0       	breq	.+24     	; 0x4704 <LCD_moveCursor+0x66>
    46ec:	0e c0       	rjmp	.+28     	; 0x470a <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = col;
    46ee:	8b 81       	ldd	r24, Y+3	; 0x03
    46f0:	89 83       	std	Y+1, r24	; 0x01
    46f2:	0b c0       	rjmp	.+22     	; 0x470a <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = 0x40 + col;
    46f4:	8b 81       	ldd	r24, Y+3	; 0x03
    46f6:	80 5c       	subi	r24, 0xC0	; 192
    46f8:	89 83       	std	Y+1, r24	; 0x01
    46fa:	07 c0       	rjmp	.+14     	; 0x470a <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = 0x10 + col;
    46fc:	8b 81       	ldd	r24, Y+3	; 0x03
    46fe:	80 5f       	subi	r24, 0xF0	; 240
    4700:	89 83       	std	Y+1, r24	; 0x01
    4702:	03 c0       	rjmp	.+6      	; 0x470a <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = 0x50 + col;
    4704:	8b 81       	ldd	r24, Y+3	; 0x03
    4706:	80 5b       	subi	r24, 0xB0	; 176
    4708:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    470a:	89 81       	ldd	r24, Y+1	; 0x01
    470c:	80 68       	ori	r24, 0x80	; 128
    470e:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_sendCommand>
}
    4712:	0f 90       	pop	r0
    4714:	0f 90       	pop	r0
    4716:	0f 90       	pop	r0
    4718:	0f 90       	pop	r0
    471a:	0f 90       	pop	r0
    471c:	cf 91       	pop	r28
    471e:	df 91       	pop	r29
    4720:	08 95       	ret

00004722 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    4722:	df 93       	push	r29
    4724:	cf 93       	push	r28
    4726:	00 d0       	rcall	.+0      	; 0x4728 <LCD_displayStringRowColumn+0x6>
    4728:	00 d0       	rcall	.+0      	; 0x472a <LCD_displayStringRowColumn+0x8>
    472a:	cd b7       	in	r28, 0x3d	; 61
    472c:	de b7       	in	r29, 0x3e	; 62
    472e:	89 83       	std	Y+1, r24	; 0x01
    4730:	6a 83       	std	Y+2, r22	; 0x02
    4732:	5c 83       	std	Y+4, r21	; 0x04
    4734:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    4736:	89 81       	ldd	r24, Y+1	; 0x01
    4738:	6a 81       	ldd	r22, Y+2	; 0x02
    473a:	0e 94 4f 23 	call	0x469e	; 0x469e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    473e:	8b 81       	ldd	r24, Y+3	; 0x03
    4740:	9c 81       	ldd	r25, Y+4	; 0x04
    4742:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_displayString>
}
    4746:	0f 90       	pop	r0
    4748:	0f 90       	pop	r0
    474a:	0f 90       	pop	r0
    474c:	0f 90       	pop	r0
    474e:	cf 91       	pop	r28
    4750:	df 91       	pop	r29
    4752:	08 95       	ret

00004754 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    4754:	df 93       	push	r29
    4756:	cf 93       	push	r28
    4758:	cd b7       	in	r28, 0x3d	; 61
    475a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY); /* Send clear display command */
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	0e 94 30 1a 	call	0x3460	; 0x3460 <LCD_sendCommand>
}
    4762:	cf 91       	pop	r28
    4764:	df 91       	pop	r29
    4766:	08 95       	ret

00004768 <LCD_integerToString>:

void LCD_integerToString(int data)
{
    4768:	df 93       	push	r29
    476a:	cf 93       	push	r28
    476c:	cd b7       	in	r28, 0x3d	; 61
    476e:	de b7       	in	r29, 0x3e	; 62
    4770:	62 97       	sbiw	r28, 0x12	; 18
    4772:	0f b6       	in	r0, 0x3f	; 63
    4774:	f8 94       	cli
    4776:	de bf       	out	0x3e, r29	; 62
    4778:	0f be       	out	0x3f, r0	; 63
    477a:	cd bf       	out	0x3d, r28	; 61
    477c:	9a 8b       	std	Y+18, r25	; 0x12
    477e:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* itoa C function convert data to its corresponding ASCII value, 10 base for decimal */
    4780:	89 89       	ldd	r24, Y+17	; 0x11
    4782:	9a 89       	ldd	r25, Y+18	; 0x12
    4784:	9e 01       	movw	r18, r28
    4786:	2f 5f       	subi	r18, 0xFF	; 255
    4788:	3f 4f       	sbci	r19, 0xFF	; 255
    478a:	b9 01       	movw	r22, r18
    478c:	4a e0       	ldi	r20, 0x0A	; 10
    478e:	50 e0       	ldi	r21, 0x00	; 0
    4790:	0e 94 3b 26 	call	0x4c76	; 0x4c76 <itoa>
	LCD_displayString(buff); /* Display the string */
    4794:	ce 01       	movw	r24, r28
    4796:	01 96       	adiw	r24, 0x01	; 1
    4798:	0e 94 26 23 	call	0x464c	; 0x464c <LCD_displayString>
}
    479c:	62 96       	adiw	r28, 0x12	; 18
    479e:	0f b6       	in	r0, 0x3f	; 63
    47a0:	f8 94       	cli
    47a2:	de bf       	out	0x3e, r29	; 62
    47a4:	0f be       	out	0x3f, r0	; 63
    47a6:	cd bf       	out	0x3d, r28	; 61
    47a8:	cf 91       	pop	r28
    47aa:	df 91       	pop	r29
    47ac:	08 95       	ret

000047ae <LEDS_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void LEDS_Init(void)
{
    47ae:	df 93       	push	r29
    47b0:	cf 93       	push	r28
    47b2:	cd b7       	in	r28, 0x3d	; 61
    47b4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LED1_PORT, LED1_PIN , PIN_OUTPUT);
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	62 e0       	ldi	r22, 0x02	; 2
    47ba:	41 e0       	ldi	r20, 0x01	; 1
    47bc:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED2_PORT, LED2_PIN , PIN_OUTPUT);
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	63 e0       	ldi	r22, 0x03	; 3
    47c4:	41 e0       	ldi	r20, 0x01	; 1
    47c6:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED3_PORT, LED3_PIN , PIN_OUTPUT);
    47ca:	80 e0       	ldi	r24, 0x00	; 0
    47cc:	64 e0       	ldi	r22, 0x04	; 4
    47ce:	41 e0       	ldi	r20, 0x01	; 1
    47d0:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_setupPinDirection>

	GPIO_writePin(LED1_PORT , LED1_PIN , LOGIC_LOW);
    47d4:	80 e0       	ldi	r24, 0x00	; 0
    47d6:	62 e0       	ldi	r22, 0x02	; 2
    47d8:	40 e0       	ldi	r20, 0x00	; 0
    47da:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LED2_PORT , LED2_PIN , LOGIC_LOW);
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	63 e0       	ldi	r22, 0x03	; 3
    47e2:	40 e0       	ldi	r20, 0x00	; 0
    47e4:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LED3_PORT , LED3_PIN , LOGIC_LOW);
    47e8:	80 e0       	ldi	r24, 0x00	; 0
    47ea:	64 e0       	ldi	r22, 0x04	; 4
    47ec:	40 e0       	ldi	r20, 0x00	; 0
    47ee:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>

}
    47f2:	cf 91       	pop	r28
    47f4:	df 91       	pop	r29
    47f6:	08 95       	ret

000047f8 <LED_ON>:

void LED_ON(LED_Number led)
{
    47f8:	df 93       	push	r29
    47fa:	cf 93       	push	r28
    47fc:	00 d0       	rcall	.+0      	; 0x47fe <LED_ON+0x6>
    47fe:	0f 92       	push	r0
    4800:	cd b7       	in	r28, 0x3d	; 61
    4802:	de b7       	in	r29, 0x3e	; 62
    4804:	89 83       	std	Y+1, r24	; 0x01
	switch(led)
    4806:	89 81       	ldd	r24, Y+1	; 0x01
    4808:	28 2f       	mov	r18, r24
    480a:	30 e0       	ldi	r19, 0x00	; 0
    480c:	3b 83       	std	Y+3, r19	; 0x03
    480e:	2a 83       	std	Y+2, r18	; 0x02
    4810:	8a 81       	ldd	r24, Y+2	; 0x02
    4812:	9b 81       	ldd	r25, Y+3	; 0x03
    4814:	81 30       	cpi	r24, 0x01	; 1
    4816:	91 05       	cpc	r25, r1
    4818:	79 f0       	breq	.+30     	; 0x4838 <LED_ON+0x40>
    481a:	2a 81       	ldd	r18, Y+2	; 0x02
    481c:	3b 81       	ldd	r19, Y+3	; 0x03
    481e:	22 30       	cpi	r18, 0x02	; 2
    4820:	31 05       	cpc	r19, r1
    4822:	81 f0       	breq	.+32     	; 0x4844 <LED_ON+0x4c>
    4824:	8a 81       	ldd	r24, Y+2	; 0x02
    4826:	9b 81       	ldd	r25, Y+3	; 0x03
    4828:	00 97       	sbiw	r24, 0x00	; 0
    482a:	89 f4       	brne	.+34     	; 0x484e <LED_ON+0x56>
	{
	case LED_1 :
		GPIO_writePin(LED1_PORT , LED1_PIN , LOGIC_HIGH);
    482c:	80 e0       	ldi	r24, 0x00	; 0
    482e:	62 e0       	ldi	r22, 0x02	; 2
    4830:	41 e0       	ldi	r20, 0x01	; 1
    4832:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    4836:	0b c0       	rjmp	.+22     	; 0x484e <LED_ON+0x56>
		break;
	case LED_2 :
		GPIO_writePin(LED2_PORT , LED2_PIN , LOGIC_HIGH);
    4838:	80 e0       	ldi	r24, 0x00	; 0
    483a:	63 e0       	ldi	r22, 0x03	; 3
    483c:	41 e0       	ldi	r20, 0x01	; 1
    483e:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    4842:	05 c0       	rjmp	.+10     	; 0x484e <LED_ON+0x56>
		break;
	case LED_3 :
		GPIO_writePin(LED3_PORT , LED3_PIN , LOGIC_HIGH);
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	64 e0       	ldi	r22, 0x04	; 4
    4848:	41 e0       	ldi	r20, 0x01	; 1
    484a:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
		break;
	}
}
    484e:	0f 90       	pop	r0
    4850:	0f 90       	pop	r0
    4852:	0f 90       	pop	r0
    4854:	cf 91       	pop	r28
    4856:	df 91       	pop	r29
    4858:	08 95       	ret

0000485a <LED_OFF>:


void LED_OFF(LED_Number led)
{
    485a:	df 93       	push	r29
    485c:	cf 93       	push	r28
    485e:	00 d0       	rcall	.+0      	; 0x4860 <LED_OFF+0x6>
    4860:	0f 92       	push	r0
    4862:	cd b7       	in	r28, 0x3d	; 61
    4864:	de b7       	in	r29, 0x3e	; 62
    4866:	89 83       	std	Y+1, r24	; 0x01
	switch(led)
    4868:	89 81       	ldd	r24, Y+1	; 0x01
    486a:	28 2f       	mov	r18, r24
    486c:	30 e0       	ldi	r19, 0x00	; 0
    486e:	3b 83       	std	Y+3, r19	; 0x03
    4870:	2a 83       	std	Y+2, r18	; 0x02
    4872:	8a 81       	ldd	r24, Y+2	; 0x02
    4874:	9b 81       	ldd	r25, Y+3	; 0x03
    4876:	81 30       	cpi	r24, 0x01	; 1
    4878:	91 05       	cpc	r25, r1
    487a:	79 f0       	breq	.+30     	; 0x489a <LED_OFF+0x40>
    487c:	2a 81       	ldd	r18, Y+2	; 0x02
    487e:	3b 81       	ldd	r19, Y+3	; 0x03
    4880:	22 30       	cpi	r18, 0x02	; 2
    4882:	31 05       	cpc	r19, r1
    4884:	81 f0       	breq	.+32     	; 0x48a6 <LED_OFF+0x4c>
    4886:	8a 81       	ldd	r24, Y+2	; 0x02
    4888:	9b 81       	ldd	r25, Y+3	; 0x03
    488a:	00 97       	sbiw	r24, 0x00	; 0
    488c:	89 f4       	brne	.+34     	; 0x48b0 <LED_OFF+0x56>
	{
	case LED_1 :
		GPIO_writePin(LED1_PORT , LED1_PIN , LOGIC_LOW);
    488e:	80 e0       	ldi	r24, 0x00	; 0
    4890:	62 e0       	ldi	r22, 0x02	; 2
    4892:	40 e0       	ldi	r20, 0x00	; 0
    4894:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    4898:	0b c0       	rjmp	.+22     	; 0x48b0 <LED_OFF+0x56>
		break;
	case LED_2 :
		GPIO_writePin(LED2_PORT , LED2_PIN , LOGIC_LOW);
    489a:	80 e0       	ldi	r24, 0x00	; 0
    489c:	63 e0       	ldi	r22, 0x03	; 3
    489e:	40 e0       	ldi	r20, 0x00	; 0
    48a0:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
    48a4:	05 c0       	rjmp	.+10     	; 0x48b0 <LED_OFF+0x56>
		break;
	case LED_3 :
		GPIO_writePin(LED3_PORT , LED3_PIN , LOGIC_LOW);
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	64 e0       	ldi	r22, 0x04	; 4
    48aa:	40 e0       	ldi	r20, 0x00	; 0
    48ac:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
		break;
	}
}
    48b0:	0f 90       	pop	r0
    48b2:	0f 90       	pop	r0
    48b4:	0f 90       	pop	r0
    48b6:	cf 91       	pop	r28
    48b8:	df 91       	pop	r29
    48ba:	08 95       	ret

000048bc <LEDS_all_off>:

void LEDS_all_off(void)
{
    48bc:	df 93       	push	r29
    48be:	cf 93       	push	r28
    48c0:	cd b7       	in	r28, 0x3d	; 61
    48c2:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(LED1_PORT , LED1_PIN , LOGIC_LOW);
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	62 e0       	ldi	r22, 0x02	; 2
    48c8:	40 e0       	ldi	r20, 0x00	; 0
    48ca:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LED2_PORT , LED2_PIN , LOGIC_LOW);
    48ce:	80 e0       	ldi	r24, 0x00	; 0
    48d0:	63 e0       	ldi	r22, 0x03	; 3
    48d2:	40 e0       	ldi	r20, 0x00	; 0
    48d4:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
	GPIO_writePin(LED3_PORT , LED3_PIN , LOGIC_LOW);
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	64 e0       	ldi	r22, 0x04	; 4
    48dc:	40 e0       	ldi	r20, 0x00	; 0
    48de:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
}
    48e2:	cf 91       	pop	r28
    48e4:	df 91       	pop	r29
    48e6:	08 95       	ret

000048e8 <MQ135_getGassPer>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
int MQ135_getGassPer(void)
{
    48e8:	df 93       	push	r29
    48ea:	cf 93       	push	r28
    48ec:	00 d0       	rcall	.+0      	; 0x48ee <MQ135_getGassPer+0x6>
    48ee:	00 d0       	rcall	.+0      	; 0x48f0 <MQ135_getGassPer+0x8>
    48f0:	cd b7       	in	r28, 0x3d	; 61
    48f2:	de b7       	in	r29, 0x3e	; 62
	int gass_value = 0;
    48f4:	1c 82       	std	Y+4, r1	; 0x04
    48f6:	1b 82       	std	Y+3, r1	; 0x03
	int gass_percentage = 0;
    48f8:	1a 82       	std	Y+2, r1	; 0x02
    48fa:	19 82       	std	Y+1, r1	; 0x01

	gass_value = ADC_Read(SENSOR_CHANNEL_ID);
    48fc:	80 e0       	ldi	r24, 0x00	; 0
    48fe:	0e 94 dd 15 	call	0x2bba	; 0x2bba <ADC_Read>
    4902:	9c 83       	std	Y+4, r25	; 0x04
    4904:	8b 83       	std	Y+3, r24	; 0x03
	gass_percentage = ((gass_value/1023.0)*100);
    4906:	8b 81       	ldd	r24, Y+3	; 0x03
    4908:	9c 81       	ldd	r25, Y+4	; 0x04
    490a:	aa 27       	eor	r26, r26
    490c:	97 fd       	sbrc	r25, 7
    490e:	a0 95       	com	r26
    4910:	ba 2f       	mov	r27, r26
    4912:	bc 01       	movw	r22, r24
    4914:	cd 01       	movw	r24, r26
    4916:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    491a:	dc 01       	movw	r26, r24
    491c:	cb 01       	movw	r24, r22
    491e:	bc 01       	movw	r22, r24
    4920:	cd 01       	movw	r24, r26
    4922:	20 e0       	ldi	r18, 0x00	; 0
    4924:	30 ec       	ldi	r19, 0xC0	; 192
    4926:	4f e7       	ldi	r20, 0x7F	; 127
    4928:	54 e4       	ldi	r21, 0x44	; 68
    492a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    492e:	dc 01       	movw	r26, r24
    4930:	cb 01       	movw	r24, r22
    4932:	bc 01       	movw	r22, r24
    4934:	cd 01       	movw	r24, r26
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	48 ec       	ldi	r20, 0xC8	; 200
    493c:	52 e4       	ldi	r21, 0x42	; 66
    493e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4942:	dc 01       	movw	r26, r24
    4944:	cb 01       	movw	r24, r22
    4946:	bc 01       	movw	r22, r24
    4948:	cd 01       	movw	r24, r26
    494a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	9a 83       	std	Y+2, r25	; 0x02
    4954:	89 83       	std	Y+1, r24	; 0x01

	return gass_percentage;
    4956:	89 81       	ldd	r24, Y+1	; 0x01
    4958:	9a 81       	ldd	r25, Y+2	; 0x02
}
    495a:	0f 90       	pop	r0
    495c:	0f 90       	pop	r0
    495e:	0f 90       	pop	r0
    4960:	0f 90       	pop	r0
    4962:	cf 91       	pop	r28
    4964:	df 91       	pop	r29
    4966:	08 95       	ret

00004968 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    4968:	1f 92       	push	r1
    496a:	0f 92       	push	r0
    496c:	0f b6       	in	r0, 0x3f	; 63
    496e:	0f 92       	push	r0
    4970:	11 24       	eor	r1, r1
    4972:	2f 93       	push	r18
    4974:	3f 93       	push	r19
    4976:	4f 93       	push	r20
    4978:	5f 93       	push	r21
    497a:	6f 93       	push	r22
    497c:	7f 93       	push	r23
    497e:	8f 93       	push	r24
    4980:	9f 93       	push	r25
    4982:	af 93       	push	r26
    4984:	bf 93       	push	r27
    4986:	ef 93       	push	r30
    4988:	ff 93       	push	r31
    498a:	df 93       	push	r29
    498c:	cf 93       	push	r28
    498e:	cd b7       	in	r28, 0x3d	; 61
    4990:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    4992:	80 91 72 02 	lds	r24, 0x0272
    4996:	90 91 73 02 	lds	r25, 0x0273
    499a:	00 97       	sbiw	r24, 0x00	; 0
    499c:	29 f0       	breq	.+10     	; 0x49a8 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the Interrupt occurs */
		(*g_callBackPtr)();
    499e:	e0 91 72 02 	lds	r30, 0x0272
    49a2:	f0 91 73 02 	lds	r31, 0x0273
    49a6:	09 95       	icall
	}
}
    49a8:	cf 91       	pop	r28
    49aa:	df 91       	pop	r29
    49ac:	ff 91       	pop	r31
    49ae:	ef 91       	pop	r30
    49b0:	bf 91       	pop	r27
    49b2:	af 91       	pop	r26
    49b4:	9f 91       	pop	r25
    49b6:	8f 91       	pop	r24
    49b8:	7f 91       	pop	r23
    49ba:	6f 91       	pop	r22
    49bc:	5f 91       	pop	r21
    49be:	4f 91       	pop	r20
    49c0:	3f 91       	pop	r19
    49c2:	2f 91       	pop	r18
    49c4:	0f 90       	pop	r0
    49c6:	0f be       	out	0x3f, r0	; 63
    49c8:	0f 90       	pop	r0
    49ca:	1f 90       	pop	r1
    49cc:	18 95       	reti

000049ce <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    49ce:	1f 92       	push	r1
    49d0:	0f 92       	push	r0
    49d2:	0f b6       	in	r0, 0x3f	; 63
    49d4:	0f 92       	push	r0
    49d6:	11 24       	eor	r1, r1
    49d8:	2f 93       	push	r18
    49da:	3f 93       	push	r19
    49dc:	4f 93       	push	r20
    49de:	5f 93       	push	r21
    49e0:	6f 93       	push	r22
    49e2:	7f 93       	push	r23
    49e4:	8f 93       	push	r24
    49e6:	9f 93       	push	r25
    49e8:	af 93       	push	r26
    49ea:	bf 93       	push	r27
    49ec:	ef 93       	push	r30
    49ee:	ff 93       	push	r31
    49f0:	df 93       	push	r29
    49f2:	cf 93       	push	r28
    49f4:	cd b7       	in	r28, 0x3d	; 61
    49f6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    49f8:	80 91 72 02 	lds	r24, 0x0272
    49fc:	90 91 73 02 	lds	r25, 0x0273
    4a00:	00 97       	sbiw	r24, 0x00	; 0
    4a02:	29 f0       	breq	.+10     	; 0x4a0e <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the Interrupt occurs */
		(*g_callBackPtr)();
    4a04:	e0 91 72 02 	lds	r30, 0x0272
    4a08:	f0 91 73 02 	lds	r31, 0x0273
    4a0c:	09 95       	icall
	}
}
    4a0e:	cf 91       	pop	r28
    4a10:	df 91       	pop	r29
    4a12:	ff 91       	pop	r31
    4a14:	ef 91       	pop	r30
    4a16:	bf 91       	pop	r27
    4a18:	af 91       	pop	r26
    4a1a:	9f 91       	pop	r25
    4a1c:	8f 91       	pop	r24
    4a1e:	7f 91       	pop	r23
    4a20:	6f 91       	pop	r22
    4a22:	5f 91       	pop	r21
    4a24:	4f 91       	pop	r20
    4a26:	3f 91       	pop	r19
    4a28:	2f 91       	pop	r18
    4a2a:	0f 90       	pop	r0
    4a2c:	0f be       	out	0x3f, r0	; 63
    4a2e:	0f 90       	pop	r0
    4a30:	1f 90       	pop	r1
    4a32:	18 95       	reti

00004a34 <Timer1_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    4a34:	df 93       	push	r29
    4a36:	cf 93       	push	r28
    4a38:	00 d0       	rcall	.+0      	; 0x4a3a <Timer1_init+0x6>
    4a3a:	00 d0       	rcall	.+0      	; 0x4a3c <Timer1_init+0x8>
    4a3c:	cd b7       	in	r28, 0x3d	; 61
    4a3e:	de b7       	in	r29, 0x3e	; 62
    4a40:	9a 83       	std	Y+2, r25	; 0x02
    4a42:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->mode)
    4a44:	e9 81       	ldd	r30, Y+1	; 0x01
    4a46:	fa 81       	ldd	r31, Y+2	; 0x02
    4a48:	87 81       	ldd	r24, Z+7	; 0x07
    4a4a:	28 2f       	mov	r18, r24
    4a4c:	30 e0       	ldi	r19, 0x00	; 0
    4a4e:	3c 83       	std	Y+4, r19	; 0x04
    4a50:	2b 83       	std	Y+3, r18	; 0x03
    4a52:	8b 81       	ldd	r24, Y+3	; 0x03
    4a54:	9c 81       	ldd	r25, Y+4	; 0x04
    4a56:	81 30       	cpi	r24, 0x01	; 1
    4a58:	91 05       	cpc	r25, r1
    4a5a:	19 f1       	breq	.+70     	; 0x4aa2 <Timer1_init+0x6e>
    4a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    4a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    4a60:	22 30       	cpi	r18, 0x02	; 2
    4a62:	31 05       	cpc	r19, r1
    4a64:	09 f4       	brne	.+2      	; 0x4a68 <Timer1_init+0x34>
    4a66:	4b c0       	rjmp	.+150    	; 0x4afe <Timer1_init+0xca>
    4a68:	8b 81       	ldd	r24, Y+3	; 0x03
    4a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    4a6c:	00 97       	sbiw	r24, 0x00	; 0
    4a6e:	09 f0       	breq	.+2      	; 0x4a72 <Timer1_init+0x3e>
    4a70:	75 c0       	rjmp	.+234    	; 0x4b5c <Timer1_init+0x128>
	{
	case NORMAL_MODE:
		TCNT1  = Config_Ptr->initial_value;
    4a72:	ac e4       	ldi	r26, 0x4C	; 76
    4a74:	b0 e0       	ldi	r27, 0x00	; 0
    4a76:	e9 81       	ldd	r30, Y+1	; 0x01
    4a78:	fa 81       	ldd	r31, Y+2	; 0x02
    4a7a:	80 81       	ld	r24, Z
    4a7c:	91 81       	ldd	r25, Z+1	; 0x01
    4a7e:	11 96       	adiw	r26, 0x01	; 1
    4a80:	9c 93       	st	X, r25
    4a82:	8e 93       	st	-X, r24
		TIMSK  = (1<<TOIE1);
    4a84:	e9 e5       	ldi	r30, 0x59	; 89
    4a86:	f0 e0       	ldi	r31, 0x00	; 0
    4a88:	84 e0       	ldi	r24, 0x04	; 4
    4a8a:	80 83       	st	Z, r24
		TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    4a8c:	ef e4       	ldi	r30, 0x4F	; 79
    4a8e:	f0 e0       	ldi	r31, 0x00	; 0
    4a90:	8c e0       	ldi	r24, 0x0C	; 12
    4a92:	80 83       	st	Z, r24
		TCCR1B = Config_Ptr->prescaler;
    4a94:	ae e4       	ldi	r26, 0x4E	; 78
    4a96:	b0 e0       	ldi	r27, 0x00	; 0
    4a98:	e9 81       	ldd	r30, Y+1	; 0x01
    4a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    4a9c:	86 81       	ldd	r24, Z+6	; 0x06
    4a9e:	8c 93       	st	X, r24
    4aa0:	5d c0       	rjmp	.+186    	; 0x4b5c <Timer1_init+0x128>
		break;
	case COMPARE_MODE:
		TCCR1A = (1<<FOC1A);
    4aa2:	ef e4       	ldi	r30, 0x4F	; 79
    4aa4:	f0 e0       	ldi	r31, 0x00	; 0
    4aa6:	88 e0       	ldi	r24, 0x08	; 8
    4aa8:	80 83       	st	Z, r24
		TCCR1B = (1<<WGM12);
    4aaa:	ee e4       	ldi	r30, 0x4E	; 78
    4aac:	f0 e0       	ldi	r31, 0x00	; 0
    4aae:	88 e0       	ldi	r24, 0x08	; 8
    4ab0:	80 83       	st	Z, r24
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    4ab2:	ae e4       	ldi	r26, 0x4E	; 78
    4ab4:	b0 e0       	ldi	r27, 0x00	; 0
    4ab6:	ee e4       	ldi	r30, 0x4E	; 78
    4ab8:	f0 e0       	ldi	r31, 0x00	; 0
    4aba:	80 81       	ld	r24, Z
    4abc:	98 2f       	mov	r25, r24
    4abe:	98 7f       	andi	r25, 0xF8	; 248
    4ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    4ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    4ac4:	86 81       	ldd	r24, Z+6	; 0x06
    4ac6:	89 2b       	or	r24, r25
    4ac8:	8c 93       	st	X, r24
		TCNT1  = Config_Ptr->initial_value;
    4aca:	ac e4       	ldi	r26, 0x4C	; 76
    4acc:	b0 e0       	ldi	r27, 0x00	; 0
    4ace:	e9 81       	ldd	r30, Y+1	; 0x01
    4ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    4ad2:	80 81       	ld	r24, Z
    4ad4:	91 81       	ldd	r25, Z+1	; 0x01
    4ad6:	11 96       	adiw	r26, 0x01	; 1
    4ad8:	9c 93       	st	X, r25
    4ada:	8e 93       	st	-X, r24
		OCR1A  = Config_Ptr->compare_value;
    4adc:	aa e4       	ldi	r26, 0x4A	; 74
    4ade:	b0 e0       	ldi	r27, 0x00	; 0
    4ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    4ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    4ae4:	82 81       	ldd	r24, Z+2	; 0x02
    4ae6:	93 81       	ldd	r25, Z+3	; 0x03
    4ae8:	11 96       	adiw	r26, 0x01	; 1
    4aea:	9c 93       	st	X, r25
    4aec:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);
    4aee:	a9 e5       	ldi	r26, 0x59	; 89
    4af0:	b0 e0       	ldi	r27, 0x00	; 0
    4af2:	e9 e5       	ldi	r30, 0x59	; 89
    4af4:	f0 e0       	ldi	r31, 0x00	; 0
    4af6:	80 81       	ld	r24, Z
    4af8:	80 61       	ori	r24, 0x10	; 16
    4afa:	8c 93       	st	X, r24
    4afc:	2f c0       	rjmp	.+94     	; 0x4b5c <Timer1_init+0x128>
		break;
	case PWM_MODE:
		/* Make OC1A pin as output */
		GPIO_setupPinDirection(PORTD_ID , PIN5_ID , PIN_OUTPUT);
    4afe:	83 e0       	ldi	r24, 0x03	; 3
    4b00:	65 e0       	ldi	r22, 0x05	; 5
    4b02:	41 e0       	ldi	r20, 0x01	; 1
    4b04:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_setupPinDirection>

		TCNT1  = 0;
    4b08:	ec e4       	ldi	r30, 0x4C	; 76
    4b0a:	f0 e0       	ldi	r31, 0x00	; 0
    4b0c:	11 82       	std	Z+1, r1	; 0x01
    4b0e:	10 82       	st	Z, r1
		ICR1   = Config_Ptr->top_value; /* Set TOP count for timer1 in ICR1 register */
    4b10:	a6 e4       	ldi	r26, 0x46	; 70
    4b12:	b0 e0       	ldi	r27, 0x00	; 0
    4b14:	e9 81       	ldd	r30, Y+1	; 0x01
    4b16:	fa 81       	ldd	r31, Y+2	; 0x02
    4b18:	84 81       	ldd	r24, Z+4	; 0x04
    4b1a:	95 81       	ldd	r25, Z+5	; 0x05
    4b1c:	11 96       	adiw	r26, 0x01	; 1
    4b1e:	9c 93       	st	X, r25
    4b20:	8e 93       	st	-X, r24
		OCR1A  = Config_Ptr->compare_value;
    4b22:	aa e4       	ldi	r26, 0x4A	; 74
    4b24:	b0 e0       	ldi	r27, 0x00	; 0
    4b26:	e9 81       	ldd	r30, Y+1	; 0x01
    4b28:	fa 81       	ldd	r31, Y+2	; 0x02
    4b2a:	82 81       	ldd	r24, Z+2	; 0x02
    4b2c:	93 81       	ldd	r25, Z+3	; 0x03
    4b2e:	11 96       	adiw	r26, 0x01	; 1
    4b30:	9c 93       	st	X, r25
    4b32:	8e 93       	st	-X, r24
	    TCCR1A = (1<<WGM11) | (1<<COM1A1);
    4b34:	ef e4       	ldi	r30, 0x4F	; 79
    4b36:	f0 e0       	ldi	r31, 0x00	; 0
    4b38:	82 e8       	ldi	r24, 0x82	; 130
    4b3a:	80 83       	st	Z, r24
		TCCR1B = (1<<WGM12) | (1<<WGM13);
    4b3c:	ee e4       	ldi	r30, 0x4E	; 78
    4b3e:	f0 e0       	ldi	r31, 0x00	; 0
    4b40:	88 e1       	ldi	r24, 0x18	; 24
    4b42:	80 83       	st	Z, r24
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    4b44:	ae e4       	ldi	r26, 0x4E	; 78
    4b46:	b0 e0       	ldi	r27, 0x00	; 0
    4b48:	ee e4       	ldi	r30, 0x4E	; 78
    4b4a:	f0 e0       	ldi	r31, 0x00	; 0
    4b4c:	80 81       	ld	r24, Z
    4b4e:	98 2f       	mov	r25, r24
    4b50:	98 7f       	andi	r25, 0xF8	; 248
    4b52:	e9 81       	ldd	r30, Y+1	; 0x01
    4b54:	fa 81       	ldd	r31, Y+2	; 0x02
    4b56:	86 81       	ldd	r24, Z+6	; 0x06
    4b58:	89 2b       	or	r24, r25
    4b5a:	8c 93       	st	X, r24
	}
}
    4b5c:	0f 90       	pop	r0
    4b5e:	0f 90       	pop	r0
    4b60:	0f 90       	pop	r0
    4b62:	0f 90       	pop	r0
    4b64:	cf 91       	pop	r28
    4b66:	df 91       	pop	r29
    4b68:	08 95       	ret

00004b6a <Timer1_deInit>:

void Timer1_deInit(void)
{
    4b6a:	df 93       	push	r29
    4b6c:	cf 93       	push	r28
    4b6e:	cd b7       	in	r28, 0x3d	; 61
    4b70:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    4b72:	ef e4       	ldi	r30, 0x4F	; 79
    4b74:	f0 e0       	ldi	r31, 0x00	; 0
    4b76:	10 82       	st	Z, r1
	TCCR1B = 0;
    4b78:	ee e4       	ldi	r30, 0x4E	; 78
    4b7a:	f0 e0       	ldi	r31, 0x00	; 0
    4b7c:	10 82       	st	Z, r1
	TCNT1 = 0;
    4b7e:	ec e4       	ldi	r30, 0x4C	; 76
    4b80:	f0 e0       	ldi	r31, 0x00	; 0
    4b82:	11 82       	std	Z+1, r1	; 0x01
    4b84:	10 82       	st	Z, r1
	TIMSK = 0;
    4b86:	e9 e5       	ldi	r30, 0x59	; 89
    4b88:	f0 e0       	ldi	r31, 0x00	; 0
    4b8a:	10 82       	st	Z, r1
}
    4b8c:	cf 91       	pop	r28
    4b8e:	df 91       	pop	r29
    4b90:	08 95       	ret

00004b92 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    4b92:	df 93       	push	r29
    4b94:	cf 93       	push	r28
    4b96:	00 d0       	rcall	.+0      	; 0x4b98 <Timer1_setCallBack+0x6>
    4b98:	cd b7       	in	r28, 0x3d	; 61
    4b9a:	de b7       	in	r29, 0x3e	; 62
    4b9c:	9a 83       	std	Y+2, r25	; 0x02
    4b9e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    4ba0:	89 81       	ldd	r24, Y+1	; 0x01
    4ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ba4:	90 93 73 02 	sts	0x0273, r25
    4ba8:	80 93 72 02 	sts	0x0272, r24
}
    4bac:	0f 90       	pop	r0
    4bae:	0f 90       	pop	r0
    4bb0:	cf 91       	pop	r28
    4bb2:	df 91       	pop	r29
    4bb4:	08 95       	ret

00004bb6 <Pump_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Pump_init(void)
{
    4bb6:	df 93       	push	r29
    4bb8:	cf 93       	push	r28
    4bba:	cd b7       	in	r28, 0x3d	; 61
    4bbc:	de b7       	in	r29, 0x3e	; 62
	/* Setup the direction for the buzzer pins as output pins */
	GPIO_setupPinDirection(PUMP_PORT_ID , PUMP_PIN_ID,PIN_OUTPUT);
    4bbe:	83 e0       	ldi	r24, 0x03	; 3
    4bc0:	67 e0       	ldi	r22, 0x07	; 7
    4bc2:	41 e0       	ldi	r20, 0x01	; 1
    4bc4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <GPIO_setupPinDirection>

	/*  Turn off the buzzer  */
	GPIO_writePin(PUMP_PORT_ID , PUMP_PIN_ID,LOGIC_LOW);
    4bc8:	83 e0       	ldi	r24, 0x03	; 3
    4bca:	67 e0       	ldi	r22, 0x07	; 7
    4bcc:	40 e0       	ldi	r20, 0x00	; 0
    4bce:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
}
    4bd2:	cf 91       	pop	r28
    4bd4:	df 91       	pop	r29
    4bd6:	08 95       	ret

00004bd8 <Pump_Activate>:

void Pump_Activate(void)
{
    4bd8:	df 93       	push	r29
    4bda:	cf 93       	push	r28
    4bdc:	cd b7       	in	r28, 0x3d	; 61
    4bde:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PUMP_PORT_ID , PUMP_PIN_ID ,LOGIC_HIGH);
    4be0:	83 e0       	ldi	r24, 0x03	; 3
    4be2:	67 e0       	ldi	r22, 0x07	; 7
    4be4:	41 e0       	ldi	r20, 0x01	; 1
    4be6:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
}
    4bea:	cf 91       	pop	r28
    4bec:	df 91       	pop	r29
    4bee:	08 95       	ret

00004bf0 <Pump_deActivate>:

void Pump_deActivate(void)
{
    4bf0:	df 93       	push	r29
    4bf2:	cf 93       	push	r28
    4bf4:	cd b7       	in	r28, 0x3d	; 61
    4bf6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PUMP_PORT_ID , PUMP_PIN_ID ,LOGIC_LOW);
    4bf8:	83 e0       	ldi	r24, 0x03	; 3
    4bfa:	67 e0       	ldi	r22, 0x07	; 7
    4bfc:	40 e0       	ldi	r20, 0x00	; 0
    4bfe:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <GPIO_writePin>
}
    4c02:	cf 91       	pop	r28
    4c04:	df 91       	pop	r29
    4c06:	08 95       	ret

00004c08 <__prologue_saves__>:
    4c08:	2f 92       	push	r2
    4c0a:	3f 92       	push	r3
    4c0c:	4f 92       	push	r4
    4c0e:	5f 92       	push	r5
    4c10:	6f 92       	push	r6
    4c12:	7f 92       	push	r7
    4c14:	8f 92       	push	r8
    4c16:	9f 92       	push	r9
    4c18:	af 92       	push	r10
    4c1a:	bf 92       	push	r11
    4c1c:	cf 92       	push	r12
    4c1e:	df 92       	push	r13
    4c20:	ef 92       	push	r14
    4c22:	ff 92       	push	r15
    4c24:	0f 93       	push	r16
    4c26:	1f 93       	push	r17
    4c28:	cf 93       	push	r28
    4c2a:	df 93       	push	r29
    4c2c:	cd b7       	in	r28, 0x3d	; 61
    4c2e:	de b7       	in	r29, 0x3e	; 62
    4c30:	ca 1b       	sub	r28, r26
    4c32:	db 0b       	sbc	r29, r27
    4c34:	0f b6       	in	r0, 0x3f	; 63
    4c36:	f8 94       	cli
    4c38:	de bf       	out	0x3e, r29	; 62
    4c3a:	0f be       	out	0x3f, r0	; 63
    4c3c:	cd bf       	out	0x3d, r28	; 61
    4c3e:	09 94       	ijmp

00004c40 <__epilogue_restores__>:
    4c40:	2a 88       	ldd	r2, Y+18	; 0x12
    4c42:	39 88       	ldd	r3, Y+17	; 0x11
    4c44:	48 88       	ldd	r4, Y+16	; 0x10
    4c46:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c48:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c50:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c52:	b9 84       	ldd	r11, Y+9	; 0x09
    4c54:	c8 84       	ldd	r12, Y+8	; 0x08
    4c56:	df 80       	ldd	r13, Y+7	; 0x07
    4c58:	ee 80       	ldd	r14, Y+6	; 0x06
    4c5a:	fd 80       	ldd	r15, Y+5	; 0x05
    4c5c:	0c 81       	ldd	r16, Y+4	; 0x04
    4c5e:	1b 81       	ldd	r17, Y+3	; 0x03
    4c60:	aa 81       	ldd	r26, Y+2	; 0x02
    4c62:	b9 81       	ldd	r27, Y+1	; 0x01
    4c64:	ce 0f       	add	r28, r30
    4c66:	d1 1d       	adc	r29, r1
    4c68:	0f b6       	in	r0, 0x3f	; 63
    4c6a:	f8 94       	cli
    4c6c:	de bf       	out	0x3e, r29	; 62
    4c6e:	0f be       	out	0x3f, r0	; 63
    4c70:	cd bf       	out	0x3d, r28	; 61
    4c72:	ed 01       	movw	r28, r26
    4c74:	08 95       	ret

00004c76 <itoa>:
    4c76:	fb 01       	movw	r30, r22
    4c78:	9f 01       	movw	r18, r30
    4c7a:	e8 94       	clt
    4c7c:	42 30       	cpi	r20, 0x02	; 2
    4c7e:	c4 f0       	brlt	.+48     	; 0x4cb0 <itoa+0x3a>
    4c80:	45 32       	cpi	r20, 0x25	; 37
    4c82:	b4 f4       	brge	.+44     	; 0x4cb0 <itoa+0x3a>
    4c84:	4a 30       	cpi	r20, 0x0A	; 10
    4c86:	29 f4       	brne	.+10     	; 0x4c92 <itoa+0x1c>
    4c88:	97 fb       	bst	r25, 7
    4c8a:	1e f4       	brtc	.+6      	; 0x4c92 <itoa+0x1c>
    4c8c:	90 95       	com	r25
    4c8e:	81 95       	neg	r24
    4c90:	9f 4f       	sbci	r25, 0xFF	; 255
    4c92:	64 2f       	mov	r22, r20
    4c94:	77 27       	eor	r23, r23
    4c96:	0e 94 0d 29 	call	0x521a	; 0x521a <__udivmodhi4>
    4c9a:	80 5d       	subi	r24, 0xD0	; 208
    4c9c:	8a 33       	cpi	r24, 0x3A	; 58
    4c9e:	0c f0       	brlt	.+2      	; 0x4ca2 <itoa+0x2c>
    4ca0:	89 5d       	subi	r24, 0xD9	; 217
    4ca2:	81 93       	st	Z+, r24
    4ca4:	cb 01       	movw	r24, r22
    4ca6:	00 97       	sbiw	r24, 0x00	; 0
    4ca8:	a1 f7       	brne	.-24     	; 0x4c92 <itoa+0x1c>
    4caa:	16 f4       	brtc	.+4      	; 0x4cb0 <itoa+0x3a>
    4cac:	5d e2       	ldi	r21, 0x2D	; 45
    4cae:	51 93       	st	Z+, r21
    4cb0:	10 82       	st	Z, r1
    4cb2:	c9 01       	movw	r24, r18
    4cb4:	0c 94 73 28 	jmp	0x50e6	; 0x50e6 <strrev>

00004cb8 <sprintf>:
    4cb8:	ae e0       	ldi	r26, 0x0E	; 14
    4cba:	b0 e0       	ldi	r27, 0x00	; 0
    4cbc:	e2 e6       	ldi	r30, 0x62	; 98
    4cbe:	f6 e2       	ldi	r31, 0x26	; 38
    4cc0:	0c 94 12 26 	jmp	0x4c24	; 0x4c24 <__prologue_saves__+0x1c>
    4cc4:	0d 89       	ldd	r16, Y+21	; 0x15
    4cc6:	1e 89       	ldd	r17, Y+22	; 0x16
    4cc8:	86 e0       	ldi	r24, 0x06	; 6
    4cca:	8c 83       	std	Y+4, r24	; 0x04
    4ccc:	1a 83       	std	Y+2, r17	; 0x02
    4cce:	09 83       	std	Y+1, r16	; 0x01
    4cd0:	8f ef       	ldi	r24, 0xFF	; 255
    4cd2:	9f e7       	ldi	r25, 0x7F	; 127
    4cd4:	9e 83       	std	Y+6, r25	; 0x06
    4cd6:	8d 83       	std	Y+5, r24	; 0x05
    4cd8:	9e 01       	movw	r18, r28
    4cda:	27 5e       	subi	r18, 0xE7	; 231
    4cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    4cde:	ce 01       	movw	r24, r28
    4ce0:	01 96       	adiw	r24, 0x01	; 1
    4ce2:	6f 89       	ldd	r22, Y+23	; 0x17
    4ce4:	78 8d       	ldd	r23, Y+24	; 0x18
    4ce6:	a9 01       	movw	r20, r18
    4ce8:	0e 94 80 26 	call	0x4d00	; 0x4d00 <vfprintf>
    4cec:	2f 81       	ldd	r18, Y+7	; 0x07
    4cee:	38 85       	ldd	r19, Y+8	; 0x08
    4cf0:	02 0f       	add	r16, r18
    4cf2:	13 1f       	adc	r17, r19
    4cf4:	f8 01       	movw	r30, r16
    4cf6:	10 82       	st	Z, r1
    4cf8:	2e 96       	adiw	r28, 0x0e	; 14
    4cfa:	e4 e0       	ldi	r30, 0x04	; 4
    4cfc:	0c 94 2e 26 	jmp	0x4c5c	; 0x4c5c <__epilogue_restores__+0x1c>

00004d00 <vfprintf>:
    4d00:	ab e0       	ldi	r26, 0x0B	; 11
    4d02:	b0 e0       	ldi	r27, 0x00	; 0
    4d04:	e6 e8       	ldi	r30, 0x86	; 134
    4d06:	f6 e2       	ldi	r31, 0x26	; 38
    4d08:	0c 94 04 26 	jmp	0x4c08	; 0x4c08 <__prologue_saves__>
    4d0c:	3c 01       	movw	r6, r24
    4d0e:	2b 01       	movw	r4, r22
    4d10:	5a 01       	movw	r10, r20
    4d12:	fc 01       	movw	r30, r24
    4d14:	17 82       	std	Z+7, r1	; 0x07
    4d16:	16 82       	std	Z+6, r1	; 0x06
    4d18:	83 81       	ldd	r24, Z+3	; 0x03
    4d1a:	81 fd       	sbrc	r24, 1
    4d1c:	03 c0       	rjmp	.+6      	; 0x4d24 <vfprintf+0x24>
    4d1e:	6f ef       	ldi	r22, 0xFF	; 255
    4d20:	7f ef       	ldi	r23, 0xFF	; 255
    4d22:	c6 c1       	rjmp	.+908    	; 0x50b0 <vfprintf+0x3b0>
    4d24:	9a e0       	ldi	r25, 0x0A	; 10
    4d26:	89 2e       	mov	r8, r25
    4d28:	1e 01       	movw	r2, r28
    4d2a:	08 94       	sec
    4d2c:	21 1c       	adc	r2, r1
    4d2e:	31 1c       	adc	r3, r1
    4d30:	f3 01       	movw	r30, r6
    4d32:	23 81       	ldd	r18, Z+3	; 0x03
    4d34:	f2 01       	movw	r30, r4
    4d36:	23 fd       	sbrc	r18, 3
    4d38:	85 91       	lpm	r24, Z+
    4d3a:	23 ff       	sbrs	r18, 3
    4d3c:	81 91       	ld	r24, Z+
    4d3e:	2f 01       	movw	r4, r30
    4d40:	88 23       	and	r24, r24
    4d42:	09 f4       	brne	.+2      	; 0x4d46 <vfprintf+0x46>
    4d44:	b2 c1       	rjmp	.+868    	; 0x50aa <vfprintf+0x3aa>
    4d46:	85 32       	cpi	r24, 0x25	; 37
    4d48:	39 f4       	brne	.+14     	; 0x4d58 <vfprintf+0x58>
    4d4a:	23 fd       	sbrc	r18, 3
    4d4c:	85 91       	lpm	r24, Z+
    4d4e:	23 ff       	sbrs	r18, 3
    4d50:	81 91       	ld	r24, Z+
    4d52:	2f 01       	movw	r4, r30
    4d54:	85 32       	cpi	r24, 0x25	; 37
    4d56:	29 f4       	brne	.+10     	; 0x4d62 <vfprintf+0x62>
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	b3 01       	movw	r22, r6
    4d5c:	0e 94 83 28 	call	0x5106	; 0x5106 <fputc>
    4d60:	e7 cf       	rjmp	.-50     	; 0x4d30 <vfprintf+0x30>
    4d62:	98 2f       	mov	r25, r24
    4d64:	ff 24       	eor	r15, r15
    4d66:	ee 24       	eor	r14, r14
    4d68:	99 24       	eor	r9, r9
    4d6a:	ff e1       	ldi	r31, 0x1F	; 31
    4d6c:	ff 15       	cp	r31, r15
    4d6e:	d0 f0       	brcs	.+52     	; 0x4da4 <vfprintf+0xa4>
    4d70:	9b 32       	cpi	r25, 0x2B	; 43
    4d72:	69 f0       	breq	.+26     	; 0x4d8e <vfprintf+0x8e>
    4d74:	9c 32       	cpi	r25, 0x2C	; 44
    4d76:	28 f4       	brcc	.+10     	; 0x4d82 <vfprintf+0x82>
    4d78:	90 32       	cpi	r25, 0x20	; 32
    4d7a:	59 f0       	breq	.+22     	; 0x4d92 <vfprintf+0x92>
    4d7c:	93 32       	cpi	r25, 0x23	; 35
    4d7e:	91 f4       	brne	.+36     	; 0x4da4 <vfprintf+0xa4>
    4d80:	0e c0       	rjmp	.+28     	; 0x4d9e <vfprintf+0x9e>
    4d82:	9d 32       	cpi	r25, 0x2D	; 45
    4d84:	49 f0       	breq	.+18     	; 0x4d98 <vfprintf+0x98>
    4d86:	90 33       	cpi	r25, 0x30	; 48
    4d88:	69 f4       	brne	.+26     	; 0x4da4 <vfprintf+0xa4>
    4d8a:	41 e0       	ldi	r20, 0x01	; 1
    4d8c:	24 c0       	rjmp	.+72     	; 0x4dd6 <vfprintf+0xd6>
    4d8e:	52 e0       	ldi	r21, 0x02	; 2
    4d90:	f5 2a       	or	r15, r21
    4d92:	84 e0       	ldi	r24, 0x04	; 4
    4d94:	f8 2a       	or	r15, r24
    4d96:	28 c0       	rjmp	.+80     	; 0x4de8 <vfprintf+0xe8>
    4d98:	98 e0       	ldi	r25, 0x08	; 8
    4d9a:	f9 2a       	or	r15, r25
    4d9c:	25 c0       	rjmp	.+74     	; 0x4de8 <vfprintf+0xe8>
    4d9e:	e0 e1       	ldi	r30, 0x10	; 16
    4da0:	fe 2a       	or	r15, r30
    4da2:	22 c0       	rjmp	.+68     	; 0x4de8 <vfprintf+0xe8>
    4da4:	f7 fc       	sbrc	r15, 7
    4da6:	29 c0       	rjmp	.+82     	; 0x4dfa <vfprintf+0xfa>
    4da8:	89 2f       	mov	r24, r25
    4daa:	80 53       	subi	r24, 0x30	; 48
    4dac:	8a 30       	cpi	r24, 0x0A	; 10
    4dae:	70 f4       	brcc	.+28     	; 0x4dcc <vfprintf+0xcc>
    4db0:	f6 fe       	sbrs	r15, 6
    4db2:	05 c0       	rjmp	.+10     	; 0x4dbe <vfprintf+0xbe>
    4db4:	98 9c       	mul	r9, r8
    4db6:	90 2c       	mov	r9, r0
    4db8:	11 24       	eor	r1, r1
    4dba:	98 0e       	add	r9, r24
    4dbc:	15 c0       	rjmp	.+42     	; 0x4de8 <vfprintf+0xe8>
    4dbe:	e8 9c       	mul	r14, r8
    4dc0:	e0 2c       	mov	r14, r0
    4dc2:	11 24       	eor	r1, r1
    4dc4:	e8 0e       	add	r14, r24
    4dc6:	f0 e2       	ldi	r31, 0x20	; 32
    4dc8:	ff 2a       	or	r15, r31
    4dca:	0e c0       	rjmp	.+28     	; 0x4de8 <vfprintf+0xe8>
    4dcc:	9e 32       	cpi	r25, 0x2E	; 46
    4dce:	29 f4       	brne	.+10     	; 0x4dda <vfprintf+0xda>
    4dd0:	f6 fc       	sbrc	r15, 6
    4dd2:	6b c1       	rjmp	.+726    	; 0x50aa <vfprintf+0x3aa>
    4dd4:	40 e4       	ldi	r20, 0x40	; 64
    4dd6:	f4 2a       	or	r15, r20
    4dd8:	07 c0       	rjmp	.+14     	; 0x4de8 <vfprintf+0xe8>
    4dda:	9c 36       	cpi	r25, 0x6C	; 108
    4ddc:	19 f4       	brne	.+6      	; 0x4de4 <vfprintf+0xe4>
    4dde:	50 e8       	ldi	r21, 0x80	; 128
    4de0:	f5 2a       	or	r15, r21
    4de2:	02 c0       	rjmp	.+4      	; 0x4de8 <vfprintf+0xe8>
    4de4:	98 36       	cpi	r25, 0x68	; 104
    4de6:	49 f4       	brne	.+18     	; 0x4dfa <vfprintf+0xfa>
    4de8:	f2 01       	movw	r30, r4
    4dea:	23 fd       	sbrc	r18, 3
    4dec:	95 91       	lpm	r25, Z+
    4dee:	23 ff       	sbrs	r18, 3
    4df0:	91 91       	ld	r25, Z+
    4df2:	2f 01       	movw	r4, r30
    4df4:	99 23       	and	r25, r25
    4df6:	09 f0       	breq	.+2      	; 0x4dfa <vfprintf+0xfa>
    4df8:	b8 cf       	rjmp	.-144    	; 0x4d6a <vfprintf+0x6a>
    4dfa:	89 2f       	mov	r24, r25
    4dfc:	85 54       	subi	r24, 0x45	; 69
    4dfe:	83 30       	cpi	r24, 0x03	; 3
    4e00:	18 f0       	brcs	.+6      	; 0x4e08 <vfprintf+0x108>
    4e02:	80 52       	subi	r24, 0x20	; 32
    4e04:	83 30       	cpi	r24, 0x03	; 3
    4e06:	38 f4       	brcc	.+14     	; 0x4e16 <vfprintf+0x116>
    4e08:	44 e0       	ldi	r20, 0x04	; 4
    4e0a:	50 e0       	ldi	r21, 0x00	; 0
    4e0c:	a4 0e       	add	r10, r20
    4e0e:	b5 1e       	adc	r11, r21
    4e10:	5f e3       	ldi	r21, 0x3F	; 63
    4e12:	59 83       	std	Y+1, r21	; 0x01
    4e14:	0f c0       	rjmp	.+30     	; 0x4e34 <vfprintf+0x134>
    4e16:	93 36       	cpi	r25, 0x63	; 99
    4e18:	31 f0       	breq	.+12     	; 0x4e26 <vfprintf+0x126>
    4e1a:	93 37       	cpi	r25, 0x73	; 115
    4e1c:	79 f0       	breq	.+30     	; 0x4e3c <vfprintf+0x13c>
    4e1e:	93 35       	cpi	r25, 0x53	; 83
    4e20:	09 f0       	breq	.+2      	; 0x4e24 <vfprintf+0x124>
    4e22:	56 c0       	rjmp	.+172    	; 0x4ed0 <vfprintf+0x1d0>
    4e24:	20 c0       	rjmp	.+64     	; 0x4e66 <vfprintf+0x166>
    4e26:	f5 01       	movw	r30, r10
    4e28:	80 81       	ld	r24, Z
    4e2a:	89 83       	std	Y+1, r24	; 0x01
    4e2c:	42 e0       	ldi	r20, 0x02	; 2
    4e2e:	50 e0       	ldi	r21, 0x00	; 0
    4e30:	a4 0e       	add	r10, r20
    4e32:	b5 1e       	adc	r11, r21
    4e34:	61 01       	movw	r12, r2
    4e36:	01 e0       	ldi	r16, 0x01	; 1
    4e38:	10 e0       	ldi	r17, 0x00	; 0
    4e3a:	12 c0       	rjmp	.+36     	; 0x4e60 <vfprintf+0x160>
    4e3c:	f5 01       	movw	r30, r10
    4e3e:	c0 80       	ld	r12, Z
    4e40:	d1 80       	ldd	r13, Z+1	; 0x01
    4e42:	f6 fc       	sbrc	r15, 6
    4e44:	03 c0       	rjmp	.+6      	; 0x4e4c <vfprintf+0x14c>
    4e46:	6f ef       	ldi	r22, 0xFF	; 255
    4e48:	7f ef       	ldi	r23, 0xFF	; 255
    4e4a:	02 c0       	rjmp	.+4      	; 0x4e50 <vfprintf+0x150>
    4e4c:	69 2d       	mov	r22, r9
    4e4e:	70 e0       	ldi	r23, 0x00	; 0
    4e50:	42 e0       	ldi	r20, 0x02	; 2
    4e52:	50 e0       	ldi	r21, 0x00	; 0
    4e54:	a4 0e       	add	r10, r20
    4e56:	b5 1e       	adc	r11, r21
    4e58:	c6 01       	movw	r24, r12
    4e5a:	0e 94 68 28 	call	0x50d0	; 0x50d0 <strnlen>
    4e5e:	8c 01       	movw	r16, r24
    4e60:	5f e7       	ldi	r21, 0x7F	; 127
    4e62:	f5 22       	and	r15, r21
    4e64:	14 c0       	rjmp	.+40     	; 0x4e8e <vfprintf+0x18e>
    4e66:	f5 01       	movw	r30, r10
    4e68:	c0 80       	ld	r12, Z
    4e6a:	d1 80       	ldd	r13, Z+1	; 0x01
    4e6c:	f6 fc       	sbrc	r15, 6
    4e6e:	03 c0       	rjmp	.+6      	; 0x4e76 <vfprintf+0x176>
    4e70:	6f ef       	ldi	r22, 0xFF	; 255
    4e72:	7f ef       	ldi	r23, 0xFF	; 255
    4e74:	02 c0       	rjmp	.+4      	; 0x4e7a <vfprintf+0x17a>
    4e76:	69 2d       	mov	r22, r9
    4e78:	70 e0       	ldi	r23, 0x00	; 0
    4e7a:	42 e0       	ldi	r20, 0x02	; 2
    4e7c:	50 e0       	ldi	r21, 0x00	; 0
    4e7e:	a4 0e       	add	r10, r20
    4e80:	b5 1e       	adc	r11, r21
    4e82:	c6 01       	movw	r24, r12
    4e84:	0e 94 5d 28 	call	0x50ba	; 0x50ba <strnlen_P>
    4e88:	8c 01       	movw	r16, r24
    4e8a:	50 e8       	ldi	r21, 0x80	; 128
    4e8c:	f5 2a       	or	r15, r21
    4e8e:	f3 fe       	sbrs	r15, 3
    4e90:	07 c0       	rjmp	.+14     	; 0x4ea0 <vfprintf+0x1a0>
    4e92:	1a c0       	rjmp	.+52     	; 0x4ec8 <vfprintf+0x1c8>
    4e94:	80 e2       	ldi	r24, 0x20	; 32
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	b3 01       	movw	r22, r6
    4e9a:	0e 94 83 28 	call	0x5106	; 0x5106 <fputc>
    4e9e:	ea 94       	dec	r14
    4ea0:	8e 2d       	mov	r24, r14
    4ea2:	90 e0       	ldi	r25, 0x00	; 0
    4ea4:	08 17       	cp	r16, r24
    4ea6:	19 07       	cpc	r17, r25
    4ea8:	a8 f3       	brcs	.-22     	; 0x4e94 <vfprintf+0x194>
    4eaa:	0e c0       	rjmp	.+28     	; 0x4ec8 <vfprintf+0x1c8>
    4eac:	f6 01       	movw	r30, r12
    4eae:	f7 fc       	sbrc	r15, 7
    4eb0:	85 91       	lpm	r24, Z+
    4eb2:	f7 fe       	sbrs	r15, 7
    4eb4:	81 91       	ld	r24, Z+
    4eb6:	6f 01       	movw	r12, r30
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	b3 01       	movw	r22, r6
    4ebc:	0e 94 83 28 	call	0x5106	; 0x5106 <fputc>
    4ec0:	e1 10       	cpse	r14, r1
    4ec2:	ea 94       	dec	r14
    4ec4:	01 50       	subi	r16, 0x01	; 1
    4ec6:	10 40       	sbci	r17, 0x00	; 0
    4ec8:	01 15       	cp	r16, r1
    4eca:	11 05       	cpc	r17, r1
    4ecc:	79 f7       	brne	.-34     	; 0x4eac <vfprintf+0x1ac>
    4ece:	ea c0       	rjmp	.+468    	; 0x50a4 <vfprintf+0x3a4>
    4ed0:	94 36       	cpi	r25, 0x64	; 100
    4ed2:	11 f0       	breq	.+4      	; 0x4ed8 <vfprintf+0x1d8>
    4ed4:	99 36       	cpi	r25, 0x69	; 105
    4ed6:	69 f5       	brne	.+90     	; 0x4f32 <vfprintf+0x232>
    4ed8:	f7 fe       	sbrs	r15, 7
    4eda:	08 c0       	rjmp	.+16     	; 0x4eec <vfprintf+0x1ec>
    4edc:	f5 01       	movw	r30, r10
    4ede:	20 81       	ld	r18, Z
    4ee0:	31 81       	ldd	r19, Z+1	; 0x01
    4ee2:	42 81       	ldd	r20, Z+2	; 0x02
    4ee4:	53 81       	ldd	r21, Z+3	; 0x03
    4ee6:	84 e0       	ldi	r24, 0x04	; 4
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	0a c0       	rjmp	.+20     	; 0x4f00 <vfprintf+0x200>
    4eec:	f5 01       	movw	r30, r10
    4eee:	80 81       	ld	r24, Z
    4ef0:	91 81       	ldd	r25, Z+1	; 0x01
    4ef2:	9c 01       	movw	r18, r24
    4ef4:	44 27       	eor	r20, r20
    4ef6:	37 fd       	sbrc	r19, 7
    4ef8:	40 95       	com	r20
    4efa:	54 2f       	mov	r21, r20
    4efc:	82 e0       	ldi	r24, 0x02	; 2
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	a8 0e       	add	r10, r24
    4f02:	b9 1e       	adc	r11, r25
    4f04:	9f e6       	ldi	r25, 0x6F	; 111
    4f06:	f9 22       	and	r15, r25
    4f08:	57 ff       	sbrs	r21, 7
    4f0a:	09 c0       	rjmp	.+18     	; 0x4f1e <vfprintf+0x21e>
    4f0c:	50 95       	com	r21
    4f0e:	40 95       	com	r20
    4f10:	30 95       	com	r19
    4f12:	21 95       	neg	r18
    4f14:	3f 4f       	sbci	r19, 0xFF	; 255
    4f16:	4f 4f       	sbci	r20, 0xFF	; 255
    4f18:	5f 4f       	sbci	r21, 0xFF	; 255
    4f1a:	e0 e8       	ldi	r30, 0x80	; 128
    4f1c:	fe 2a       	or	r15, r30
    4f1e:	ca 01       	movw	r24, r20
    4f20:	b9 01       	movw	r22, r18
    4f22:	a1 01       	movw	r20, r2
    4f24:	2a e0       	ldi	r18, 0x0A	; 10
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	0e 94 af 28 	call	0x515e	; 0x515e <__ultoa_invert>
    4f2c:	d8 2e       	mov	r13, r24
    4f2e:	d2 18       	sub	r13, r2
    4f30:	40 c0       	rjmp	.+128    	; 0x4fb2 <vfprintf+0x2b2>
    4f32:	95 37       	cpi	r25, 0x75	; 117
    4f34:	29 f4       	brne	.+10     	; 0x4f40 <vfprintf+0x240>
    4f36:	1f 2d       	mov	r17, r15
    4f38:	1f 7e       	andi	r17, 0xEF	; 239
    4f3a:	2a e0       	ldi	r18, 0x0A	; 10
    4f3c:	30 e0       	ldi	r19, 0x00	; 0
    4f3e:	1d c0       	rjmp	.+58     	; 0x4f7a <vfprintf+0x27a>
    4f40:	1f 2d       	mov	r17, r15
    4f42:	19 7f       	andi	r17, 0xF9	; 249
    4f44:	9f 36       	cpi	r25, 0x6F	; 111
    4f46:	61 f0       	breq	.+24     	; 0x4f60 <vfprintf+0x260>
    4f48:	90 37       	cpi	r25, 0x70	; 112
    4f4a:	20 f4       	brcc	.+8      	; 0x4f54 <vfprintf+0x254>
    4f4c:	98 35       	cpi	r25, 0x58	; 88
    4f4e:	09 f0       	breq	.+2      	; 0x4f52 <vfprintf+0x252>
    4f50:	ac c0       	rjmp	.+344    	; 0x50aa <vfprintf+0x3aa>
    4f52:	0f c0       	rjmp	.+30     	; 0x4f72 <vfprintf+0x272>
    4f54:	90 37       	cpi	r25, 0x70	; 112
    4f56:	39 f0       	breq	.+14     	; 0x4f66 <vfprintf+0x266>
    4f58:	98 37       	cpi	r25, 0x78	; 120
    4f5a:	09 f0       	breq	.+2      	; 0x4f5e <vfprintf+0x25e>
    4f5c:	a6 c0       	rjmp	.+332    	; 0x50aa <vfprintf+0x3aa>
    4f5e:	04 c0       	rjmp	.+8      	; 0x4f68 <vfprintf+0x268>
    4f60:	28 e0       	ldi	r18, 0x08	; 8
    4f62:	30 e0       	ldi	r19, 0x00	; 0
    4f64:	0a c0       	rjmp	.+20     	; 0x4f7a <vfprintf+0x27a>
    4f66:	10 61       	ori	r17, 0x10	; 16
    4f68:	14 fd       	sbrc	r17, 4
    4f6a:	14 60       	ori	r17, 0x04	; 4
    4f6c:	20 e1       	ldi	r18, 0x10	; 16
    4f6e:	30 e0       	ldi	r19, 0x00	; 0
    4f70:	04 c0       	rjmp	.+8      	; 0x4f7a <vfprintf+0x27a>
    4f72:	14 fd       	sbrc	r17, 4
    4f74:	16 60       	ori	r17, 0x06	; 6
    4f76:	20 e1       	ldi	r18, 0x10	; 16
    4f78:	32 e0       	ldi	r19, 0x02	; 2
    4f7a:	17 ff       	sbrs	r17, 7
    4f7c:	08 c0       	rjmp	.+16     	; 0x4f8e <vfprintf+0x28e>
    4f7e:	f5 01       	movw	r30, r10
    4f80:	60 81       	ld	r22, Z
    4f82:	71 81       	ldd	r23, Z+1	; 0x01
    4f84:	82 81       	ldd	r24, Z+2	; 0x02
    4f86:	93 81       	ldd	r25, Z+3	; 0x03
    4f88:	44 e0       	ldi	r20, 0x04	; 4
    4f8a:	50 e0       	ldi	r21, 0x00	; 0
    4f8c:	08 c0       	rjmp	.+16     	; 0x4f9e <vfprintf+0x29e>
    4f8e:	f5 01       	movw	r30, r10
    4f90:	80 81       	ld	r24, Z
    4f92:	91 81       	ldd	r25, Z+1	; 0x01
    4f94:	bc 01       	movw	r22, r24
    4f96:	80 e0       	ldi	r24, 0x00	; 0
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	42 e0       	ldi	r20, 0x02	; 2
    4f9c:	50 e0       	ldi	r21, 0x00	; 0
    4f9e:	a4 0e       	add	r10, r20
    4fa0:	b5 1e       	adc	r11, r21
    4fa2:	a1 01       	movw	r20, r2
    4fa4:	0e 94 af 28 	call	0x515e	; 0x515e <__ultoa_invert>
    4fa8:	d8 2e       	mov	r13, r24
    4faa:	d2 18       	sub	r13, r2
    4fac:	8f e7       	ldi	r24, 0x7F	; 127
    4fae:	f8 2e       	mov	r15, r24
    4fb0:	f1 22       	and	r15, r17
    4fb2:	f6 fe       	sbrs	r15, 6
    4fb4:	0b c0       	rjmp	.+22     	; 0x4fcc <vfprintf+0x2cc>
    4fb6:	5e ef       	ldi	r21, 0xFE	; 254
    4fb8:	f5 22       	and	r15, r21
    4fba:	d9 14       	cp	r13, r9
    4fbc:	38 f4       	brcc	.+14     	; 0x4fcc <vfprintf+0x2cc>
    4fbe:	f4 fe       	sbrs	r15, 4
    4fc0:	07 c0       	rjmp	.+14     	; 0x4fd0 <vfprintf+0x2d0>
    4fc2:	f2 fc       	sbrc	r15, 2
    4fc4:	05 c0       	rjmp	.+10     	; 0x4fd0 <vfprintf+0x2d0>
    4fc6:	8f ee       	ldi	r24, 0xEF	; 239
    4fc8:	f8 22       	and	r15, r24
    4fca:	02 c0       	rjmp	.+4      	; 0x4fd0 <vfprintf+0x2d0>
    4fcc:	1d 2d       	mov	r17, r13
    4fce:	01 c0       	rjmp	.+2      	; 0x4fd2 <vfprintf+0x2d2>
    4fd0:	19 2d       	mov	r17, r9
    4fd2:	f4 fe       	sbrs	r15, 4
    4fd4:	0d c0       	rjmp	.+26     	; 0x4ff0 <vfprintf+0x2f0>
    4fd6:	fe 01       	movw	r30, r28
    4fd8:	ed 0d       	add	r30, r13
    4fda:	f1 1d       	adc	r31, r1
    4fdc:	80 81       	ld	r24, Z
    4fde:	80 33       	cpi	r24, 0x30	; 48
    4fe0:	19 f4       	brne	.+6      	; 0x4fe8 <vfprintf+0x2e8>
    4fe2:	99 ee       	ldi	r25, 0xE9	; 233
    4fe4:	f9 22       	and	r15, r25
    4fe6:	08 c0       	rjmp	.+16     	; 0x4ff8 <vfprintf+0x2f8>
    4fe8:	1f 5f       	subi	r17, 0xFF	; 255
    4fea:	f2 fe       	sbrs	r15, 2
    4fec:	05 c0       	rjmp	.+10     	; 0x4ff8 <vfprintf+0x2f8>
    4fee:	03 c0       	rjmp	.+6      	; 0x4ff6 <vfprintf+0x2f6>
    4ff0:	8f 2d       	mov	r24, r15
    4ff2:	86 78       	andi	r24, 0x86	; 134
    4ff4:	09 f0       	breq	.+2      	; 0x4ff8 <vfprintf+0x2f8>
    4ff6:	1f 5f       	subi	r17, 0xFF	; 255
    4ff8:	0f 2d       	mov	r16, r15
    4ffa:	f3 fc       	sbrc	r15, 3
    4ffc:	14 c0       	rjmp	.+40     	; 0x5026 <vfprintf+0x326>
    4ffe:	f0 fe       	sbrs	r15, 0
    5000:	0f c0       	rjmp	.+30     	; 0x5020 <vfprintf+0x320>
    5002:	1e 15       	cp	r17, r14
    5004:	10 f0       	brcs	.+4      	; 0x500a <vfprintf+0x30a>
    5006:	9d 2c       	mov	r9, r13
    5008:	0b c0       	rjmp	.+22     	; 0x5020 <vfprintf+0x320>
    500a:	9d 2c       	mov	r9, r13
    500c:	9e 0c       	add	r9, r14
    500e:	91 1a       	sub	r9, r17
    5010:	1e 2d       	mov	r17, r14
    5012:	06 c0       	rjmp	.+12     	; 0x5020 <vfprintf+0x320>
    5014:	80 e2       	ldi	r24, 0x20	; 32
    5016:	90 e0       	ldi	r25, 0x00	; 0
    5018:	b3 01       	movw	r22, r6
    501a:	0e 94 83 28 	call	0x5106	; 0x5106 <fputc>
    501e:	1f 5f       	subi	r17, 0xFF	; 255
    5020:	1e 15       	cp	r17, r14
    5022:	c0 f3       	brcs	.-16     	; 0x5014 <vfprintf+0x314>
    5024:	04 c0       	rjmp	.+8      	; 0x502e <vfprintf+0x32e>
    5026:	1e 15       	cp	r17, r14
    5028:	10 f4       	brcc	.+4      	; 0x502e <vfprintf+0x32e>
    502a:	e1 1a       	sub	r14, r17
    502c:	01 c0       	rjmp	.+2      	; 0x5030 <vfprintf+0x330>
    502e:	ee 24       	eor	r14, r14
    5030:	04 ff       	sbrs	r16, 4
    5032:	0f c0       	rjmp	.+30     	; 0x5052 <vfprintf+0x352>
    5034:	80 e3       	ldi	r24, 0x30	; 48
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	b3 01       	movw	r22, r6
    503a:	0e 94 83 28 	call	0x5106	; 0x5106 <fputc>
    503e:	02 ff       	sbrs	r16, 2
    5040:	1d c0       	rjmp	.+58     	; 0x507c <vfprintf+0x37c>
    5042:	01 fd       	sbrc	r16, 1
    5044:	03 c0       	rjmp	.+6      	; 0x504c <vfprintf+0x34c>
    5046:	88 e7       	ldi	r24, 0x78	; 120
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	0e c0       	rjmp	.+28     	; 0x5068 <vfprintf+0x368>
    504c:	88 e5       	ldi	r24, 0x58	; 88
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	0b c0       	rjmp	.+22     	; 0x5068 <vfprintf+0x368>
    5052:	80 2f       	mov	r24, r16
    5054:	86 78       	andi	r24, 0x86	; 134
    5056:	91 f0       	breq	.+36     	; 0x507c <vfprintf+0x37c>
    5058:	01 ff       	sbrs	r16, 1
    505a:	02 c0       	rjmp	.+4      	; 0x5060 <vfprintf+0x360>
    505c:	8b e2       	ldi	r24, 0x2B	; 43
    505e:	01 c0       	rjmp	.+2      	; 0x5062 <vfprintf+0x362>
    5060:	80 e2       	ldi	r24, 0x20	; 32
    5062:	f7 fc       	sbrc	r15, 7
    5064:	8d e2       	ldi	r24, 0x2D	; 45
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	b3 01       	movw	r22, r6
    506a:	0e 94 83 28 	call	0x5106	; 0x5106 <fputc>
    506e:	06 c0       	rjmp	.+12     	; 0x507c <vfprintf+0x37c>
    5070:	80 e3       	ldi	r24, 0x30	; 48
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	b3 01       	movw	r22, r6
    5076:	0e 94 83 28 	call	0x5106	; 0x5106 <fputc>
    507a:	9a 94       	dec	r9
    507c:	d9 14       	cp	r13, r9
    507e:	c0 f3       	brcs	.-16     	; 0x5070 <vfprintf+0x370>
    5080:	da 94       	dec	r13
    5082:	f1 01       	movw	r30, r2
    5084:	ed 0d       	add	r30, r13
    5086:	f1 1d       	adc	r31, r1
    5088:	80 81       	ld	r24, Z
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	b3 01       	movw	r22, r6
    508e:	0e 94 83 28 	call	0x5106	; 0x5106 <fputc>
    5092:	dd 20       	and	r13, r13
    5094:	a9 f7       	brne	.-22     	; 0x5080 <vfprintf+0x380>
    5096:	06 c0       	rjmp	.+12     	; 0x50a4 <vfprintf+0x3a4>
    5098:	80 e2       	ldi	r24, 0x20	; 32
    509a:	90 e0       	ldi	r25, 0x00	; 0
    509c:	b3 01       	movw	r22, r6
    509e:	0e 94 83 28 	call	0x5106	; 0x5106 <fputc>
    50a2:	ea 94       	dec	r14
    50a4:	ee 20       	and	r14, r14
    50a6:	c1 f7       	brne	.-16     	; 0x5098 <vfprintf+0x398>
    50a8:	43 ce       	rjmp	.-890    	; 0x4d30 <vfprintf+0x30>
    50aa:	f3 01       	movw	r30, r6
    50ac:	66 81       	ldd	r22, Z+6	; 0x06
    50ae:	77 81       	ldd	r23, Z+7	; 0x07
    50b0:	cb 01       	movw	r24, r22
    50b2:	2b 96       	adiw	r28, 0x0b	; 11
    50b4:	e2 e1       	ldi	r30, 0x12	; 18
    50b6:	0c 94 20 26 	jmp	0x4c40	; 0x4c40 <__epilogue_restores__>

000050ba <strnlen_P>:
    50ba:	fc 01       	movw	r30, r24
    50bc:	05 90       	lpm	r0, Z+
    50be:	61 50       	subi	r22, 0x01	; 1
    50c0:	70 40       	sbci	r23, 0x00	; 0
    50c2:	01 10       	cpse	r0, r1
    50c4:	d8 f7       	brcc	.-10     	; 0x50bc <strnlen_P+0x2>
    50c6:	80 95       	com	r24
    50c8:	90 95       	com	r25
    50ca:	8e 0f       	add	r24, r30
    50cc:	9f 1f       	adc	r25, r31
    50ce:	08 95       	ret

000050d0 <strnlen>:
    50d0:	fc 01       	movw	r30, r24
    50d2:	61 50       	subi	r22, 0x01	; 1
    50d4:	70 40       	sbci	r23, 0x00	; 0
    50d6:	01 90       	ld	r0, Z+
    50d8:	01 10       	cpse	r0, r1
    50da:	d8 f7       	brcc	.-10     	; 0x50d2 <strnlen+0x2>
    50dc:	80 95       	com	r24
    50de:	90 95       	com	r25
    50e0:	8e 0f       	add	r24, r30
    50e2:	9f 1f       	adc	r25, r31
    50e4:	08 95       	ret

000050e6 <strrev>:
    50e6:	dc 01       	movw	r26, r24
    50e8:	fc 01       	movw	r30, r24
    50ea:	67 2f       	mov	r22, r23
    50ec:	71 91       	ld	r23, Z+
    50ee:	77 23       	and	r23, r23
    50f0:	e1 f7       	brne	.-8      	; 0x50ea <strrev+0x4>
    50f2:	32 97       	sbiw	r30, 0x02	; 2
    50f4:	04 c0       	rjmp	.+8      	; 0x50fe <strrev+0x18>
    50f6:	7c 91       	ld	r23, X
    50f8:	6d 93       	st	X+, r22
    50fa:	70 83       	st	Z, r23
    50fc:	62 91       	ld	r22, -Z
    50fe:	ae 17       	cp	r26, r30
    5100:	bf 07       	cpc	r27, r31
    5102:	c8 f3       	brcs	.-14     	; 0x50f6 <strrev+0x10>
    5104:	08 95       	ret

00005106 <fputc>:
    5106:	0f 93       	push	r16
    5108:	1f 93       	push	r17
    510a:	cf 93       	push	r28
    510c:	df 93       	push	r29
    510e:	8c 01       	movw	r16, r24
    5110:	eb 01       	movw	r28, r22
    5112:	8b 81       	ldd	r24, Y+3	; 0x03
    5114:	81 ff       	sbrs	r24, 1
    5116:	1b c0       	rjmp	.+54     	; 0x514e <fputc+0x48>
    5118:	82 ff       	sbrs	r24, 2
    511a:	0d c0       	rjmp	.+26     	; 0x5136 <fputc+0x30>
    511c:	2e 81       	ldd	r18, Y+6	; 0x06
    511e:	3f 81       	ldd	r19, Y+7	; 0x07
    5120:	8c 81       	ldd	r24, Y+4	; 0x04
    5122:	9d 81       	ldd	r25, Y+5	; 0x05
    5124:	28 17       	cp	r18, r24
    5126:	39 07       	cpc	r19, r25
    5128:	64 f4       	brge	.+24     	; 0x5142 <fputc+0x3c>
    512a:	e8 81       	ld	r30, Y
    512c:	f9 81       	ldd	r31, Y+1	; 0x01
    512e:	01 93       	st	Z+, r16
    5130:	f9 83       	std	Y+1, r31	; 0x01
    5132:	e8 83       	st	Y, r30
    5134:	06 c0       	rjmp	.+12     	; 0x5142 <fputc+0x3c>
    5136:	e8 85       	ldd	r30, Y+8	; 0x08
    5138:	f9 85       	ldd	r31, Y+9	; 0x09
    513a:	80 2f       	mov	r24, r16
    513c:	09 95       	icall
    513e:	89 2b       	or	r24, r25
    5140:	31 f4       	brne	.+12     	; 0x514e <fputc+0x48>
    5142:	8e 81       	ldd	r24, Y+6	; 0x06
    5144:	9f 81       	ldd	r25, Y+7	; 0x07
    5146:	01 96       	adiw	r24, 0x01	; 1
    5148:	9f 83       	std	Y+7, r25	; 0x07
    514a:	8e 83       	std	Y+6, r24	; 0x06
    514c:	02 c0       	rjmp	.+4      	; 0x5152 <fputc+0x4c>
    514e:	0f ef       	ldi	r16, 0xFF	; 255
    5150:	1f ef       	ldi	r17, 0xFF	; 255
    5152:	c8 01       	movw	r24, r16
    5154:	df 91       	pop	r29
    5156:	cf 91       	pop	r28
    5158:	1f 91       	pop	r17
    515a:	0f 91       	pop	r16
    515c:	08 95       	ret

0000515e <__ultoa_invert>:
    515e:	fa 01       	movw	r30, r20
    5160:	aa 27       	eor	r26, r26
    5162:	28 30       	cpi	r18, 0x08	; 8
    5164:	51 f1       	breq	.+84     	; 0x51ba <__ultoa_invert+0x5c>
    5166:	20 31       	cpi	r18, 0x10	; 16
    5168:	81 f1       	breq	.+96     	; 0x51ca <__ultoa_invert+0x6c>
    516a:	e8 94       	clt
    516c:	6f 93       	push	r22
    516e:	6e 7f       	andi	r22, 0xFE	; 254
    5170:	6e 5f       	subi	r22, 0xFE	; 254
    5172:	7f 4f       	sbci	r23, 0xFF	; 255
    5174:	8f 4f       	sbci	r24, 0xFF	; 255
    5176:	9f 4f       	sbci	r25, 0xFF	; 255
    5178:	af 4f       	sbci	r26, 0xFF	; 255
    517a:	b1 e0       	ldi	r27, 0x01	; 1
    517c:	3e d0       	rcall	.+124    	; 0x51fa <__ultoa_invert+0x9c>
    517e:	b4 e0       	ldi	r27, 0x04	; 4
    5180:	3c d0       	rcall	.+120    	; 0x51fa <__ultoa_invert+0x9c>
    5182:	67 0f       	add	r22, r23
    5184:	78 1f       	adc	r23, r24
    5186:	89 1f       	adc	r24, r25
    5188:	9a 1f       	adc	r25, r26
    518a:	a1 1d       	adc	r26, r1
    518c:	68 0f       	add	r22, r24
    518e:	79 1f       	adc	r23, r25
    5190:	8a 1f       	adc	r24, r26
    5192:	91 1d       	adc	r25, r1
    5194:	a1 1d       	adc	r26, r1
    5196:	6a 0f       	add	r22, r26
    5198:	71 1d       	adc	r23, r1
    519a:	81 1d       	adc	r24, r1
    519c:	91 1d       	adc	r25, r1
    519e:	a1 1d       	adc	r26, r1
    51a0:	20 d0       	rcall	.+64     	; 0x51e2 <__ultoa_invert+0x84>
    51a2:	09 f4       	brne	.+2      	; 0x51a6 <__ultoa_invert+0x48>
    51a4:	68 94       	set
    51a6:	3f 91       	pop	r19
    51a8:	2a e0       	ldi	r18, 0x0A	; 10
    51aa:	26 9f       	mul	r18, r22
    51ac:	11 24       	eor	r1, r1
    51ae:	30 19       	sub	r19, r0
    51b0:	30 5d       	subi	r19, 0xD0	; 208
    51b2:	31 93       	st	Z+, r19
    51b4:	de f6       	brtc	.-74     	; 0x516c <__ultoa_invert+0xe>
    51b6:	cf 01       	movw	r24, r30
    51b8:	08 95       	ret
    51ba:	46 2f       	mov	r20, r22
    51bc:	47 70       	andi	r20, 0x07	; 7
    51be:	40 5d       	subi	r20, 0xD0	; 208
    51c0:	41 93       	st	Z+, r20
    51c2:	b3 e0       	ldi	r27, 0x03	; 3
    51c4:	0f d0       	rcall	.+30     	; 0x51e4 <__ultoa_invert+0x86>
    51c6:	c9 f7       	brne	.-14     	; 0x51ba <__ultoa_invert+0x5c>
    51c8:	f6 cf       	rjmp	.-20     	; 0x51b6 <__ultoa_invert+0x58>
    51ca:	46 2f       	mov	r20, r22
    51cc:	4f 70       	andi	r20, 0x0F	; 15
    51ce:	40 5d       	subi	r20, 0xD0	; 208
    51d0:	4a 33       	cpi	r20, 0x3A	; 58
    51d2:	18 f0       	brcs	.+6      	; 0x51da <__ultoa_invert+0x7c>
    51d4:	49 5d       	subi	r20, 0xD9	; 217
    51d6:	31 fd       	sbrc	r19, 1
    51d8:	40 52       	subi	r20, 0x20	; 32
    51da:	41 93       	st	Z+, r20
    51dc:	02 d0       	rcall	.+4      	; 0x51e2 <__ultoa_invert+0x84>
    51de:	a9 f7       	brne	.-22     	; 0x51ca <__ultoa_invert+0x6c>
    51e0:	ea cf       	rjmp	.-44     	; 0x51b6 <__ultoa_invert+0x58>
    51e2:	b4 e0       	ldi	r27, 0x04	; 4
    51e4:	a6 95       	lsr	r26
    51e6:	97 95       	ror	r25
    51e8:	87 95       	ror	r24
    51ea:	77 95       	ror	r23
    51ec:	67 95       	ror	r22
    51ee:	ba 95       	dec	r27
    51f0:	c9 f7       	brne	.-14     	; 0x51e4 <__ultoa_invert+0x86>
    51f2:	00 97       	sbiw	r24, 0x00	; 0
    51f4:	61 05       	cpc	r22, r1
    51f6:	71 05       	cpc	r23, r1
    51f8:	08 95       	ret
    51fa:	9b 01       	movw	r18, r22
    51fc:	ac 01       	movw	r20, r24
    51fe:	0a 2e       	mov	r0, r26
    5200:	06 94       	lsr	r0
    5202:	57 95       	ror	r21
    5204:	47 95       	ror	r20
    5206:	37 95       	ror	r19
    5208:	27 95       	ror	r18
    520a:	ba 95       	dec	r27
    520c:	c9 f7       	brne	.-14     	; 0x5200 <__ultoa_invert+0xa2>
    520e:	62 0f       	add	r22, r18
    5210:	73 1f       	adc	r23, r19
    5212:	84 1f       	adc	r24, r20
    5214:	95 1f       	adc	r25, r21
    5216:	a0 1d       	adc	r26, r0
    5218:	08 95       	ret

0000521a <__udivmodhi4>:
    521a:	aa 1b       	sub	r26, r26
    521c:	bb 1b       	sub	r27, r27
    521e:	51 e1       	ldi	r21, 0x11	; 17
    5220:	07 c0       	rjmp	.+14     	; 0x5230 <__udivmodhi4_ep>

00005222 <__udivmodhi4_loop>:
    5222:	aa 1f       	adc	r26, r26
    5224:	bb 1f       	adc	r27, r27
    5226:	a6 17       	cp	r26, r22
    5228:	b7 07       	cpc	r27, r23
    522a:	10 f0       	brcs	.+4      	; 0x5230 <__udivmodhi4_ep>
    522c:	a6 1b       	sub	r26, r22
    522e:	b7 0b       	sbc	r27, r23

00005230 <__udivmodhi4_ep>:
    5230:	88 1f       	adc	r24, r24
    5232:	99 1f       	adc	r25, r25
    5234:	5a 95       	dec	r21
    5236:	a9 f7       	brne	.-22     	; 0x5222 <__udivmodhi4_loop>
    5238:	80 95       	com	r24
    523a:	90 95       	com	r25
    523c:	bc 01       	movw	r22, r24
    523e:	cd 01       	movw	r24, r26
    5240:	08 95       	ret

00005242 <_exit>:
    5242:	f8 94       	cli

00005244 <__stop_program>:
    5244:	ff cf       	rjmp	.-2      	; 0x5244 <__stop_program>
